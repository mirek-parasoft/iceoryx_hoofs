<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession id="1234567890" buildId="build_4" machine="osboxes" project="test_mirek" tag="google-test" time="2023-09-05T06:54:01-04:00" date="09/05/23 06:54:01" user="demo-user" toolName="DTP Engine for C/C++" toolDispName="C/C++test" toolId="c++test" toolVer="2023.2.0" hasViols="false" execEnv="linux_x86_64" climode="true" lang="en_US">
   <TestConfig machine="osboxes" name="GoogleTest" pseudoUrl="builtin://GoogleTest" user="demo-user"/>

   <Authors>
      <!-- Not supported /-->
   </Authors>
   <Analyzers>
      <!-- Not supported /-->
   </Analyzers>
   <VersionInfos>
      <!-- Not supported /-->
   </VersionInfos>
   <Goals>
      <!-- Not supported /-->
   </Goals>
   <Scope>
      <Repositories>
      </Repositories>
      <Locations>
      </Locations>
   </Scope>

   <Exec ownerId="com.parasoft.xtest.checkers.api.execution">
      <Categories>
         <!-- Not supported /-->
      </Categories>

      <Projects>
         <!-- Not supported /-->
      </Projects>

      <Coverage>
         <!-- Not supported /-->
      </Coverage>

      <AssocUrls>
         <Tag disp="Requirement" name="req" />
         <Tag disp="Feature request" name="fr" />
         <Tag disp="Problem report" name="pr" />
         <Tag disp="Task" name="task" />
         <Tag disp="Asset" name="asset" />
         <Tag disp="Test" name="test" />
      </AssocUrls>

      <ExecViols>
      </ExecViols>

      <ExecutedTestsDetails type="UT">
         <Total total="3005" fail="1" err="0" pass="3004" name="Passed / Total" >
            <Project total="3005" fail="1" err="0" pass="3004" name="test_mirek" >
               <TestSuite ln="1" locRef="" root="true" name="function_refDeathTest" id="cpptest.provider://function_refDeathTest" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="CallMovedFromLeadsToTermination" id="cpptest.provider://function_refDeathTest::CallMovedFromLeadsToTermination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="RegularType_test/0" id="cpptest.provider://RegularType_test/0" total="7" fail="0" err="0" pass="7" >
                  <Test ln="1" auth="" locRef="" name="constructionAndDestructionWorks" id="cpptest.provider://RegularType_test/0::constructionAndDestructionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyCtorWorks" id="cpptest.provider://RegularType_test/0::copyCtorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyAssignmentWorks" id="cpptest.provider://RegularType_test/0::copyAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="moveCtorWorks" id="cpptest.provider://RegularType_test/0::moveCtorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="moveAssignmentWorks" id="cpptest.provider://RegularType_test/0::moveAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="equalComparisonWorks" id="cpptest.provider://RegularType_test/0::equalComparisonWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="unequalComparisonWorks" id="cpptest.provider://RegularType_test/0::unequalComparisonWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="RegularType_test/1" id="cpptest.provider://RegularType_test/1" total="7" fail="0" err="0" pass="7" >
                  <Test ln="1" auth="" locRef="" name="constructionAndDestructionWorks" id="cpptest.provider://RegularType_test/1::constructionAndDestructionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyCtorWorks" id="cpptest.provider://RegularType_test/1::copyCtorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyAssignmentWorks" id="cpptest.provider://RegularType_test/1::copyAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="moveCtorWorks" id="cpptest.provider://RegularType_test/1::moveCtorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="moveAssignmentWorks" id="cpptest.provider://RegularType_test/1::moveAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="equalComparisonWorks" id="cpptest.provider://RegularType_test/1::equalComparisonWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="unequalComparisonWorks" id="cpptest.provider://RegularType_test/1::unequalComparisonWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ErrorReporting_test" id="cpptest.provider://ErrorReporting_test" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="panicWorks" id="cpptest.provider://ErrorReporting_test::panicWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="panicWithLocationWorks" id="cpptest.provider://ErrorReporting_test::panicWithLocationWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="panicWithMessageWorks" id="cpptest.provider://ErrorReporting_test::panicWithMessageWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportNonFatalErrorWorks" id="cpptest.provider://ErrorReporting_test::reportNonFatalErrorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportFatalErrorWorks" id="cpptest.provider://ErrorReporting_test::reportFatalErrorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportPreconditionViolatonWorks" id="cpptest.provider://ErrorReporting_test::reportPreconditionViolatonWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportPreconditionViolatonWithMessageWorks" id="cpptest.provider://ErrorReporting_test::reportPreconditionViolatonWithMessageWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportAssumptionViolatonWorks" id="cpptest.provider://ErrorReporting_test::reportAssumptionViolatonWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportAssumptionViolatonWithMessageWorks" id="cpptest.provider://ErrorReporting_test::reportAssumptionViolatonWithMessageWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="DefaultErrorHandler_test" id="cpptest.provider://DefaultErrorHandler_test" total="2" fail="0" err="0" pass="2" >
                  <Test ln="1" auth="" locRef="" name="panicDoesNothing" id="cpptest.provider://DefaultErrorHandler_test::panicDoesNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportDoesNothing" id="cpptest.provider://DefaultErrorHandler_test::reportDoesNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ErrorKind_test" id="cpptest.provider://ErrorKind_test" total="4" fail="0" err="0" pass="4" >
                  <Test ln="1" auth="" locRef="" name="fatalErrorsAreFatal" id="cpptest.provider://ErrorKind_test::fatalErrorsAreFatal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="preconditionViolationsAreFatal" id="cpptest.provider://ErrorKind_test::preconditionViolationsAreFatal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="assumptionViolationsAreFatal" id="cpptest.provider://ErrorKind_test::assumptionViolationsAreFatal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="runtimeErrorsAreNotFatal" id="cpptest.provider://ErrorKind_test::runtimeErrorsAreNotFatal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ErrorReportingMacroApi_test" id="cpptest.provider://ErrorReportingMacroApi_test" total="19" fail="0" err="0" pass="19" >
                  <Test ln="1" auth="" locRef="" name="panicWithoutMessage" id="cpptest.provider://ErrorReportingMacroApi_test::panicWithoutMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="panicWithMessage" id="cpptest.provider://ErrorReportingMacroApi_test::panicWithMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportNonFatal" id="cpptest.provider://ErrorReportingMacroApi_test::reportNonFatal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportFatal" id="cpptest.provider://ErrorReportingMacroApi_test::reportFatal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportConditionalError" id="cpptest.provider://ErrorReportingMacroApi_test::reportConditionalError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportConditionalFatalError" id="cpptest.provider://ErrorReportingMacroApi_test::reportConditionalFatalError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportConditionalNoError" id="cpptest.provider://ErrorReportingMacroApi_test::reportConditionalNoError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="requireConditionSatisfied" id="cpptest.provider://ErrorReportingMacroApi_test::requireConditionSatisfied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="requireConditionNotSatisfied" id="cpptest.provider://ErrorReportingMacroApi_test::requireConditionNotSatisfied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkPreconditionSatisfied" id="cpptest.provider://ErrorReportingMacroApi_test::checkPreconditionSatisfied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkPreconditionViolated" id="cpptest.provider://ErrorReportingMacroApi_test::checkPreconditionViolated" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkAssumptionSatisfied" id="cpptest.provider://ErrorReportingMacroApi_test::checkAssumptionSatisfied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkAssumptionNotSatisfied" id="cpptest.provider://ErrorReportingMacroApi_test::checkAssumptionNotSatisfied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkPreconditionNotSatisfiedWithMessage" id="cpptest.provider://ErrorReportingMacroApi_test::checkPreconditionNotSatisfiedWithMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkAssumptionNotSatisfiedWithMessage" id="cpptest.provider://ErrorReportingMacroApi_test::checkAssumptionNotSatisfiedWithMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportErrorsFromDifferentModules" id="cpptest.provider://ErrorReportingMacroApi_test::reportErrorsFromDifferentModules" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="distinguishErrorsFromDifferentModules" id="cpptest.provider://ErrorReportingMacroApi_test::distinguishErrorsFromDifferentModules" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportErrorsAndViolations" id="cpptest.provider://ErrorReportingMacroApi_test::reportErrorsAndViolations" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="panicAtUnreachableCode" id="cpptest.provider://ErrorReportingMacroApi_test::panicAtUnreachableCode" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ErrorType_test/0" id="cpptest.provider://ErrorType_test/0" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructionAndDestructionWorks" id="cpptest.provider://ErrorType_test/0::constructionAndDestructionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="singleArgumentConstructionWorks" id="cpptest.provider://ErrorType_test/0::singleArgumentConstructionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyCtorWorks" id="cpptest.provider://ErrorType_test/0::copyCtorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyAssignmentWorks" id="cpptest.provider://ErrorType_test/0::copyAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="moveCtorWorks" id="cpptest.provider://ErrorType_test/0::moveCtorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="moveAssignmentWorks" id="cpptest.provider://ErrorType_test/0::moveAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="equalityComparisonWorks" id="cpptest.provider://ErrorType_test/0::equalityComparisonWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="unequalityComparisonWorks" id="cpptest.provider://ErrorType_test/0::unequalityComparisonWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="toCodeWorks" id="cpptest.provider://ErrorType_test/0::toCodeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="toModuleWorks" id="cpptest.provider://ErrorType_test/0::toModuleWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="toErrorPreservesCodeAndModule" id="cpptest.provider://ErrorType_test/0::toErrorPreservesCodeAndModule" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ErrorCode_test" id="cpptest.provider://ErrorCode_test" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="toCodeWorks" id="cpptest.provider://ErrorCode_test::toCodeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="Violation_test" id="cpptest.provider://Violation_test" total="2" fail="0" err="0" pass="2" >
                  <Test ln="1" auth="" locRef="" name="createPreconditionWorks" id="cpptest.provider://Violation_test::createPreconditionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="createAssumptionWorks" id="cpptest.provider://Violation_test::createAssumptionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ErrorNameTranslation_test" id="cpptest.provider://ErrorNameTranslation_test" total="4" fail="0" err="0" pass="4" >
                  <Test ln="1" auth="" locRef="" name="unknownErrorTranslatesToUnknownErrorString" id="cpptest.provider://ErrorNameTranslation_test::unknownErrorTranslatesToUnknownErrorString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="knownErrorTranslatesToCorrectErrorString" id="cpptest.provider://ErrorNameTranslation_test::knownErrorTranslatesToCorrectErrorString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="unknownModuleTranslatesToUnknownModuleString" id="cpptest.provider://ErrorNameTranslation_test::unknownModuleTranslatesToUnknownModuleString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="knownModuleTranslatesToCorrectModuleString" id="cpptest.provider://ErrorNameTranslation_test::knownModuleTranslatesToCorrectModuleString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="TestErrorHandler_test" id="cpptest.provider://TestErrorHandler_test" total="10" fail="0" err="0" pass="10" >
                  <Test ln="1" auth="" locRef="" name="constructionAndDestructionWorks" id="cpptest.provider://TestErrorHandler_test::constructionAndDestructionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="panicWorks" id="cpptest.provider://TestErrorHandler_test::panicWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportErrorWorks" id="cpptest.provider://TestErrorHandler_test::reportErrorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="reportViolationWorks" id="cpptest.provider://TestErrorHandler_test::reportViolationWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="hasErrorDetectsOnlyreportErroredErrors" id="cpptest.provider://TestErrorHandler_test::hasErrorDetectsOnlyreportErroredErrors" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="resettingMultipleErrorsWorks" id="cpptest.provider://TestErrorHandler_test::resettingMultipleErrorsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="prepareJumpWorks" id="cpptest.provider://TestErrorHandler_test::prepareJumpWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="onlyOneJumpCanBePrepared" id="cpptest.provider://TestErrorHandler_test::onlyOneJumpCanBePrepared" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="panicTriggersPreparedJump" id="cpptest.provider://TestErrorHandler_test::panicTriggersPreparedJump" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="panicDoesNotTriggerUnpreparedJump" id="cpptest.provider://TestErrorHandler_test::panicDoesNotTriggerUnpreparedJump" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="stack_test" id="cpptest.provider://stack_test" total="24" fail="1" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="isEmptyOnCreation" id="cpptest.provider://stack_test::isEmptyOnCreation" status="pass" total="1" fail="0" err="0" pass="1" >
                     <assoc tag="req" id="TES-1" />
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushingOneElementWithDefaultCtorSucceeds" id="cpptest.provider://stack_test::pushingOneElementWithDefaultCtorSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushingOneElementWithCustomCtorSucceeds" id="cpptest.provider://stack_test::pushingOneElementWithCustomCtorSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushingElementsTillStackIsFullAndPoppingInLIFOOrderSucceeds" id="cpptest.provider://stack_test::pushingElementsTillStackIsFullAndPoppingInLIFOOrderSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ifCapacityIsExceededPushFails" id="cpptest.provider://stack_test::ifCapacityIsExceededPushFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popCreatesSpaceForAnotherElement" id="cpptest.provider://stack_test::popCreatesSpaceForAnotherElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TestClassDTorIsCalledWhenStackGoesOutOfScope" id="cpptest.provider://stack_test::TestClassDTorIsCalledWhenStackGoesOutOfScope" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StackDestroysElementsInReverseOrder" id="cpptest.provider://stack_test::StackDestroysElementsInReverseOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructorWorksAndCallsTestClassCopyConstructor" id="cpptest.provider://stack_test::CopyConstructorWorksAndCallsTestClassCopyConstructor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyCtorWithOneElementLeadsToEqualCtorAndDtorCalls" id="cpptest.provider://stack_test::CopyCtorWithOneElementLeadsToEqualCtorAndDtorCalls" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructorWithEmptyStackWorks" id="cpptest.provider://stack_test::CopyConstructorWithEmptyStackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructorWithFullStackWorks" id="cpptest.provider://stack_test::CopyConstructorWithFullStackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithEmptySourceWorks" id="cpptest.provider://stack_test::CopyAssignmentWithEmptySourceWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithEmptyDestinationWorks" id="cpptest.provider://stack_test::CopyAssignmentWithEmptyDestinationWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithLargerDestinationWorks" id="cpptest.provider://stack_test::CopyAssignmentWithLargerDestinationWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithLargerSourceWorks" id="cpptest.provider://stack_test::CopyAssignmentWithLargerSourceWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructorWorksAndCallsTestClassMoveConstructor" id="cpptest.provider://stack_test::MoveConstructorWorksAndCallsTestClassMoveConstructor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructorWithEmptyStackWorks" id="cpptest.provider://stack_test::MoveConstructorWithEmptyStackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructorWithFullStackWorks" id="cpptest.provider://stack_test::MoveConstructorWithFullStackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithEmptySourceWorks" id="cpptest.provider://stack_test::MoveAssignmentWithEmptySourceWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithEmptyDestinationWorks" id="cpptest.provider://stack_test::MoveAssignmentWithEmptyDestinationWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithLargerDestinationWorks" id="cpptest.provider://stack_test::MoveAssignmentWithLargerDestinationWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithLargerSourceWorks" id="cpptest.provider://stack_test::MoveAssignmentWithLargerSourceWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOperatorsWithSelf" id="cpptest.provider://stack_test::AssignmentOperatorsWithSelf" status="fail" total="1" fail="1" err="0" pass="0" >
                     <Detail msg="/home/demo-user/sandbox/demo-project/iceoryx_master/iceoryx_hoofs/test/moduletests/test_buffer_stack.cpp:535&#xa;Value of: testStack.size()&#xa;Expected: is equal to 3&#xa;  Actual: 1 (of type unsigned long)" sev="Normal" type="Assertion" />
                     <Detail msg="/home/demo-user/sandbox/demo-project/iceoryx_master/iceoryx_hoofs/test/moduletests/test_buffer_stack.cpp:536&#xa;Value of: testStack1.size()&#xa;Expected: is equal to 3&#xa;  Actual: 1 (of type unsigned long)" sev="Normal" type="Assertion" />
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="FiFo_Test" id="cpptest.provider://FiFo_Test" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="SinglePopSinglePush" id="cpptest.provider://FiFo_Test::SinglePopSinglePush" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopFailsWhenEmpty" id="cpptest.provider://FiFo_Test::PopFailsWhenEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushFailsWhenFull" id="cpptest.provider://FiFo_Test::PushFailsWhenFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IsEmptyWhenPopReturnsNullopt" id="cpptest.provider://FiFo_Test::IsEmptyWhenPopReturnsNullopt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OverflowTestWithPushPopAlternation" id="cpptest.provider://FiFo_Test::OverflowTestWithPushPopAlternation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OverflowFromFullToEmptyRepetition" id="cpptest.provider://FiFo_Test::OverflowFromFullToEmptyRepetition" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IndexQueueTest" id="cpptest.provider://IndexQueueTest" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="capacityIsConsistent" id="cpptest.provider://IndexQueueTest::capacityIsConsistent" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IndexQueueTest/0" id="cpptest.provider://IndexQueueTest/0" total="21" fail="0" err="0" pass="21" >
                  <Test ln="1" auth="" locRef="" name="defaultConstructedQueueIsEmpty" id="cpptest.provider://IndexQueueTest/0::defaultConstructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://IndexQueueTest/0::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsNotEmptyAfterPush" id="cpptest.provider://IndexQueueTest/0::queueIsNotEmptyAfterPush" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsEmptyAgainAfterPushFollowedByPop" id="cpptest.provider://IndexQueueTest/0::queueIsEmptyAgainAfterPushFollowedByPop" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IndicesAreIncreasingWhenConstructedFull" id="cpptest.provider://IndexQueueTest/0::IndicesAreIncreasingWhenConstructedFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsNotEmptyWhenConstructedFull" id="cpptest.provider://IndexQueueTest/0::queueIsNotEmptyWhenConstructedFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsEmptyWhenPopFails" id="cpptest.provider://IndexQueueTest/0::queueIsEmptyWhenPopFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://IndexQueueTest/0::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://IndexQueueTest/0::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popReturnsNothingWhenQueueIsEmpty" id="cpptest.provider://IndexQueueTest/0::popReturnsNothingWhenQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfFullReturnsNothingWhenQueueIsEmpty" id="cpptest.provider://IndexQueueTest/0::popIfFullReturnsNothingWhenQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfFullReturnsOldestElementWhenQueueIsFull" id="cpptest.provider://IndexQueueTest/0::popIfFullReturnsOldestElementWhenQueueIsFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfFullReturnsNothingWhenQueueIsNotFull" id="cpptest.provider://IndexQueueTest/0::popIfFullReturnsNothingWhenQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastReturnsNothingIfQueueIsEmpty" id="cpptest.provider://IndexQueueTest/0::popIfSizeIsAtLeastReturnsNothingIfQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastZeroReturnsIndexIfQueueIsFull" id="cpptest.provider://IndexQueueTest/0::popIfSizeIsAtLeastZeroReturnsIndexIfQueueIsFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastZeroReturnsNothingIfQueueIsEmpty" id="cpptest.provider://IndexQueueTest/0::popIfSizeIsAtLeastZeroReturnsNothingIfQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastZeroReturnsIndexIfQueueContainsOneElement" id="cpptest.provider://IndexQueueTest/0::popIfSizeIsAtLeastZeroReturnsIndexIfQueueContainsOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastOneReturnsIndexIfQueueContainsOneElement" id="cpptest.provider://IndexQueueTest/0::popIfSizeIsAtLeastOneReturnsIndexIfQueueContainsOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastTwoReturnsNothingIfQueueContainsOneElement" id="cpptest.provider://IndexQueueTest/0::popIfSizeIsAtLeastTwoReturnsNothingIfQueueContainsOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastCapacityReturnsIndexIfQueueIsFull" id="cpptest.provider://IndexQueueTest/0::popIfSizeIsAtLeastCapacityReturnsIndexIfQueueIsFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastCapacityReturnsNothingIfQueueIsNotFull" id="cpptest.provider://IndexQueueTest/0::popIfSizeIsAtLeastCapacityReturnsNothingIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IndexQueueTest/1" id="cpptest.provider://IndexQueueTest/1" total="21" fail="0" err="0" pass="21" >
                  <Test ln="1" auth="" locRef="" name="defaultConstructedQueueIsEmpty" id="cpptest.provider://IndexQueueTest/1::defaultConstructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://IndexQueueTest/1::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsNotEmptyAfterPush" id="cpptest.provider://IndexQueueTest/1::queueIsNotEmptyAfterPush" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsEmptyAgainAfterPushFollowedByPop" id="cpptest.provider://IndexQueueTest/1::queueIsEmptyAgainAfterPushFollowedByPop" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IndicesAreIncreasingWhenConstructedFull" id="cpptest.provider://IndexQueueTest/1::IndicesAreIncreasingWhenConstructedFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsNotEmptyWhenConstructedFull" id="cpptest.provider://IndexQueueTest/1::queueIsNotEmptyWhenConstructedFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsEmptyWhenPopFails" id="cpptest.provider://IndexQueueTest/1::queueIsEmptyWhenPopFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://IndexQueueTest/1::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://IndexQueueTest/1::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popReturnsNothingWhenQueueIsEmpty" id="cpptest.provider://IndexQueueTest/1::popReturnsNothingWhenQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfFullReturnsNothingWhenQueueIsEmpty" id="cpptest.provider://IndexQueueTest/1::popIfFullReturnsNothingWhenQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfFullReturnsOldestElementWhenQueueIsFull" id="cpptest.provider://IndexQueueTest/1::popIfFullReturnsOldestElementWhenQueueIsFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfFullReturnsNothingWhenQueueIsNotFull" id="cpptest.provider://IndexQueueTest/1::popIfFullReturnsNothingWhenQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastReturnsNothingIfQueueIsEmpty" id="cpptest.provider://IndexQueueTest/1::popIfSizeIsAtLeastReturnsNothingIfQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastZeroReturnsIndexIfQueueIsFull" id="cpptest.provider://IndexQueueTest/1::popIfSizeIsAtLeastZeroReturnsIndexIfQueueIsFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastZeroReturnsNothingIfQueueIsEmpty" id="cpptest.provider://IndexQueueTest/1::popIfSizeIsAtLeastZeroReturnsNothingIfQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastZeroReturnsIndexIfQueueContainsOneElement" id="cpptest.provider://IndexQueueTest/1::popIfSizeIsAtLeastZeroReturnsIndexIfQueueContainsOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastOneReturnsIndexIfQueueContainsOneElement" id="cpptest.provider://IndexQueueTest/1::popIfSizeIsAtLeastOneReturnsIndexIfQueueContainsOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastTwoReturnsNothingIfQueueContainsOneElement" id="cpptest.provider://IndexQueueTest/1::popIfSizeIsAtLeastTwoReturnsNothingIfQueueContainsOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastCapacityReturnsIndexIfQueueIsFull" id="cpptest.provider://IndexQueueTest/1::popIfSizeIsAtLeastCapacityReturnsIndexIfQueueIsFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastCapacityReturnsNothingIfQueueIsNotFull" id="cpptest.provider://IndexQueueTest/1::popIfSizeIsAtLeastCapacityReturnsNothingIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IndexQueueTest/2" id="cpptest.provider://IndexQueueTest/2" total="21" fail="0" err="0" pass="21" >
                  <Test ln="1" auth="" locRef="" name="defaultConstructedQueueIsEmpty" id="cpptest.provider://IndexQueueTest/2::defaultConstructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://IndexQueueTest/2::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsNotEmptyAfterPush" id="cpptest.provider://IndexQueueTest/2::queueIsNotEmptyAfterPush" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsEmptyAgainAfterPushFollowedByPop" id="cpptest.provider://IndexQueueTest/2::queueIsEmptyAgainAfterPushFollowedByPop" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IndicesAreIncreasingWhenConstructedFull" id="cpptest.provider://IndexQueueTest/2::IndicesAreIncreasingWhenConstructedFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsNotEmptyWhenConstructedFull" id="cpptest.provider://IndexQueueTest/2::queueIsNotEmptyWhenConstructedFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="queueIsEmptyWhenPopFails" id="cpptest.provider://IndexQueueTest/2::queueIsEmptyWhenPopFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://IndexQueueTest/2::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://IndexQueueTest/2::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popReturnsNothingWhenQueueIsEmpty" id="cpptest.provider://IndexQueueTest/2::popReturnsNothingWhenQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfFullReturnsNothingWhenQueueIsEmpty" id="cpptest.provider://IndexQueueTest/2::popIfFullReturnsNothingWhenQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfFullReturnsOldestElementWhenQueueIsFull" id="cpptest.provider://IndexQueueTest/2::popIfFullReturnsOldestElementWhenQueueIsFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfFullReturnsNothingWhenQueueIsNotFull" id="cpptest.provider://IndexQueueTest/2::popIfFullReturnsNothingWhenQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastReturnsNothingIfQueueIsEmpty" id="cpptest.provider://IndexQueueTest/2::popIfSizeIsAtLeastReturnsNothingIfQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastZeroReturnsIndexIfQueueIsFull" id="cpptest.provider://IndexQueueTest/2::popIfSizeIsAtLeastZeroReturnsIndexIfQueueIsFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastZeroReturnsNothingIfQueueIsEmpty" id="cpptest.provider://IndexQueueTest/2::popIfSizeIsAtLeastZeroReturnsNothingIfQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastZeroReturnsIndexIfQueueContainsOneElement" id="cpptest.provider://IndexQueueTest/2::popIfSizeIsAtLeastZeroReturnsIndexIfQueueContainsOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastOneReturnsIndexIfQueueContainsOneElement" id="cpptest.provider://IndexQueueTest/2::popIfSizeIsAtLeastOneReturnsIndexIfQueueContainsOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastTwoReturnsNothingIfQueueContainsOneElement" id="cpptest.provider://IndexQueueTest/2::popIfSizeIsAtLeastTwoReturnsNothingIfQueueContainsOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastCapacityReturnsIndexIfQueueIsFull" id="cpptest.provider://IndexQueueTest/2::popIfSizeIsAtLeastCapacityReturnsIndexIfQueueIsFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popIfSizeIsAtLeastCapacityReturnsNothingIfQueueIsNotFull" id="cpptest.provider://IndexQueueTest/2::popIfSizeIsAtLeastCapacityReturnsNothingIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest" id="cpptest.provider://LockFreeQueueTest" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="capacityIsConsistent" id="cpptest.provider://LockFreeQueueTest::capacityIsConsistent" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/0" id="cpptest.provider://LockFreeQueueTest/0" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/0::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/0::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/0::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/0::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/0::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/0::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/0::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/0::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/0::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/0::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/0::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/1" id="cpptest.provider://LockFreeQueueTest/1" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/1::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/1::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/1::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/1::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/1::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/1::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/1::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/1::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/1::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/1::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/1::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/2" id="cpptest.provider://LockFreeQueueTest/2" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/2::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/2::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/2::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/2::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/2::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/2::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/2::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/2::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/2::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/2::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/2::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/3" id="cpptest.provider://LockFreeQueueTest/3" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/3::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/3::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/3::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/3::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/3::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/3::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/3::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/3::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/3::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/3::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/3::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/4" id="cpptest.provider://LockFreeQueueTest/4" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/4::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/4::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/4::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/4::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/4::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/4::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/4::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/4::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/4::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/4::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/4::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/5" id="cpptest.provider://LockFreeQueueTest/5" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/5::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/5::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/5::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/5::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/5::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/5::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/5::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/5::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/5::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/5::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/5::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/6" id="cpptest.provider://LockFreeQueueTest/6" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/6::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/6::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/6::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/6::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/6::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/6::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/6::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/6::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/6::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/6::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/6::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/7" id="cpptest.provider://LockFreeQueueTest/7" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/7::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/7::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/7::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/7::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/7::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/7::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/7::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/7::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/7::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/7::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/7::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/8" id="cpptest.provider://LockFreeQueueTest/8" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/8::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/8::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/8::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/8::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/8::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/8::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/8::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/8::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/8::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/8::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/8::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/9" id="cpptest.provider://LockFreeQueueTest/9" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/9::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/9::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/9::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/9::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/9::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/9::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/9::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/9::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/9::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/9::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/9::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/10" id="cpptest.provider://LockFreeQueueTest/10" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/10::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/10::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/10::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/10::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/10::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/10::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/10::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/10::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/10::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/10::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/10::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueTest/11" id="cpptest.provider://LockFreeQueueTest/11" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="constructedQueueIsEmpty" id="cpptest.provider://LockFreeQueueTest/11::constructedQueueIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushAndPopSingleElement" id="cpptest.provider://LockFreeQueueTest/11::pushAndPopSingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popFromEmptyQueueReturnsNothing" id="cpptest.provider://LockFreeQueueTest/11::popFromEmptyQueueReturnsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushUntilFullCapacityIsUsed" id="cpptest.provider://LockFreeQueueTest/11::tryPushUntilFullCapacityIsUsed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="tryPushInFullQueueFails" id="cpptest.provider://LockFreeQueueTest/11::tryPushInFullQueueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="poppedElementsAreInFifoOrder" id="cpptest.provider://LockFreeQueueTest/11::poppedElementsAreInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushDoesNotOverflowIfQueueIsNotFull" id="cpptest.provider://LockFreeQueueTest/11::pushDoesNotOverflowIfQueueIsNotFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushReturnsOldestElementOnOverflow" id="cpptest.provider://LockFreeQueueTest/11::pushReturnsOldestElementOnOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushInsertsInFifoOrder" id="cpptest.provider://LockFreeQueueTest/11::pushInsertsInFifoOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterOneElementWasPushedandPopped" id="cpptest.provider://LockFreeQueueTest/11::checkEmptynessAfterOneElementWasPushedandPopped" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="checkEmptynessAfterFullQueueWasEmptied" id="cpptest.provider://LockFreeQueueTest/11::checkEmptynessAfterFullQueueWasEmptied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueCyclicIndexTest/0" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0" total="16" fail="0" err="0" pass="16" >
                  <Test ln="1" auth="" locRef="" name="defaultConstructedIndexIsZero" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::defaultConstructedIndexIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitIndexConstructionWithZeroWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::explicitIndexConstructionWithZeroWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="getValueReturnsValueIndexWasConstructedWith" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::getValueReturnsValueIndexWasConstructedWith" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitConstructionWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::explicitConstructionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitConstructionWithMaxIndexAndCycleWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::explicitConstructionWithMaxIndexAndCycleWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyConstructorWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::copyConstructorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="assignmentWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::assignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="selfAssignmentWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::selfAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicAdditionWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::cyclicAdditionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::cyclicIncrementWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementWraparound" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::cyclicIncrementWraparound" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::cyclicIncrementOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicAdditionOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::cyclicAdditionOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckNegative" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::isOneCycleBehindCheckNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckPositive" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::isOneCycleBehindCheckPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckDuringOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/0::isOneCycleBehindCheckDuringOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueCyclicIndexTest/1" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1" total="16" fail="0" err="0" pass="16" >
                  <Test ln="1" auth="" locRef="" name="defaultConstructedIndexIsZero" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::defaultConstructedIndexIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitIndexConstructionWithZeroWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::explicitIndexConstructionWithZeroWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="getValueReturnsValueIndexWasConstructedWith" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::getValueReturnsValueIndexWasConstructedWith" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitConstructionWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::explicitConstructionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitConstructionWithMaxIndexAndCycleWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::explicitConstructionWithMaxIndexAndCycleWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyConstructorWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::copyConstructorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="assignmentWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::assignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="selfAssignmentWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::selfAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicAdditionWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::cyclicAdditionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::cyclicIncrementWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementWraparound" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::cyclicIncrementWraparound" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::cyclicIncrementOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicAdditionOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::cyclicAdditionOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckNegative" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::isOneCycleBehindCheckNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckPositive" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::isOneCycleBehindCheckPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckDuringOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/1::isOneCycleBehindCheckDuringOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueCyclicIndexTest/2" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2" total="16" fail="0" err="0" pass="16" >
                  <Test ln="1" auth="" locRef="" name="defaultConstructedIndexIsZero" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::defaultConstructedIndexIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitIndexConstructionWithZeroWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::explicitIndexConstructionWithZeroWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="getValueReturnsValueIndexWasConstructedWith" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::getValueReturnsValueIndexWasConstructedWith" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitConstructionWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::explicitConstructionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitConstructionWithMaxIndexAndCycleWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::explicitConstructionWithMaxIndexAndCycleWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyConstructorWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::copyConstructorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="assignmentWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::assignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="selfAssignmentWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::selfAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicAdditionWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::cyclicAdditionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::cyclicIncrementWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementWraparound" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::cyclicIncrementWraparound" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::cyclicIncrementOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicAdditionOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::cyclicAdditionOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckNegative" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::isOneCycleBehindCheckNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckPositive" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::isOneCycleBehindCheckPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckDuringOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/2::isOneCycleBehindCheckDuringOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LockFreeQueueCyclicIndexTest/3" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3" total="16" fail="0" err="0" pass="16" >
                  <Test ln="1" auth="" locRef="" name="defaultConstructedIndexIsZero" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::defaultConstructedIndexIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitIndexConstructionWithZeroWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::explicitIndexConstructionWithZeroWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="getValueReturnsValueIndexWasConstructedWith" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::getValueReturnsValueIndexWasConstructedWith" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitConstructionWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::explicitConstructionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitConstructionWithMaxIndexAndCycleWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::explicitConstructionWithMaxIndexAndCycleWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyConstructorWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::copyConstructorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="assignmentWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::assignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="selfAssignmentWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::selfAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicAdditionWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::cyclicAdditionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementWorks" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::cyclicIncrementWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementWraparound" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::cyclicIncrementWraparound" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicIncrementOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::cyclicIncrementOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="cyclicAdditionOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::cyclicAdditionOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckNegative" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::isOneCycleBehindCheckNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckPositive" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::isOneCycleBehindCheckPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isOneCycleBehindCheckDuringOverflow" id="cpptest.provider://LockFreeQueueCyclicIndexTest/3::isOneCycleBehindCheckDuringOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LoFFLi_test/0" id="cpptest.provider://LoFFLi_test/0" total="14" fail="0" err="0" pass="14" >
                  <Test ln="1" auth="" locRef="" name="Misuse_NullptrMemory" id="cpptest.provider://LoFFLi_test/0::Misuse_NullptrMemory" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="Misuse_ZeroSize" id="cpptest.provider://LoFFLi_test/0::Misuse_ZeroSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="Misuse_SizeToLarge" id="cpptest.provider://LoFFLi_test/0::Misuse_SizeToLarge" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="Initialized" id="cpptest.provider://LoFFLi_test/0::Initialized" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SinglePop" id="cpptest.provider://LoFFLi_test/0::SinglePop" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopEmpty" id="cpptest.provider://LoFFLi_test/0::PopEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopFromUninitializedLoFFLi" id="cpptest.provider://LoFFLi_test/0::PopFromUninitializedLoFFLi" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SinglePush" id="cpptest.provider://LoFFLi_test/0::SinglePush" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushTillFull" id="cpptest.provider://LoFFLi_test/0::PushTillFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushRandomOrder" id="cpptest.provider://LoFFLi_test/0::PushRandomOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushWrongIndex" id="cpptest.provider://LoFFLi_test/0::PushWrongIndex" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushOutOfBoundIndex" id="cpptest.provider://LoFFLi_test/0::PushOutOfBoundIndex" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushWhenFull" id="cpptest.provider://LoFFLi_test/0::PushWhenFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushToUninitializedLoFFLi" id="cpptest.provider://LoFFLi_test/0::PushToUninitializedLoFFLi" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="PeriodicTask_test" id="cpptest.provider://PeriodicTask_test" total="17" fail="0" err="0" pass="17" >
                  <Test ln="1" auth="" locRef="" name="CopyConstructorIsDeleted" id="cpptest.provider://PeriodicTask_test::CopyConstructorIsDeleted" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructorIsDeleted" id="cpptest.provider://PeriodicTask_test::MoveConstructorIsDeleted" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentIsDeleted" id="cpptest.provider://PeriodicTask_test::CopyAssignmentIsDeleted" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentIsDeleted" id="cpptest.provider://PeriodicTask_test::MoveAssignmentIsDeleted" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PeriodicTaskConstructedWithoutIntervalIsInactive" id="cpptest.provider://PeriodicTask_test::PeriodicTaskConstructedWithoutIntervalIsInactive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PeriodicTaskConstructedWithoutIntervalIsActiveAfterCallingStart" id="cpptest.provider://PeriodicTask_test::PeriodicTaskConstructedWithoutIntervalIsActiveAfterCallingStart" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PeriodicTaskConstructedWithIntervalIsActive" id="cpptest.provider://PeriodicTask_test::PeriodicTaskConstructedWithIntervalIsActive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PeriodicTaskConstructedWithIntervalIsInactiveAfterCallingStop" id="cpptest.provider://PeriodicTask_test::PeriodicTaskConstructedWithIntervalIsInactiveAfterCallingStop" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PeriodicTaskWhichIsInactiveDoesNotExecuteTheCallable" id="cpptest.provider://PeriodicTask_test::PeriodicTaskWhichIsInactiveDoesNotExecuteTheCallable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_PeriodicTaskRunningWithObjectWithDefaultConstructor" id="cpptest.provider://PeriodicTask_test::TimingTest_PeriodicTaskRunningWithObjectWithDefaultConstructor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_PeriodicTaskRunningWithObjectWithConstructorWithArguments" id="cpptest.provider://PeriodicTask_test::TimingTest_PeriodicTaskRunningWithObjectWithConstructorWithArguments" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_PeriodicTaskRunningWithObjectAsReference" id="cpptest.provider://PeriodicTask_test::TimingTest_PeriodicTaskRunningWithObjectAsReference" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_PeriodicTaskRunningWithCxxFunctionRef" id="cpptest.provider://PeriodicTask_test::TimingTest_PeriodicTaskRunningWithCxxFunctionRef" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_PeriodicTaskRunningWithStdFunction" id="cpptest.provider://PeriodicTask_test::TimingTest_PeriodicTaskRunningWithStdFunction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_PeriodicTaskRunningWithCxxFunction" id="cpptest.provider://PeriodicTask_test::TimingTest_PeriodicTaskRunningWithCxxFunction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_PeriodicTaskWhichIsActiveAppliesNewIntervalAfterStart" id="cpptest.provider://PeriodicTask_test::TimingTest_PeriodicTaskWhichIsActiveAppliesNewIntervalAfterStart" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_PeriodicTaskWhichIsExecutingTheCallableIsBlockingOnStop" id="cpptest.provider://PeriodicTask_test::TimingTest_PeriodicTaskWhichIsExecutingTheCallableIsBlockingOnStop" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ResizeableLockFreeQueueTest" id="cpptest.provider://ResizeableLockFreeQueueTest" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="maxCapacityIsConsistent" id="cpptest.provider://ResizeableLockFreeQueueTest::maxCapacityIsConsistent" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ResizeableLockFreeQueueTest/0" id="cpptest.provider://ResizeableLockFreeQueueTest/0" total="23" fail="0" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="initialCapacityIsMaximalbyDefault" id="cpptest.provider://ResizeableLockFreeQueueTest/0::initialCapacityIsMaximalbyDefault" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/0::constructWithMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithMoreThanMaxCapacitySaturatesAtMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/0::constructWithMoreThanMaxCapacitySaturatesAtMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithNoCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/0::constructWithNoCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithHalfOfMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/0::constructWithHalfOfMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="decreaseCapacityToZeroOneByOne" id="cpptest.provider://ResizeableLockFreeQueueTest/0::decreaseCapacityToZeroOneByOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="decreaseCapacityToZeroOneByOneWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/0::decreaseCapacityToZeroOneByOneWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="increaseToMaxCapacityOneByOne" id="cpptest.provider://ResizeableLockFreeQueueTest/0::increaseToMaxCapacityOneByOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="increaseToMaxCapacityOneByOneWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/0::increaseToMaxCapacityOneByOneWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToZero" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityToZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToZeroWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityToZeroWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToOne" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityToOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToOneWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityToOneWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToMaxCapacityWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityToMaxCapacityWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToHalfOfMaxCapacityAndFillIt" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityToHalfOfMaxCapacityAndFillIt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToHalfOfMaxCapacityAndFillItWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityToHalfOfMaxCapacityAndFillItWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityFromHalfOfMaxCapacityToMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityFromHalfOfMaxCapacityToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityFromHalfOfMaxCapacityToMaxCapacityWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityFromHalfOfMaxCapacityToMaxCapacityWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityOfFullQueueToHalfOfMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityOfFullQueueToHalfOfMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityOfFullQueueToHalfOfMaxCapacityWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/0::setCapacityOfFullQueueToHalfOfMaxCapacityWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DecreaseCapacityOfAPartiallyFilledQueue" id="cpptest.provider://ResizeableLockFreeQueueTest/0::DecreaseCapacityOfAPartiallyFilledQueue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DecreaseCapacityOfAPartiallyFilledQueueWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/0::DecreaseCapacityOfAPartiallyFilledQueueWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ResizeableLockFreeQueueTest/1" id="cpptest.provider://ResizeableLockFreeQueueTest/1" total="23" fail="0" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="initialCapacityIsMaximalbyDefault" id="cpptest.provider://ResizeableLockFreeQueueTest/1::initialCapacityIsMaximalbyDefault" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/1::constructWithMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithMoreThanMaxCapacitySaturatesAtMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/1::constructWithMoreThanMaxCapacitySaturatesAtMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithNoCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/1::constructWithNoCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithHalfOfMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/1::constructWithHalfOfMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="decreaseCapacityToZeroOneByOne" id="cpptest.provider://ResizeableLockFreeQueueTest/1::decreaseCapacityToZeroOneByOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="decreaseCapacityToZeroOneByOneWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/1::decreaseCapacityToZeroOneByOneWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="increaseToMaxCapacityOneByOne" id="cpptest.provider://ResizeableLockFreeQueueTest/1::increaseToMaxCapacityOneByOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="increaseToMaxCapacityOneByOneWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/1::increaseToMaxCapacityOneByOneWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToZero" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityToZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToZeroWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityToZeroWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToOne" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityToOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToOneWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityToOneWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToMaxCapacityWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityToMaxCapacityWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToHalfOfMaxCapacityAndFillIt" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityToHalfOfMaxCapacityAndFillIt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToHalfOfMaxCapacityAndFillItWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityToHalfOfMaxCapacityAndFillItWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityFromHalfOfMaxCapacityToMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityFromHalfOfMaxCapacityToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityFromHalfOfMaxCapacityToMaxCapacityWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityFromHalfOfMaxCapacityToMaxCapacityWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityOfFullQueueToHalfOfMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityOfFullQueueToHalfOfMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityOfFullQueueToHalfOfMaxCapacityWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/1::setCapacityOfFullQueueToHalfOfMaxCapacityWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DecreaseCapacityOfAPartiallyFilledQueue" id="cpptest.provider://ResizeableLockFreeQueueTest/1::DecreaseCapacityOfAPartiallyFilledQueue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DecreaseCapacityOfAPartiallyFilledQueueWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/1::DecreaseCapacityOfAPartiallyFilledQueueWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ResizeableLockFreeQueueTest/2" id="cpptest.provider://ResizeableLockFreeQueueTest/2" total="23" fail="0" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="initialCapacityIsMaximalbyDefault" id="cpptest.provider://ResizeableLockFreeQueueTest/2::initialCapacityIsMaximalbyDefault" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/2::constructWithMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithMoreThanMaxCapacitySaturatesAtMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/2::constructWithMoreThanMaxCapacitySaturatesAtMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithNoCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/2::constructWithNoCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructWithHalfOfMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/2::constructWithHalfOfMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="decreaseCapacityToZeroOneByOne" id="cpptest.provider://ResizeableLockFreeQueueTest/2::decreaseCapacityToZeroOneByOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="decreaseCapacityToZeroOneByOneWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/2::decreaseCapacityToZeroOneByOneWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="increaseToMaxCapacityOneByOne" id="cpptest.provider://ResizeableLockFreeQueueTest/2::increaseToMaxCapacityOneByOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="increaseToMaxCapacityOneByOneWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/2::increaseToMaxCapacityOneByOneWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToZero" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityToZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToZeroWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityToZeroWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToOne" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityToOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToOneWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityToOneWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToMaxCapacityWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityToMaxCapacityWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToHalfOfMaxCapacityAndFillIt" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityToHalfOfMaxCapacityAndFillIt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityToHalfOfMaxCapacityAndFillItWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityToHalfOfMaxCapacityAndFillItWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityFromHalfOfMaxCapacityToMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityFromHalfOfMaxCapacityToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityFromHalfOfMaxCapacityToMaxCapacityWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityFromHalfOfMaxCapacityToMaxCapacityWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityOfFullQueueToHalfOfMaxCapacity" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityOfFullQueueToHalfOfMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCapacityOfFullQueueToHalfOfMaxCapacityWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/2::setCapacityOfFullQueueToHalfOfMaxCapacityWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DecreaseCapacityOfAPartiallyFilledQueue" id="cpptest.provider://ResizeableLockFreeQueueTest/2::DecreaseCapacityOfAPartiallyFilledQueue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DecreaseCapacityOfAPartiallyFilledQueueWithHandler" id="cpptest.provider://ResizeableLockFreeQueueTest/2::DecreaseCapacityOfAPartiallyFilledQueueWithHandler" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="smart_lock_test" id="cpptest.provider://smart_lock_test" total="22" fail="0" err="0" pass="22" >
                  <Test ln="1" auth="" locRef="" name="DefaultConstructionOfUnderlyingObjectWorks" id="cpptest.provider://smart_lock_test::DefaultConstructionOfUnderlyingObjectWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructionWithOneValueCTorOfUnderlyingObjectWorks" id="cpptest.provider://smart_lock_test::ConstructionWithOneValueCTorOfUnderlyingObjectWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructionOfUnderlyinObjectWorks" id="cpptest.provider://smart_lock_test::CopyConstructionOfUnderlyinObjectWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionOfUnderlyinObjectWorks" id="cpptest.provider://smart_lock_test::MoveConstructionOfUnderlyinObjectWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructorWorks" id="cpptest.provider://smart_lock_test::CopyConstructorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWorks" id="cpptest.provider://smart_lock_test::CopyAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructorWorks" id="cpptest.provider://smart_lock_test::MoveConstructorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWorks" id="cpptest.provider://smart_lock_test::MoveAssignmentWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstArrowOperatorWorks" id="cpptest.provider://smart_lock_test::ConstArrowOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessThroughConstScopeGuardWorks" id="cpptest.provider://smart_lock_test::AccessThroughConstScopeGuardWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessThroughScopeGuardWorks" id="cpptest.provider://smart_lock_test::AccessThroughScopeGuardWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessViaConstDereferenceOperatorWorks" id="cpptest.provider://smart_lock_test::AccessViaConstDereferenceOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessViaDereferenceOperatorWorks" id="cpptest.provider://smart_lock_test::AccessViaDereferenceOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AcquiringCopyWorks" id="cpptest.provider://smart_lock_test::AcquiringCopyWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ThreadSafeAccessThroughArrowOperator" id="cpptest.provider://smart_lock_test::ThreadSafeAccessThroughArrowOperator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ThreadSafeAccessThroughConstArrowOperator" id="cpptest.provider://smart_lock_test::ThreadSafeAccessThroughConstArrowOperator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ThreadSafeAccessThroughScopedGuard" id="cpptest.provider://smart_lock_test::ThreadSafeAccessThroughScopedGuard" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ThreadSafeAccessThroughConstScopedGuard" id="cpptest.provider://smart_lock_test::ThreadSafeAccessThroughConstScopedGuard" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ThreadSafeCopyCTor" id="cpptest.provider://smart_lock_test::ThreadSafeCopyCTor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ThreadSafeMoveCTor" id="cpptest.provider://smart_lock_test::ThreadSafeMoveCTor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ThreadSafeCopyAssignment" id="cpptest.provider://smart_lock_test::ThreadSafeCopyAssignment" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ThreadSafeMoveAssignment" id="cpptest.provider://smart_lock_test::ThreadSafeMoveAssignment" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SoFiTest" id="cpptest.provider://SoFiTest" total="23" fail="0" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="Empty" id="cpptest.provider://SoFiTest::Empty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="Capacity" id="cpptest.provider://SoFiTest::Capacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewlyCreatedSoFiIsEmpty" id="cpptest.provider://SoFiTest::NewlyCreatedSoFiIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewlyCreatedSoFiHasSizeZero" id="cpptest.provider://SoFiTest::NewlyCreatedSoFiHasSizeZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SoFiSizeEqualsNumberOfPushes" id="cpptest.provider://SoFiTest::SoFiSizeEqualsNumberOfPushes" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SoFiSizeEqualsNumberOfPushesOverflow" id="cpptest.provider://SoFiTest::SoFiSizeEqualsNumberOfPushesOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="Overflow" id="cpptest.provider://SoFiTest::Overflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiOverflow" id="cpptest.provider://SoFiTest::MultiOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizeFailsWhenContainingASingleElement" id="cpptest.provider://SoFiTest::ResizeFailsWhenContainingASingleElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizeFailsWhenContainingAMultipleElements" id="cpptest.provider://SoFiTest::ResizeFailsWhenContainingAMultipleElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizeFailsWhenFull" id="cpptest.provider://SoFiTest::ResizeFailsWhenFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizingLargeThanCapacityFails" id="cpptest.provider://SoFiTest::ResizingLargeThanCapacityFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizingToZeroIsValid" id="cpptest.provider://SoFiTest::ResizingToZeroIsValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizingDefault" id="cpptest.provider://SoFiTest::ResizingDefault" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizeAndSizeCheck" id="cpptest.provider://SoFiTest::ResizeAndSizeCheck" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizeAndSizeFillUp" id="cpptest.provider://SoFiTest::ResizeAndSizeFillUp" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopIfWithValidCondition" id="cpptest.provider://SoFiTest::PopIfWithValidCondition" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopIfWithInvalidCondition" id="cpptest.provider://SoFiTest::PopIfWithInvalidCondition" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopIfOnEmpty" id="cpptest.provider://SoFiTest::PopIfOnEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopIfFullWithValidCondition" id="cpptest.provider://SoFiTest::PopIfFullWithValidCondition" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopIfFullWithInvalidCondition" id="cpptest.provider://SoFiTest::PopIfFullWithInvalidCondition" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopIfValidEmptyAfter" id="cpptest.provider://SoFiTest::PopIfValidEmptyAfter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopIfInvalidNotEmptyAfter" id="cpptest.provider://SoFiTest::PopIfInvalidNotEmptyAfter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="UninitializedArrayTest" id="cpptest.provider://UninitializedArrayTest" total="12" fail="0" err="0" pass="12" >
                  <Test ln="1" auth="" locRef="" name="capacityIsCorrect" id="cpptest.provider://UninitializedArrayTest::capacityIsCorrect" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isNotCopyConstructible" id="cpptest.provider://UninitializedArrayTest::isNotCopyConstructible" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isNotCopyAssignable" id="cpptest.provider://UninitializedArrayTest::isNotCopyAssignable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isNotMoveConstructible" id="cpptest.provider://UninitializedArrayTest::isNotMoveConstructible" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isNotMoveAssignable" id="cpptest.provider://UninitializedArrayTest::isNotMoveAssignable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AllElementsInitializedWithZeroWhenBufferSetToZeroedBuffer" id="cpptest.provider://UninitializedArrayTest::AllElementsInitializedWithZeroWhenBufferSetToZeroedBuffer" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AllElementsAreNotZeroedWhenBufferSetToNonZeroedBuffer" id="cpptest.provider://UninitializedArrayTest::AllElementsAreNotZeroedWhenBufferSetToNonZeroedBuffer" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginAndEndIteratorNotEqualInNonEmptyUninitializedArray" id="cpptest.provider://UninitializedArrayTest::BeginAndEndIteratorNotEqualInNonEmptyUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginAndEndConstIteratorNotEqualInNonEmptyUninitializedArray" id="cpptest.provider://UninitializedArrayTest::BeginAndEndConstIteratorNotEqualInNonEmptyUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IteratorIteratesThroughUninitializedArray" id="cpptest.provider://UninitializedArrayTest::IteratorIteratesThroughUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstIteratorIteratesThroughUninitializedArray" id="cpptest.provider://UninitializedArrayTest::ConstIteratorIteratesThroughUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UninitializedArrayDoesNotInitializeOrDestroyElements" id="cpptest.provider://UninitializedArrayTest::UninitializedArrayDoesNotInitializeOrDestroyElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="UninitializedArrayTest/0" id="cpptest.provider://UninitializedArrayTest/0" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="accessElements" id="cpptest.provider://UninitializedArrayTest/0::accessElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="accessElementsOfConstUinitializedArray" id="cpptest.provider://UninitializedArrayTest/0::accessElementsOfConstUinitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginReturnsIteratorToBeginningOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/0::BeginReturnsIteratorToBeginningOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstBeginReturnsIteratorToBeginningOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/0::ConstBeginReturnsIteratorToBeginningOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EndReturnsIteratorToEndOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/0::EndReturnsIteratorToEndOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstEndReturnsIteratorToEndOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/0::ConstEndReturnsIteratorToEndOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginAndEndIteratorNotEqualInFullUninitializedArray" id="cpptest.provider://UninitializedArrayTest/0::BeginAndEndIteratorNotEqualInFullUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginAndEndConstIteratorNotEqualInFullUninitializedArray" id="cpptest.provider://UninitializedArrayTest/0::BeginAndEndConstIteratorNotEqualInFullUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeOfUninitializedArrayEqualsCStyleArray" id="cpptest.provider://UninitializedArrayTest/0::SizeOfUninitializedArrayEqualsCStyleArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="UninitializedArrayTest/1" id="cpptest.provider://UninitializedArrayTest/1" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="accessElements" id="cpptest.provider://UninitializedArrayTest/1::accessElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="accessElementsOfConstUinitializedArray" id="cpptest.provider://UninitializedArrayTest/1::accessElementsOfConstUinitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginReturnsIteratorToBeginningOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/1::BeginReturnsIteratorToBeginningOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstBeginReturnsIteratorToBeginningOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/1::ConstBeginReturnsIteratorToBeginningOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EndReturnsIteratorToEndOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/1::EndReturnsIteratorToEndOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstEndReturnsIteratorToEndOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/1::ConstEndReturnsIteratorToEndOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginAndEndIteratorNotEqualInFullUninitializedArray" id="cpptest.provider://UninitializedArrayTest/1::BeginAndEndIteratorNotEqualInFullUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginAndEndConstIteratorNotEqualInFullUninitializedArray" id="cpptest.provider://UninitializedArrayTest/1::BeginAndEndConstIteratorNotEqualInFullUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeOfUninitializedArrayEqualsCStyleArray" id="cpptest.provider://UninitializedArrayTest/1::SizeOfUninitializedArrayEqualsCStyleArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="UninitializedArrayTest/2" id="cpptest.provider://UninitializedArrayTest/2" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="accessElements" id="cpptest.provider://UninitializedArrayTest/2::accessElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="accessElementsOfConstUinitializedArray" id="cpptest.provider://UninitializedArrayTest/2::accessElementsOfConstUinitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginReturnsIteratorToBeginningOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/2::BeginReturnsIteratorToBeginningOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstBeginReturnsIteratorToBeginningOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/2::ConstBeginReturnsIteratorToBeginningOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EndReturnsIteratorToEndOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/2::EndReturnsIteratorToEndOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstEndReturnsIteratorToEndOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/2::ConstEndReturnsIteratorToEndOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginAndEndIteratorNotEqualInFullUninitializedArray" id="cpptest.provider://UninitializedArrayTest/2::BeginAndEndIteratorNotEqualInFullUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginAndEndConstIteratorNotEqualInFullUninitializedArray" id="cpptest.provider://UninitializedArrayTest/2::BeginAndEndConstIteratorNotEqualInFullUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeOfUninitializedArrayEqualsCStyleArray" id="cpptest.provider://UninitializedArrayTest/2::SizeOfUninitializedArrayEqualsCStyleArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="UninitializedArrayTest/3" id="cpptest.provider://UninitializedArrayTest/3" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="accessElements" id="cpptest.provider://UninitializedArrayTest/3::accessElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="accessElementsOfConstUinitializedArray" id="cpptest.provider://UninitializedArrayTest/3::accessElementsOfConstUinitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginReturnsIteratorToBeginningOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/3::BeginReturnsIteratorToBeginningOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstBeginReturnsIteratorToBeginningOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/3::ConstBeginReturnsIteratorToBeginningOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EndReturnsIteratorToEndOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/3::EndReturnsIteratorToEndOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstEndReturnsIteratorToEndOfUninitializedArray" id="cpptest.provider://UninitializedArrayTest/3::ConstEndReturnsIteratorToEndOfUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginAndEndIteratorNotEqualInFullUninitializedArray" id="cpptest.provider://UninitializedArrayTest/3::BeginAndEndIteratorNotEqualInFullUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginAndEndConstIteratorNotEqualInFullUninitializedArray" id="cpptest.provider://UninitializedArrayTest/3::BeginAndEndConstIteratorNotEqualInFullUninitializedArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeOfUninitializedArrayEqualsCStyleArray" id="cpptest.provider://UninitializedArrayTest/3::SizeOfUninitializedArrayEqualsCStyleArray" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="vector_test" id="cpptest.provider://vector_test" total="108" fail="0" err="0" pass="108" >
                  <Test ln="1" auth="" locRef="" name="NewlyCreatedVectorIsEmpty" id="cpptest.provider://vector_test::NewlyCreatedVectorIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewlyCreatedVectorHasSizeZero" id="cpptest.provider://vector_test::NewlyCreatedVectorHasSizeZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="Capacity" id="cpptest.provider://vector_test::Capacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewVectorWithElementsCTorWithZeroElements" id="cpptest.provider://vector_test::NewVectorWithElementsCTorWithZeroElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewVectorWithElementsCTorWithSomeElements" id="cpptest.provider://vector_test::NewVectorWithElementsCTorWithSomeElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewVectorWithElementsCTorWithCapacityElements" id="cpptest.provider://vector_test::NewVectorWithElementsCTorWithCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewVectorWithElementsCTorWithMoreThanCapacityElements" id="cpptest.provider://vector_test::NewVectorWithElementsCTorWithMoreThanCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceBackSuccessfulWhenSpaceAvailable" id="cpptest.provider://vector_test::EmplaceBackSuccessfulWhenSpaceAvailable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceBackFailsWhenSpaceNotAvailable" id="cpptest.provider://vector_test::EmplaceBackFailsWhenSpaceNotAvailable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushBackSuccessfulWhenSpaceAvailableLValue" id="cpptest.provider://vector_test::PushBackSuccessfulWhenSpaceAvailableLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushBackFailsWhenSpaceNotAvailableLValue" id="cpptest.provider://vector_test::PushBackFailsWhenSpaceNotAvailableLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushBackSuccessfulWhenSpaceAvailableRValue" id="cpptest.provider://vector_test::PushBackSuccessfulWhenSpaceAvailableRValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushBackFailsWhenSpaceNotAvailableRValue" id="cpptest.provider://vector_test::PushBackFailsWhenSpaceNotAvailableRValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopBackOnEmptyVector" id="cpptest.provider://vector_test::PopBackOnEmptyVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopBackNonEmptyVector" id="cpptest.provider://vector_test::PopBackNonEmptyVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeIncreasesWhenElementIsAdded" id="cpptest.provider://vector_test::SizeIncreasesWhenElementIsAdded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeEqualsCapacityWheFull" id="cpptest.provider://vector_test::SizeEqualsCapacityWheFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeUnchangedWhenEmplaceFails" id="cpptest.provider://vector_test::SizeUnchangedWhenEmplaceFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NotEmptyWhenElementWasAdded" id="cpptest.provider://vector_test::NotEmptyWhenElementWasAdded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmptyAfterClear" id="cpptest.provider://vector_test::EmptyAfterClear" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeZeroAfterClear" id="cpptest.provider://vector_test::SizeZeroAfterClear" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructor" id="cpptest.provider://vector_test::CopyConstructor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructorWithEmptyVector" id="cpptest.provider://vector_test::CopyConstructorWithEmptyVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructorWithFullVector" id="cpptest.provider://vector_test::CopyConstructorWithFullVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructor" id="cpptest.provider://vector_test::MoveConstructor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructorWithEmptyVector" id="cpptest.provider://vector_test::MoveConstructorWithEmptyVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructorWithFullVector" id="cpptest.provider://vector_test::MoveConstructorWithFullVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorWithEmptyVector" id="cpptest.provider://vector_test::DestructorWithEmptyVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorSomeElements" id="cpptest.provider://vector_test::DestructorSomeElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorWithFullVector" id="cpptest.provider://vector_test::DestructorWithFullVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplacingElementInTheMiddleCallsDTor" id="cpptest.provider://vector_test::EmplacingElementInTheMiddleCallsDTor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithEmptySource" id="cpptest.provider://vector_test::CopyAssignmentWithEmptySource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithEmptyDestination" id="cpptest.provider://vector_test::CopyAssignmentWithEmptyDestination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithLargerDestination" id="cpptest.provider://vector_test::CopyAssignmentWithLargerDestination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithLargerSource" id="cpptest.provider://vector_test::CopyAssignmentWithLargerSource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReverseDestructionOrderInCopyAssignment" id="cpptest.provider://vector_test::ReverseDestructionOrderInCopyAssignment" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReverseDestructionOrderInMoveAssignment" id="cpptest.provider://vector_test::ReverseDestructionOrderInMoveAssignment" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithEmptySource" id="cpptest.provider://vector_test::MoveAssignmentWithEmptySource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithEmptyDestination" id="cpptest.provider://vector_test::MoveAssignmentWithEmptyDestination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithLargerDestination" id="cpptest.provider://vector_test::MoveAssignmentWithLargerDestination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithLargerSource" id="cpptest.provider://vector_test::MoveAssignmentWithLargerSource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginEndIteratorAreTheSameWhenEmpty" id="cpptest.provider://vector_test::BeginEndIteratorAreTheSameWhenEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginEndConstIteratorAreTheSameWhenEmpty" id="cpptest.provider://vector_test::BeginEndConstIteratorAreTheSameWhenEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginIteratorComesBeforeEndIteratorWhenNotEmpty" id="cpptest.provider://vector_test::BeginIteratorComesBeforeEndIteratorWhenNotEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginConstIteratorComesBeforeEndConstIteratorWhenNotEmpty" id="cpptest.provider://vector_test::BeginConstIteratorComesBeforeEndConstIteratorWhenNotEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginIteratorComesBeforeEndIteratorWhenFull" id="cpptest.provider://vector_test::BeginIteratorComesBeforeEndIteratorWhenFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginConstIteratorComesBeforeEndConstIteratorWhenFull" id="cpptest.provider://vector_test::BeginConstIteratorComesBeforeEndConstIteratorWhenFull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IteratorIteratesThroughNonEmptyVector" id="cpptest.provider://vector_test::IteratorIteratesThroughNonEmptyVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstIteratorIteratesThroughNonEmptyVector" id="cpptest.provider://vector_test::ConstIteratorIteratesThroughNonEmptyVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IteratorIteratesThroughFullVector" id="cpptest.provider://vector_test::IteratorIteratesThroughFullVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstIteratorIteratesThroughFullVector" id="cpptest.provider://vector_test::ConstIteratorIteratesThroughFullVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IterateUsingData" id="cpptest.provider://vector_test::IterateUsingData" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IterateUsingConstData" id="cpptest.provider://vector_test::IterateUsingConstData" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IterateUsingAt" id="cpptest.provider://vector_test::IterateUsingAt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IterateUsingConstAt" id="cpptest.provider://vector_test::IterateUsingConstAt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IterateUsingSquareBracket" id="cpptest.provider://vector_test::IterateUsingSquareBracket" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IterateUsingConstSquareBracket" id="cpptest.provider://vector_test::IterateUsingConstSquareBracket" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EraseFailsWhenElementIsInvalid" id="cpptest.provider://vector_test::EraseFailsWhenElementIsInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ErasingElementDecreasesSize" id="cpptest.provider://vector_test::ErasingElementDecreasesSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EraseOfLastElementCallsDTorOnly" id="cpptest.provider://vector_test::EraseOfLastElementCallsDTorOnly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EraseOfMiddleElementCallsDTorAndMove" id="cpptest.provider://vector_test::EraseOfMiddleElementCallsDTorAndMove" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessOfNonExistingElementOnEmptyVectorLeadTermination" id="cpptest.provider://vector_test::AccessOfNonExistingElementOnEmptyVectorLeadTermination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessOfNonExistingElementOnPartiallyFilledVectorLeadTermination" id="cpptest.provider://vector_test::AccessOfNonExistingElementOnPartiallyFilledVectorLeadTermination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessOfNonExistingElementOnFullVectorLeadTermination" id="cpptest.provider://vector_test::AccessOfNonExistingElementOnFullVectorLeadTermination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OutOfBoundsAccessOnEmptyVectorLeadsToTermination" id="cpptest.provider://vector_test::OutOfBoundsAccessOnEmptyVectorLeadsToTermination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OutOfBoundsAccessOnPartiallyFilledVectorLeadsToTermination" id="cpptest.provider://vector_test::OutOfBoundsAccessOnPartiallyFilledVectorLeadsToTermination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OutOfBoundsAccessOnFullVectorLeadsToTermination" id="cpptest.provider://vector_test::OutOfBoundsAccessOnFullVectorLeadsToTermination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EraseOfFrontElementCallsDTorAndMove" id="cpptest.provider://vector_test::EraseOfFrontElementCallsDTorAndMove" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EraseMiddleElementDataCorrectAfterwards" id="cpptest.provider://vector_test::EraseMiddleElementDataCorrectAfterwards" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EraseFrontElementDataCorrectAfterwards" id="cpptest.provider://vector_test::EraseFrontElementDataCorrectAfterwards" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EraseLastElementDataCorrectAfterwards" id="cpptest.provider://vector_test::EraseLastElementDataCorrectAfterwards" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EraseLastElementOfFullVectorDataCorrectAfterwards" id="cpptest.provider://vector_test::EraseLastElementOfFullVectorDataCorrectAfterwards" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FrontPointsToFirstElement" id="cpptest.provider://vector_test::FrontPointsToFirstElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BackPointsToLastElement" id="cpptest.provider://vector_test::BackPointsToLastElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstFrontPointsToFirstElement" id="cpptest.provider://vector_test::ConstFrontPointsToFirstElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstBackPointsToLastElement" id="cpptest.provider://vector_test::ConstBackPointsToLastElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructorWithSizeParameterSmallerThanCapacity" id="cpptest.provider://vector_test::ConstructorWithSizeParameterSmallerThanCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructorWithSizeParameterGreaterThanCapacity" id="cpptest.provider://vector_test::ConstructorWithSizeParameterGreaterThanCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoEmptyVectorOfSameCapacityAreEqual" id="cpptest.provider://vector_test::TwoEmptyVectorOfSameCapacityAreEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoEmptyVectorOfDifferentCapacityAreEqual" id="cpptest.provider://vector_test::TwoEmptyVectorOfDifferentCapacityAreEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoEqualVectorsWithSameCapacityAreEqual" id="cpptest.provider://vector_test::TwoEqualVectorsWithSameCapacityAreEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoEqualVectorsWithDifferentCapacityAreEqual" id="cpptest.provider://vector_test::TwoEqualVectorsWithDifferentCapacityAreEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoVectorsWithDifferentSizeAndSameCapacityAreNotEqual" id="cpptest.provider://vector_test::TwoVectorsWithDifferentSizeAndSameCapacityAreNotEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoNonEqualVectorsWithDifferentCapacityAreNotEqual" id="cpptest.provider://vector_test::TwoNonEqualVectorsWithDifferentCapacityAreNotEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubsetVectorWithSameCapacityIsNotEqual" id="cpptest.provider://vector_test::SubsetVectorWithSameCapacityIsNotEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubsetVectorWithDifferentCapacityIsNotEqual" id="cpptest.provider://vector_test::SubsetVectorWithDifferentCapacityIsNotEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PartiallyEqualVectorsWithSameCapacityAreNotEqual" id="cpptest.provider://vector_test::PartiallyEqualVectorsWithSameCapacityAreNotEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PartiallyEqualVectorsWithDifferentCapacityAreNotEqual" id="cpptest.provider://vector_test::PartiallyEqualVectorsWithDifferentCapacityAreNotEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FullVectorDestroysElementsInReverseOrder" id="cpptest.provider://vector_test::FullVectorDestroysElementsInReverseOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PartiallyFullVectorDestroysElementsInReverseOrder" id="cpptest.provider://vector_test::PartiallyFullVectorDestroysElementsInReverseOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopBackReturnsFalseOnEmptyVector" id="cpptest.provider://vector_test::PopBackReturnsFalseOnEmptyVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopBackReturnsTrueOnNonEmptyVector" id="cpptest.provider://vector_test::PopBackReturnsTrueOnNonEmptyVector" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopBackReturnsTrueTillItsEmpty" id="cpptest.provider://vector_test::PopBackReturnsTrueTillItsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizeFailsWhenCountIsGreaterThanCapacity" id="cpptest.provider://vector_test::ResizeFailsWhenCountIsGreaterThanCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizeWithTemplateValueFailsWhenCountIsGreaterThanCapacity" id="cpptest.provider://vector_test::ResizeWithTemplateValueFailsWhenCountIsGreaterThanCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeIncreaseWithResizeAndDefaultCTorWorks" id="cpptest.provider://vector_test::SizeIncreaseWithResizeAndDefaultCTorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeIncreaseWithResizeAndTemplateValueWorks" id="cpptest.provider://vector_test::SizeIncreaseWithResizeAndTemplateValueWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeDecreaseWithResizeAndDefaultCTorWorks" id="cpptest.provider://vector_test::SizeDecreaseWithResizeAndDefaultCTorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeDecreaseWithResizeAndTemplateValueWorks" id="cpptest.provider://vector_test::SizeDecreaseWithResizeAndTemplateValueWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizeWithDefaultCTorChangesNothingIfSizeAlreadyFits" id="cpptest.provider://vector_test::ResizeWithDefaultCTorChangesNothingIfSizeAlreadyFits" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResizeWithTemplateValueChangesNothingIfSizeAlreadyFits" id="cpptest.provider://vector_test::ResizeWithTemplateValueChangesNothingIfSizeAlreadyFits" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceInEmptyVectorWorks" id="cpptest.provider://vector_test::EmplaceInEmptyVectorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceAtFrontTillFullWorks" id="cpptest.provider://vector_test::EmplaceAtFrontTillFullWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceInTheMiddleMovesElementsToTheRight" id="cpptest.provider://vector_test::EmplaceInTheMiddleMovesElementsToTheRight" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceWhenFullReturnsFalse" id="cpptest.provider://vector_test::EmplaceWhenFullReturnsFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceWhenPositionExceedsCapacityReturnsFalse" id="cpptest.provider://vector_test::EmplaceWhenPositionExceedsCapacityReturnsFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceAtEndWorks" id="cpptest.provider://vector_test::EmplaceAtEndWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceAtPositionAfterEndBeforeCapacityExceedsFails" id="cpptest.provider://vector_test::EmplaceAtPositionAfterEndBeforeCapacityExceedsFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="list_test" id="cpptest.provider://list_test" total="127" fail="0" err="0" pass="127" >
                  <Test ln="1" auth="" locRef="" name="NewlyCreatedListIsEmpty" id="cpptest.provider://list_test::NewlyCreatedListIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewlyCreatedListHasSizeZero" id="cpptest.provider://list_test::NewlyCreatedListHasSizeZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReadCapacityOnList" id="cpptest.provider://list_test::ReadCapacityOnList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReadMax_sizeOnList" id="cpptest.provider://list_test::ReadMax_sizeOnList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewListCTorWithZeroElements" id="cpptest.provider://list_test::NewListCTorWithZeroElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CbeginCendAreTheSameWhenEmpty" id="cpptest.provider://list_test::CbeginCendAreTheSameWhenEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginEndAreTheSameWhenEmpty" id="cpptest.provider://list_test::BeginEndAreTheSameWhenEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CbeginEndAreTheSameWhenEmpty" id="cpptest.provider://list_test::CbeginEndAreTheSameWhenEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginCendAreTheSameWhenEmpty" id="cpptest.provider://list_test::BeginCendAreTheSameWhenEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CbeginCendAreDifferentWhenFilled" id="cpptest.provider://list_test::CbeginCendAreDifferentWhenFilled" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginEndAreDifferentWhenFilled" id="cpptest.provider://list_test::BeginEndAreDifferentWhenFilled" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CbeginEndAreDifferentWhenFilled" id="cpptest.provider://list_test::CbeginEndAreDifferentWhenFilled" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BeginCendAreDifferentWhenFilled" id="cpptest.provider://list_test::BeginCendAreDifferentWhenFilled" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NotEmptyWhenFilled" id="cpptest.provider://list_test::NotEmptyWhenFilled" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NotFullWhenEmpty" id="cpptest.provider://list_test::NotFullWhenEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NotFullWhenPartialFilled" id="cpptest.provider://list_test::NotFullWhenPartialFilled" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FullWhenFilledWithCapacityElements" id="cpptest.provider://list_test::FullWhenFilledWithCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FullWhenFilledWithMoreThanCapacityElements" id="cpptest.provider://list_test::FullWhenFilledWithMoreThanCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NotFullWhenFilledWithCapacityAndEraseOneElements" id="cpptest.provider://list_test::NotFullWhenFilledWithCapacityAndEraseOneElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NotFullWhenFilledWithCapacityAndEraseOneAndReinsertElements" id="cpptest.provider://list_test::NotFullWhenFilledWithCapacityAndEraseOneAndReinsertElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CTorWithOneElements" id="cpptest.provider://list_test::CTorWithOneElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CustomCTorWithOneElements" id="cpptest.provider://list_test::CustomCTorWithOneElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CTorWithSomeElements" id="cpptest.provider://list_test::CTorWithSomeElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CTorWithCapacityElements" id="cpptest.provider://list_test::CTorWithCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CTorWithMoreThanCapacityElements" id="cpptest.provider://list_test::CTorWithMoreThanCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceWithOneElements" id="cpptest.provider://list_test::EmplaceWithOneElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceWithSomeElements" id="cpptest.provider://list_test::EmplaceWithSomeElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceWithCapacityElements" id="cpptest.provider://list_test::EmplaceWithCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceWithMoreThanCapacityElements" id="cpptest.provider://list_test::EmplaceWithMoreThanCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceReverseWithOneElements" id="cpptest.provider://list_test::EmplaceReverseWithOneElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceReverseWithSomeElements" id="cpptest.provider://list_test::EmplaceReverseWithSomeElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceReverseWithCapacityElements" id="cpptest.provider://list_test::EmplaceReverseWithCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceReverseWithWithMoreThanCapacityElements" id="cpptest.provider://list_test::EmplaceReverseWithWithMoreThanCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceBackWithOneElements" id="cpptest.provider://list_test::EmplaceBackWithOneElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceBackWithSomeElements" id="cpptest.provider://list_test::EmplaceBackWithSomeElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceBackWithCapacityElements" id="cpptest.provider://list_test::EmplaceBackWithCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceBackWithMoreThanCapacityElements" id="cpptest.provider://list_test::EmplaceBackWithMoreThanCapacityElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceWithWrongListIterator" id="cpptest.provider://list_test::EmplaceWithWrongListIterator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushFrontConstCustomSuccessfullWhenSpaceAvailableLValue" id="cpptest.provider://list_test::PushFrontConstCustomSuccessfullWhenSpaceAvailableLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushFrontConstSuccessfullWhenSpaceAvailableLValue" id="cpptest.provider://list_test::PushFrontConstSuccessfullWhenSpaceAvailableLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushFrontFailsWhenSpaceNotAvailableLValue" id="cpptest.provider://list_test::PushFrontFailsWhenSpaceNotAvailableLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushFrontSuccessfullWhenSpaceAvailableRValue" id="cpptest.provider://list_test::PushFrontSuccessfullWhenSpaceAvailableRValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushFrontFailsWhenSpaceNotAvailableRValue" id="cpptest.provider://list_test::PushFrontFailsWhenSpaceNotAvailableRValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushBackConstCustomSuccessfullWhenSpaceAvailableLValue" id="cpptest.provider://list_test::PushBackConstCustomSuccessfullWhenSpaceAvailableLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushBackConstSuccessfullWhenSpaceAvailableLValue" id="cpptest.provider://list_test::PushBackConstSuccessfullWhenSpaceAvailableLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushBackFailsWhenSpaceNotAvailableLValue" id="cpptest.provider://list_test::PushBackFailsWhenSpaceNotAvailableLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushBackSuccessfullWhenSpaceAvailableRValue" id="cpptest.provider://list_test::PushBackSuccessfullWhenSpaceAvailableRValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushBackFailsWhenSpaceNotAvailableRValue" id="cpptest.provider://list_test::PushBackFailsWhenSpaceNotAvailableRValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PushBackCheckInsertPosition" id="cpptest.provider://list_test::PushBackCheckInsertPosition" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFrontElement" id="cpptest.provider://list_test::AccessFrontElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFrontElementFromConstList" id="cpptest.provider://list_test::AccessFrontElementFromConstList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessBackElement" id="cpptest.provider://list_test::AccessBackElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessBackElementFromConstList" id="cpptest.provider://list_test::AccessBackElementFromConstList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopFrontOnEmptyList" id="cpptest.provider://list_test::PopFrontOnEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopFrontNonEmptyList" id="cpptest.provider://list_test::PopFrontNonEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopFrontFullToEmptyList" id="cpptest.provider://list_test::PopFrontFullToEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopFrontFullPlusOneToEmptyList" id="cpptest.provider://list_test::PopFrontFullPlusOneToEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopBackOnEmptyList" id="cpptest.provider://list_test::PopBackOnEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopBackNonEmptyList" id="cpptest.provider://list_test::PopBackNonEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopBackFullToEmptyList" id="cpptest.provider://list_test::PopBackFullToEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PopBackFullPlusOneToEmptyList" id="cpptest.provider://list_test::PopBackFullPlusOneToEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertEmptyListAsLValue" id="cpptest.provider://list_test::InsertEmptyListAsLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertLValueCheckReturn" id="cpptest.provider://list_test::InsertLValueCheckReturn" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertEmptyListAsRValue" id="cpptest.provider://list_test::InsertEmptyListAsRValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertRValueCheckReturn" id="cpptest.provider://list_test::InsertRValueCheckReturn" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertBeginListLValue" id="cpptest.provider://list_test::InsertBeginListLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertBeforeBeginListLValue" id="cpptest.provider://list_test::InsertBeforeBeginListLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertBeforeBeginListRValue" id="cpptest.provider://list_test::InsertBeforeBeginListRValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertSomeElementsListLValue" id="cpptest.provider://list_test::InsertSomeElementsListLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertSomeElementsListRValue" id="cpptest.provider://list_test::InsertSomeElementsListRValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertFullElementsListLValue" id="cpptest.provider://list_test::InsertFullElementsListLValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertFullElementsListRValue" id="cpptest.provider://list_test::InsertFullElementsListRValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IteratorArrowOperator" id="cpptest.provider://list_test::IteratorArrowOperator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IteratorIncrementOperatorBeyondEnd" id="cpptest.provider://list_test::IteratorIncrementOperatorBeyondEnd" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstIteratorIncrementOperatorBeyondEnd" id="cpptest.provider://list_test::ConstIteratorIncrementOperatorBeyondEnd" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IteratorDecrementOperatorBeyondBegin" id="cpptest.provider://list_test::IteratorDecrementOperatorBeyondBegin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstIteratorDecrementOperatorBeyondBegin" id="cpptest.provider://list_test::ConstIteratorDecrementOperatorBeyondBegin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IteratorDecrementOperatorBeyondBeginWithFullList" id="cpptest.provider://list_test::IteratorDecrementOperatorBeyondBeginWithFullList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IteratorComparisonOfDifferentLists" id="cpptest.provider://list_test::IteratorComparisonOfDifferentLists" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ComparingConstIteratorAndIterator" id="cpptest.provider://list_test::ComparingConstIteratorAndIterator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IteratorTraitsGetValueType" id="cpptest.provider://list_test::IteratorTraitsGetValueType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IteratorTraitsCheckIteratorCategoryOnConstIterator" id="cpptest.provider://list_test::IteratorTraitsCheckIteratorCategoryOnConstIterator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmptyAfterClear" id="cpptest.provider://list_test::EmptyAfterClear" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeZeroAfterClear" id="cpptest.provider://list_test::SizeZeroAfterClear" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructor" id="cpptest.provider://list_test::CopyConstructor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructorWithEmptyList" id="cpptest.provider://list_test::CopyConstructorWithEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructorWithFullList" id="cpptest.provider://list_test::CopyConstructorWithFullList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructor" id="cpptest.provider://list_test::MoveConstructor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructorWithEmptyList" id="cpptest.provider://list_test::MoveConstructorWithEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructorWithFullList" id="cpptest.provider://list_test::MoveConstructorWithFullList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorWithEmptyList" id="cpptest.provider://list_test::DestructorWithEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorSomeElements" id="cpptest.provider://list_test::DestructorSomeElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorWithFullList" id="cpptest.provider://list_test::DestructorWithFullList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithEmptySource" id="cpptest.provider://list_test::CopyAssignmentWithEmptySource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithEmptyDestination" id="cpptest.provider://list_test::CopyAssignmentWithEmptyDestination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithLargerDestination" id="cpptest.provider://list_test::CopyAssignmentWithLargerDestination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithLargerSource" id="cpptest.provider://list_test::CopyAssignmentWithLargerSource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithEmptySource" id="cpptest.provider://list_test::MoveAssignmentWithEmptySource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithEmptyDestination" id="cpptest.provider://list_test::MoveAssignmentWithEmptyDestination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithLargerDestination" id="cpptest.provider://list_test::MoveAssignmentWithLargerDestination" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithLargerSource" id="cpptest.provider://list_test::MoveAssignmentWithLargerSource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveDefaultElementFromEmptyList" id="cpptest.provider://list_test::RemoveDefaultElementFromEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveCustomElementFromEmptyList" id="cpptest.provider://list_test::RemoveCustomElementFromEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveOneDefaultElementFromList" id="cpptest.provider://list_test::RemoveOneDefaultElementFromList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveOneCustomElementFromList" id="cpptest.provider://list_test::RemoveOneCustomElementFromList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveNotExistentElementFromList" id="cpptest.provider://list_test::RemoveNotExistentElementFromList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveOnetoEmptyList" id="cpptest.provider://list_test::RemoveOnetoEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveWithFewMatches" id="cpptest.provider://list_test::RemoveWithFewMatches" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveWithAllMatches" id="cpptest.provider://list_test::RemoveWithAllMatches" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveAllFromList" id="cpptest.provider://list_test::RemoveAllFromList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveIfFromEmptyList" id="cpptest.provider://list_test::RemoveIfFromEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveIfOneDefaultElementFromList" id="cpptest.provider://list_test::RemoveIfOneDefaultElementFromList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveIfOneCustomElementFromList" id="cpptest.provider://list_test::RemoveIfOneCustomElementFromList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveIfNotExistentElementFromList" id="cpptest.provider://list_test::RemoveIfNotExistentElementFromList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveIfOnetoEmptyList" id="cpptest.provider://list_test::RemoveIfOnetoEmptyList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveIfWithFewMatches" id="cpptest.provider://list_test::RemoveIfWithFewMatches" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveIfWithAllMatches" id="cpptest.provider://list_test::RemoveIfWithAllMatches" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveIfAllFromList" id="cpptest.provider://list_test::RemoveIfAllFromList" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="writeContentViaDereferencedIterator" id="cpptest.provider://list_test::writeContentViaDereferencedIterator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="invalidIteratorErase" id="cpptest.provider://list_test::invalidIteratorErase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="invalidIteratorIncrement" id="cpptest.provider://list_test::invalidIteratorIncrement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="invalidIteratorDecrement" id="cpptest.provider://list_test::invalidIteratorDecrement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="invalidIteratorComparison" id="cpptest.provider://list_test::invalidIteratorComparison" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="invalidIteratorComparisonUnequal" id="cpptest.provider://list_test::invalidIteratorComparisonUnequal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="invalidIteratorDereferencing" id="cpptest.provider://list_test::invalidIteratorDereferencing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="invalidIteratorAddressOfOperator" id="cpptest.provider://list_test::invalidIteratorAddressOfOperator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ListIsCopyableViaMemcpy" id="cpptest.provider://list_test::ListIsCopyableViaMemcpy" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="VariantQueue_test" id="cpptest.provider://VariantQueue_test" total="8" fail="0" err="0" pass="8" >
                  <Test ln="1" auth="" locRef="" name="isEmptyWhenCreated" id="cpptest.provider://VariantQueue_test::isEmptyWhenCreated" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="isNotEmptyWhenOneElementIsInside" id="cpptest.provider://VariantQueue_test::isNotEmptyWhenOneElementIsInside" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popsSingleElementWhichWasPushed" id="cpptest.provider://VariantQueue_test::popsSingleElementWhichWasPushed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="popsMultiElementsWhichWerePushed" id="cpptest.provider://VariantQueue_test::popsMultiElementsWhichWerePushed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="pushTwoElementsAfterSecondPopIsInvalid" id="cpptest.provider://VariantQueue_test::pushTwoElementsAfterSecondPopIsInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="handlesOverflow" id="cpptest.provider://VariantQueue_test::handlesOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="noPopWhenEmpty" id="cpptest.provider://VariantQueue_test::noPopWhenEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="underlyingTypeIsEmptyWhenCreated" id="cpptest.provider://VariantQueue_test::underlyingTypeIsEmptyWhenCreated" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="FunctionalInterface_test/0" id="cpptest.provider://FunctionalInterface_test/0" total="42" fail="0" err="0" pass="42" >
                  <Test ln="1" auth="" locRef="" name="AndThenHasCorrectSignature" id="cpptest.provider://FunctionalInterface_test/0::AndThenHasCorrectSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenIsCalledCorrectlyWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenIsCalledCorrectlyWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenIsCalledCorrectlyWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenIsCalledCorrectlyWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenIsNotCalledWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenIsNotCalledWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenIsNotCalledWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenIsNotCalledWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenOrElseConcatenatedWorksWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenOrElseConcatenatedWorksWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenOrElseConcatenatedWorksWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenOrElseConcatenatedWorksWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenOrElseConcatenatedWorkWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenOrElseConcatenatedWorkWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenOrElseConcatenatedWorkWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/0::AndThenOrElseConcatenatedWorkWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectDoesNotCallTerminateWhenObjectIsValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectDoesNotCallTerminateWhenObjectIsValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectDoesNotCallTerminateWhenObjectIsValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectDoesNotCallTerminateWhenObjectIsValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectDoesCallTerminateWhenObjectIsInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_constLValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectDoesCallTerminateWhenObjectIsInvalid_constLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectDoesCallTerminateWhenObjectIsInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_constRValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectDoesCallTerminateWhenObjectIsInvalid_constRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectReturnsValueWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectReturnsValueWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectReturnsValueWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/0::ExpectReturnsValueWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseHasCorrectSignature" id="cpptest.provider://FunctionalInterface_test/0::OrElseHasCorrectSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/0::OrElseIsCalledCorrectlyWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/0::OrElseIsCalledCorrectlyWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/0::OrElseIsCalledCorrectlyWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/0::OrElseIsCalledCorrectlyWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/0::OrElseIsNotCalledWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/0::OrElseIsNotCalledWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/0::OrElseIsNotCalledWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/0::OrElseIsNotCalledWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsValueWhenValid_LValue" id="cpptest.provider://FunctionalInterface_test/0::ValueOrReturnsValueWhenValid_LValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsValueWhenValid_RValue" id="cpptest.provider://FunctionalInterface_test/0::ValueOrReturnsValueWhenValid_RValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsArgumentWhenInalid_LValue" id="cpptest.provider://FunctionalInterface_test/0::ValueOrReturnsArgumentWhenInalid_LValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsArgumentWhenInalid_RValue" id="cpptest.provider://FunctionalInterface_test/0::ValueOrReturnsArgumentWhenInalid_RValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="FunctionalInterface_test/1" id="cpptest.provider://FunctionalInterface_test/1" total="42" fail="0" err="0" pass="42" >
                  <Test ln="1" auth="" locRef="" name="AndThenHasCorrectSignature" id="cpptest.provider://FunctionalInterface_test/1::AndThenHasCorrectSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenIsCalledCorrectlyWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenIsCalledCorrectlyWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenIsCalledCorrectlyWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenIsCalledCorrectlyWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenIsNotCalledWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenIsNotCalledWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenIsNotCalledWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenIsNotCalledWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenOrElseConcatenatedWorksWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenOrElseConcatenatedWorksWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenOrElseConcatenatedWorksWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenOrElseConcatenatedWorksWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenOrElseConcatenatedWorkWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenOrElseConcatenatedWorkWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenOrElseConcatenatedWorkWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/1::AndThenOrElseConcatenatedWorkWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectDoesNotCallTerminateWhenObjectIsValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectDoesNotCallTerminateWhenObjectIsValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectDoesNotCallTerminateWhenObjectIsValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectDoesNotCallTerminateWhenObjectIsValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectDoesCallTerminateWhenObjectIsInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_constLValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectDoesCallTerminateWhenObjectIsInvalid_constLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectDoesCallTerminateWhenObjectIsInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_constRValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectDoesCallTerminateWhenObjectIsInvalid_constRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectReturnsValueWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectReturnsValueWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectReturnsValueWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/1::ExpectReturnsValueWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseHasCorrectSignature" id="cpptest.provider://FunctionalInterface_test/1::OrElseHasCorrectSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/1::OrElseIsCalledCorrectlyWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/1::OrElseIsCalledCorrectlyWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/1::OrElseIsCalledCorrectlyWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/1::OrElseIsCalledCorrectlyWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/1::OrElseIsNotCalledWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/1::OrElseIsNotCalledWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/1::OrElseIsNotCalledWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/1::OrElseIsNotCalledWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsValueWhenValid_LValue" id="cpptest.provider://FunctionalInterface_test/1::ValueOrReturnsValueWhenValid_LValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsValueWhenValid_RValue" id="cpptest.provider://FunctionalInterface_test/1::ValueOrReturnsValueWhenValid_RValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsArgumentWhenInalid_LValue" id="cpptest.provider://FunctionalInterface_test/1::ValueOrReturnsArgumentWhenInalid_LValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsArgumentWhenInalid_RValue" id="cpptest.provider://FunctionalInterface_test/1::ValueOrReturnsArgumentWhenInalid_RValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="FunctionalInterface_test/2" id="cpptest.provider://FunctionalInterface_test/2" total="42" fail="0" err="0" pass="42" >
                  <Test ln="1" auth="" locRef="" name="AndThenHasCorrectSignature" id="cpptest.provider://FunctionalInterface_test/2::AndThenHasCorrectSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenIsCalledCorrectlyWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenIsCalledCorrectlyWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenIsCalledCorrectlyWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenIsCalledCorrectlyWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenIsNotCalledWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenIsNotCalledWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenIsNotCalledWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenIsNotCalledWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenOrElseConcatenatedWorksWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenOrElseConcatenatedWorksWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenOrElseConcatenatedWorksWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenOrElseConcatenatedWorksWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenOrElseConcatenatedWorkWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenOrElseConcatenatedWorkWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenOrElseConcatenatedWorkWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/2::AndThenOrElseConcatenatedWorkWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectDoesNotCallTerminateWhenObjectIsValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectDoesNotCallTerminateWhenObjectIsValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectDoesNotCallTerminateWhenObjectIsValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectDoesNotCallTerminateWhenObjectIsValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectDoesCallTerminateWhenObjectIsInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_constLValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectDoesCallTerminateWhenObjectIsInvalid_constLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectDoesCallTerminateWhenObjectIsInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_constRValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectDoesCallTerminateWhenObjectIsInvalid_constRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectReturnsValueWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectReturnsValueWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectReturnsValueWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/2::ExpectReturnsValueWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseHasCorrectSignature" id="cpptest.provider://FunctionalInterface_test/2::OrElseHasCorrectSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/2::OrElseIsCalledCorrectlyWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/2::OrElseIsCalledCorrectlyWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/2::OrElseIsCalledCorrectlyWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/2::OrElseIsCalledCorrectlyWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/2::OrElseIsNotCalledWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/2::OrElseIsNotCalledWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/2::OrElseIsNotCalledWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/2::OrElseIsNotCalledWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsValueWhenValid_LValue" id="cpptest.provider://FunctionalInterface_test/2::ValueOrReturnsValueWhenValid_LValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsValueWhenValid_RValue" id="cpptest.provider://FunctionalInterface_test/2::ValueOrReturnsValueWhenValid_RValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsArgumentWhenInalid_LValue" id="cpptest.provider://FunctionalInterface_test/2::ValueOrReturnsArgumentWhenInalid_LValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsArgumentWhenInalid_RValue" id="cpptest.provider://FunctionalInterface_test/2::ValueOrReturnsArgumentWhenInalid_RValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="FunctionalInterface_test/3" id="cpptest.provider://FunctionalInterface_test/3" total="42" fail="0" err="0" pass="42" >
                  <Test ln="1" auth="" locRef="" name="AndThenHasCorrectSignature" id="cpptest.provider://FunctionalInterface_test/3::AndThenHasCorrectSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenIsCalledCorrectlyWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenIsCalledCorrectlyWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenIsCalledCorrectlyWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenIsCalledCorrectlyWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenIsNotCalledWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenIsNotCalledWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenIsNotCalledWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenIsNotCalledWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenOrElseConcatenatedWorksWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenOrElseConcatenatedWorksWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenOrElseConcatenatedWorksWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenOrElseConcatenatedWorksWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenOrElseConcatenatedWorkWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenOrElseConcatenatedWorkWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenOrElseConcatenatedWorkWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/3::AndThenOrElseConcatenatedWorkWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectDoesNotCallTerminateWhenObjectIsValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectDoesNotCallTerminateWhenObjectIsValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectDoesNotCallTerminateWhenObjectIsValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectDoesNotCallTerminateWhenObjectIsValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectDoesCallTerminateWhenObjectIsInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_constLValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectDoesCallTerminateWhenObjectIsInvalid_constLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectDoesCallTerminateWhenObjectIsInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_constRValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectDoesCallTerminateWhenObjectIsInvalid_constRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectReturnsValueWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectReturnsValueWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectReturnsValueWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/3::ExpectReturnsValueWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseHasCorrectSignature" id="cpptest.provider://FunctionalInterface_test/3::OrElseHasCorrectSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/3::OrElseIsCalledCorrectlyWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/3::OrElseIsCalledCorrectlyWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/3::OrElseIsCalledCorrectlyWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/3::OrElseIsCalledCorrectlyWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/3::OrElseIsNotCalledWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/3::OrElseIsNotCalledWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/3::OrElseIsNotCalledWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/3::OrElseIsNotCalledWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsValueWhenValid_LValue" id="cpptest.provider://FunctionalInterface_test/3::ValueOrReturnsValueWhenValid_LValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsValueWhenValid_RValue" id="cpptest.provider://FunctionalInterface_test/3::ValueOrReturnsValueWhenValid_RValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsArgumentWhenInalid_LValue" id="cpptest.provider://FunctionalInterface_test/3::ValueOrReturnsArgumentWhenInalid_LValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsArgumentWhenInalid_RValue" id="cpptest.provider://FunctionalInterface_test/3::ValueOrReturnsArgumentWhenInalid_RValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="FunctionalInterface_test/4" id="cpptest.provider://FunctionalInterface_test/4" total="42" fail="0" err="0" pass="42" >
                  <Test ln="1" auth="" locRef="" name="AndThenHasCorrectSignature" id="cpptest.provider://FunctionalInterface_test/4::AndThenHasCorrectSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenIsCalledCorrectlyWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenIsCalledCorrectlyWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenIsCalledCorrectlyWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsCalledCorrectlyWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenIsCalledCorrectlyWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenIsNotCalledWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenIsNotCalledWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenIsNotCalledWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenIsNotCalledWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenIsNotCalledWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenOrElseConcatenatedWorksWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenOrElseConcatenatedWorksWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenOrElseConcatenatedWorksWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorksWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenOrElseConcatenatedWorksWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenOrElseConcatenatedWorkWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenOrElseConcatenatedWorkWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenOrElseConcatenatedWorkWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AndThenOrElseConcatenatedWorkWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/4::AndThenOrElseConcatenatedWorkWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectDoesNotCallTerminateWhenObjectIsValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectDoesNotCallTerminateWhenObjectIsValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectDoesNotCallTerminateWhenObjectIsValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesNotCallTerminateWhenObjectIsValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectDoesNotCallTerminateWhenObjectIsValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectDoesCallTerminateWhenObjectIsInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_constLValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectDoesCallTerminateWhenObjectIsInvalid_constLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectDoesCallTerminateWhenObjectIsInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectDoesCallTerminateWhenObjectIsInvalid_constRValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectDoesCallTerminateWhenObjectIsInvalid_constRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectReturnsValueWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectReturnsValueWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectReturnsValueWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectReturnsValueWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/4::ExpectReturnsValueWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseHasCorrectSignature" id="cpptest.provider://FunctionalInterface_test/4::OrElseHasCorrectSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_LValueCase" id="cpptest.provider://FunctionalInterface_test/4::OrElseIsCalledCorrectlyWhenInvalid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/4::OrElseIsCalledCorrectlyWhenInvalid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_RValueCase" id="cpptest.provider://FunctionalInterface_test/4::OrElseIsCalledCorrectlyWhenInvalid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsCalledCorrectlyWhenInvalid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/4::OrElseIsCalledCorrectlyWhenInvalid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_LValueCase" id="cpptest.provider://FunctionalInterface_test/4::OrElseIsNotCalledWhenValid_LValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_ConstLValueCase" id="cpptest.provider://FunctionalInterface_test/4::OrElseIsNotCalledWhenValid_ConstLValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_RValueCase" id="cpptest.provider://FunctionalInterface_test/4::OrElseIsNotCalledWhenValid_RValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OrElseIsNotCalledWhenValid_ConstRValueCase" id="cpptest.provider://FunctionalInterface_test/4::OrElseIsNotCalledWhenValid_ConstRValueCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsValueWhenValid_LValue" id="cpptest.provider://FunctionalInterface_test/4::ValueOrReturnsValueWhenValid_LValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsValueWhenValid_RValue" id="cpptest.provider://FunctionalInterface_test/4::ValueOrReturnsValueWhenValid_RValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsArgumentWhenInalid_LValue" id="cpptest.provider://FunctionalInterface_test/4::ValueOrReturnsArgumentWhenInalid_LValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValueOrReturnsArgumentWhenInalid_RValue" id="cpptest.provider://FunctionalInterface_test/4::ValueOrReturnsArgumentWhenInalid_RValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="NewType" id="cpptest.provider://NewType" total="25" fail="0" err="0" pass="25" >
                  <Test ln="1" auth="" locRef="" name="ComparableDoesCompile" id="cpptest.provider://NewType::ComparableDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SortableDoesCompile" id="cpptest.provider://NewType::SortableDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DefaultConstructableDoesCompile" id="cpptest.provider://NewType::DefaultConstructableDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructableDoesCompile" id="cpptest.provider://NewType::CopyConstructableDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructableComplexTypeDoesCompile" id="cpptest.provider://NewType::CopyConstructableComplexTypeDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignableDoesCompile" id="cpptest.provider://NewType::CopyAssignableDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignableComplexTypeDoesCompile" id="cpptest.provider://NewType::CopyAssignableComplexTypeDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructableDoesCompile" id="cpptest.provider://NewType::MoveConstructableDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructableComplexTypeDoesCompile" id="cpptest.provider://NewType::MoveConstructableComplexTypeDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignableDoesCompile" id="cpptest.provider://NewType::MoveAssignableDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignableComplexTypeDoesCompile" id="cpptest.provider://NewType::MoveAssignableComplexTypeDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConversionDoesCompile" id="cpptest.provider://NewType::ConversionDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignByValueCopyDoesCompile" id="cpptest.provider://NewType::AssignByValueCopyDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignByValueCopyComplexTypeDoesCompile" id="cpptest.provider://NewType::AssignByValueCopyComplexTypeDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignByValueMoveDoesCompile" id="cpptest.provider://NewType::AssignByValueMoveDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignByValueMoveComplexTypeDoesCompile" id="cpptest.provider://NewType::AssignByValueMoveComplexTypeDoesCompile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingNewTypeWithMacroWorks" id="cpptest.provider://NewType::CreatingNewTypeWithMacroWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewTypeIsPreIncrementable" id="cpptest.provider://NewType::NewTypeIsPreIncrementable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewTypeIsPostIncrementable" id="cpptest.provider://NewType::NewTypeIsPostIncrementable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewTypeIsPreDecrementable" id="cpptest.provider://NewType::NewTypeIsPreDecrementable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewTypeIsPostDecrementable" id="cpptest.provider://NewType::NewTypeIsPostDecrementable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewTypeCanBeAdded" id="cpptest.provider://NewType::NewTypeCanBeAdded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewTypeCanBeSubstracted" id="cpptest.provider://NewType::NewTypeCanBeSubstracted" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewTypeCanBeMultiplied" id="cpptest.provider://NewType::NewTypeCanBeMultiplied" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewTypeCanBeDivided" id="cpptest.provider://NewType::NewTypeCanBeDivided" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="PolymorphicHandler_test" id="cpptest.provider://PolymorphicHandler_test" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="handlerIsInitializedWithDefault" id="cpptest.provider://PolymorphicHandler_test::handlerIsInitializedWithDefault" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="settingAlternateWorks" id="cpptest.provider://PolymorphicHandler_test::settingAlternateWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="alternatePointsToExternalMemory" id="cpptest.provider://PolymorphicHandler_test::alternatePointsToExternalMemory" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="explicitlySettingToDefaultWorks" id="cpptest.provider://PolymorphicHandler_test::explicitlySettingToDefaultWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="resetToDefaultWorks" id="cpptest.provider://PolymorphicHandler_test::resetToDefaultWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setToCurrentHandlerWorks" id="cpptest.provider://PolymorphicHandler_test::setToCurrentHandlerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="defaultHandlerIsVisibleInAllThreads" id="cpptest.provider://PolymorphicHandler_test::defaultHandlerIsVisibleInAllThreads" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="handlerChangePropagatesBetweenThreads" id="cpptest.provider://PolymorphicHandler_test::handlerChangePropagatesBetweenThreads" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="settingAfterFinalizeCallsHook" id="cpptest.provider://PolymorphicHandler_test::settingAfterFinalizeCallsHook" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="resetAfterFinalizeCallsHook" id="cpptest.provider://PolymorphicHandler_test::resetAfterFinalizeCallsHook" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="obtainingGuardWorks" id="cpptest.provider://PolymorphicHandler_test::obtainingGuardWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="StaticLifetimeGuard_test" id="cpptest.provider://StaticLifetimeGuard_test" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="countIsZeroIfNoInstanceExists" id="cpptest.provider://StaticLifetimeGuard_test::countIsZeroIfNoInstanceExists" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="guardDoesNotImplyInstanceConstructionIfInstanceIsNotCreated" id="cpptest.provider://StaticLifetimeGuard_test::guardDoesNotImplyInstanceConstructionIfInstanceIsNotCreated" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="staticInitializationSucceeded" id="cpptest.provider://StaticLifetimeGuard_test::staticInitializationSucceeded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="setCountWorks" id="cpptest.provider://StaticLifetimeGuard_test::setCountWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="guardPreventsDestruction" id="cpptest.provider://StaticLifetimeGuard_test::guardPreventsDestruction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="copyIncreasesLifetimeCount" id="cpptest.provider://StaticLifetimeGuard_test::copyIncreasesLifetimeCount" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="moveIncreasesLifetimeCount" id="cpptest.provider://StaticLifetimeGuard_test::moveIncreasesLifetimeCount" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="assignmentDoesNotChangeLifetimeCount" id="cpptest.provider://StaticLifetimeGuard_test::assignmentDoesNotChangeLifetimeCount" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="destructionAtZeroCountWorks" id="cpptest.provider://StaticLifetimeGuard_test::destructionAtZeroCountWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constructionAfterDestructionWorks" id="cpptest.provider://StaticLifetimeGuard_test::constructionAfterDestructionWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="instanceCtorIsConcurrentlyCalledExactlyOnce" id="cpptest.provider://StaticLifetimeGuard_test::instanceCtorIsConcurrentlyCalledExactlyOnce" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="filesystem_test_isValidFileName" id="cpptest.provider://filesystem_test_isValidFileName" total="7" fail="0" err="0" pass="7" >
                  <Test ln="1" auth="" locRef="" name="CorrectInternalAsciiAliases" id="cpptest.provider://filesystem_test_isValidFileName::CorrectInternalAsciiAliases" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmptyNameIsInvalid" id="cpptest.provider://filesystem_test_isValidFileName::EmptyNameIsInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RelativePathComponentsAreInvalid" id="cpptest.provider://filesystem_test_isValidFileName::RelativePathComponentsAreInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DotsAndSpacesAreNotValidAtTheEnd" id="cpptest.provider://filesystem_test_isValidFileName::DotsAndSpacesAreNotValidAtTheEnd" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FileNameWithValidSymbolsAndDotsAreValid" id="cpptest.provider://filesystem_test_isValidFileName::FileNameWithValidSymbolsAndDotsAreValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValidLetterCombinationsAreValid" id="cpptest.provider://filesystem_test_isValidFileName::ValidLetterCombinationsAreValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WhenOneInvalidCharacterIsContainedFileNameIsInvalid" id="cpptest.provider://filesystem_test_isValidFileName::WhenOneInvalidCharacterIsContainedFileNameIsInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="filesystem_test_isValidPathToFile" id="cpptest.provider://filesystem_test_isValidPathToFile" total="10" fail="0" err="0" pass="10" >
                  <Test ln="1" auth="" locRef="" name="StringWithEndingSlashIsNotAFilePath" id="cpptest.provider://filesystem_test_isValidPathToFile::StringWithEndingSlashIsNotAFilePath" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultipleSlashsAreValidFilePath" id="cpptest.provider://filesystem_test_isValidPathToFile::MultipleSlashsAreValidFilePath" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RelativePathComponentsAreValid" id="cpptest.provider://filesystem_test_isValidPathToFile::RelativePathComponentsAreValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RelativePathBeginningFromRootIsValid" id="cpptest.provider://filesystem_test_isValidPathToFile::RelativePathBeginningFromRootIsValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SingleFileIsValidPath" id="cpptest.provider://filesystem_test_isValidPathToFile::SingleFileIsValidPath" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValidPathsWithNoRelativeComponentAreValid" id="cpptest.provider://filesystem_test_isValidPathToFile::ValidPathsWithNoRelativeComponentAreValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EndingWithRelativePathComponentIsInvalid" id="cpptest.provider://filesystem_test_isValidPathToFile::EndingWithRelativePathComponentIsInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FilePathsWithEndingDotsAreInvalid" id="cpptest.provider://filesystem_test_isValidPathToFile::FilePathsWithEndingDotsAreInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PathWhichContainsAllValidCharactersIsValid" id="cpptest.provider://filesystem_test_isValidPathToFile::PathWhichContainsAllValidCharactersIsValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmptyFilePathIsInvalid" id="cpptest.provider://filesystem_test_isValidPathToFile::EmptyFilePathIsInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="filesystem_test_isValidPathToFile_isValidPathToDirectory_isValidPathEntry" id="cpptest.provider://filesystem_test_isValidPathToFile_isValidPathToDirectory_isValidPathEntry" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="WhenOneInvalidCharacterIsContainedPathIsInvalid" id="cpptest.provider://filesystem_test_isValidPathToFile_isValidPathToDirectory_isValidPathEntry::WhenOneInvalidCharacterIsContainedPathIsInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="filesystem_test_isValidPathToDirectory" id="cpptest.provider://filesystem_test_isValidPathToDirectory" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="MultipleSlashsAreValidPath" id="cpptest.provider://filesystem_test_isValidPathToDirectory::MultipleSlashsAreValidPath" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RelativePathComponentsAreValid" id="cpptest.provider://filesystem_test_isValidPathToDirectory::RelativePathComponentsAreValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RelativePathBeginningFromRootIsValid" id="cpptest.provider://filesystem_test_isValidPathToDirectory::RelativePathBeginningFromRootIsValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SingleEntryIsValidPath" id="cpptest.provider://filesystem_test_isValidPathToDirectory::SingleEntryIsValidPath" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ValidPathsWithNoRelativeComponentAreValid" id="cpptest.provider://filesystem_test_isValidPathToDirectory::ValidPathsWithNoRelativeComponentAreValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EndingWithRelativePathComponentIsValid" id="cpptest.provider://filesystem_test_isValidPathToDirectory::EndingWithRelativePathComponentIsValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PathsWithEndingDotsAreInvalid" id="cpptest.provider://filesystem_test_isValidPathToDirectory::PathsWithEndingDotsAreInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PathWhichContainsAllValidCharactersIsValid" id="cpptest.provider://filesystem_test_isValidPathToDirectory::PathWhichContainsAllValidCharactersIsValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmptyPathIsInvalid" id="cpptest.provider://filesystem_test_isValidPathToDirectory::EmptyPathIsInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="filesystem_test_doesEndWithPathSeparator" id="cpptest.provider://filesystem_test_doesEndWithPathSeparator" total="4" fail="0" err="0" pass="4" >
                  <Test ln="1" auth="" locRef="" name="EmptyPathDoesNotEndWithPathSeparator" id="cpptest.provider://filesystem_test_doesEndWithPathSeparator::EmptyPathDoesNotEndWithPathSeparator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NonEmptyPathWithNoPathSeparatorAtTheEndDoesNotEndWithPathSeparator" id="cpptest.provider://filesystem_test_doesEndWithPathSeparator::NonEmptyPathWithNoPathSeparatorAtTheEndDoesNotEndWithPathSeparator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SingleCharacterStringOnlyWithPathSeparatorAsOneAtTheEnd" id="cpptest.provider://filesystem_test_doesEndWithPathSeparator::SingleCharacterStringOnlyWithPathSeparatorAsOneAtTheEnd" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiCharacterStringEndingWithPathSeparatorAsOneAtTheEnd" id="cpptest.provider://filesystem_test_doesEndWithPathSeparator::MultiCharacterStringEndingWithPathSeparatorAsOneAtTheEnd" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="filesystem_test_isValidPathEntry" id="cpptest.provider://filesystem_test_isValidPathEntry" total="8" fail="0" err="0" pass="8" >
                  <Test ln="1" auth="" locRef="" name="EmptyPathEntryIsValid" id="cpptest.provider://filesystem_test_isValidPathEntry::EmptyPathEntryIsValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PathEntryWithOnlyValidCharactersIsValid" id="cpptest.provider://filesystem_test_isValidPathEntry::PathEntryWithOnlyValidCharactersIsValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RelativePathEntriesAreValid" id="cpptest.provider://filesystem_test_isValidPathEntry::RelativePathEntriesAreValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EntriesWithEndingDotAreInvalid" id="cpptest.provider://filesystem_test_isValidPathEntry::EntriesWithEndingDotAreInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EntriesWithDotsNotAtTheEndAreValid" id="cpptest.provider://filesystem_test_isValidPathEntry::EntriesWithDotsNotAtTheEndAreValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StringContainingAllValidCharactersIsValid" id="cpptest.provider://filesystem_test_isValidPathEntry::StringContainingAllValidCharactersIsValid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StringWithSlashIsInvalid" id="cpptest.provider://filesystem_test_isValidPathEntry::StringWithSlashIsInvalid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StringWithRelativeComponentsIsInvalidWhenItContainsRelativeComponents" id="cpptest.provider://filesystem_test_isValidPathEntry::StringWithRelativeComponentsIsInvalidWhenItContainsRelativeComponents" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="filesystem_test" id="cpptest.provider://filesystem_test" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="permsBinaryOrEqualToBinaryOrOfUnderlyingType" id="cpptest.provider://filesystem_test::permsBinaryOrEqualToBinaryOrOfUnderlyingType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="permsBinaryAndEqualToBinaryAndOfUnderlyingType" id="cpptest.provider://filesystem_test::permsBinaryAndEqualToBinaryAndOfUnderlyingType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="permsBinaryExclusiveOrEqualToBinaryExclusiveOrOfUnderlyingType" id="cpptest.provider://filesystem_test::permsBinaryExclusiveOrEqualToBinaryExclusiveOrOfUnderlyingType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="permsBinaryComplementEqualToBinaryComplementOfUnderlyingType" id="cpptest.provider://filesystem_test::permsBinaryComplementEqualToBinaryComplementOfUnderlyingType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="permsBinaryOrAssignmentEqualToBinaryOrAssignmentOfUnderlyingType" id="cpptest.provider://filesystem_test::permsBinaryOrAssignmentEqualToBinaryOrAssignmentOfUnderlyingType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="permsBinaryAndAssignmentEqualToBinaryAndAssignmentOfUnderlyingType" id="cpptest.provider://filesystem_test::permsBinaryAndAssignmentEqualToBinaryAndAssignmentOfUnderlyingType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="permsBinaryExclusiveOrAssignmentEqualToBinaryExclusiveOrAssignmentOfUnderylingType" id="cpptest.provider://filesystem_test::permsBinaryExclusiveOrAssignmentEqualToBinaryExclusiveOrAssignmentOfUnderylingType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="streamOperatorPrintsCorrectlyWhenEverythingIsSet" id="cpptest.provider://filesystem_test::streamOperatorPrintsCorrectlyWhenEverythingIsSet" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="streamOperatorPrintsCorrectlyWhenNothingIsSet" id="cpptest.provider://filesystem_test::streamOperatorPrintsCorrectlyWhenNothingIsSet" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="streamOperatorPrintsCorrectlyWhenPartialPermissionsAreSet" id="cpptest.provider://filesystem_test::streamOperatorPrintsCorrectlyWhenPartialPermissionsAreSet" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="streamOperatorPrintsCorrectlyWhenSetToUnknown" id="cpptest.provider://filesystem_test::streamOperatorPrintsCorrectlyWhenSetToUnknown" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="function_test" id="cpptest.provider://function_test" total="30" fail="0" err="0" pass="30" >
                  <Test ln="1" auth="" locRef="" name="ConstructionFromFunctorIsCallable" id="cpptest.provider://function_test::ConstructionFromFunctorIsCallable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructionFromLambdaIsCallable" id="cpptest.provider://function_test::ConstructionFromLambdaIsCallable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructionFromFreeFunctionIsCallable" id="cpptest.provider://function_test::ConstructionFromFreeFunctionIsCallable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructionFromStaticFunctionIsCallable" id="cpptest.provider://function_test::ConstructionFromStaticFunctionIsCallable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructionFromMemberFunctionIsCallable" id="cpptest.provider://function_test::ConstructionFromMemberFunctionIsCallable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructionFromConstMemberFunctionIsCallable" id="cpptest.provider://function_test::ConstructionFromConstMemberFunctionIsCallable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructionFromAnotherFunctionIsCallable" id="cpptest.provider://function_test::ConstructionFromAnotherFunctionIsCallable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FunctionStateIsIndependentOfSource" id="cpptest.provider://function_test::FunctionStateIsIndependentOfSource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorCallsDestructorOfStoredFunctor" id="cpptest.provider://function_test::DestructorCallsDestructorOfStoredFunctor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyCtorCopiesStoredFunctor" id="cpptest.provider://function_test::CopyCtorCopiesStoredFunctor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveCtorMovesStoredFunctor" id="cpptest.provider://function_test::MoveCtorMovesStoredFunctor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentCopiesStoredFunctor" id="cpptest.provider://function_test::CopyAssignmentCopiesStoredFunctor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentMovesStoredFunctor" id="cpptest.provider://function_test::MoveAssignmentMovesStoredFunctor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyCtorCopiesStoredFreeFunction" id="cpptest.provider://function_test::CopyCtorCopiesStoredFreeFunction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveCtorMovesStoredFreeFunction" id="cpptest.provider://function_test::MoveCtorMovesStoredFreeFunction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentCopiesStoredFreeFunction" id="cpptest.provider://function_test::CopyAssignmentCopiesStoredFreeFunction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentMovesStoredFreeFunction" id="cpptest.provider://function_test::MoveAssignmentMovesStoredFreeFunction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MemberSwapWorks" id="cpptest.provider://function_test::MemberSwapWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StaticSwapWorks" id="cpptest.provider://function_test::StaticSwapWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FunctorOfSizeSmallerThanStorageBytesCanBeStored" id="cpptest.provider://function_test::FunctorOfSizeSmallerThanStorageBytesCanBeStored" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IsStorableIsConsistent" id="cpptest.provider://function_test::IsStorableIsConsistent" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IsNotStorableDueToSize" id="cpptest.provider://function_test::IsNotStorableDueToSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IsNotStorableDueToSignature" id="cpptest.provider://function_test::IsNotStorableDueToSignature" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallWithCopyConstructibleArgument" id="cpptest.provider://function_test::CallWithCopyConstructibleArgument" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallWithVoidSignatureWorks" id="cpptest.provider://function_test::CallWithVoidSignatureWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallWithReferenceArgumentsWorks" id="cpptest.provider://function_test::CallWithReferenceArgumentsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallWithConstReferenceArgumentsWorks" id="cpptest.provider://function_test::CallWithConstReferenceArgumentsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallWithValueArgumentsWorks" id="cpptest.provider://function_test::CallWithValueArgumentsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallWithRValueReferenceArgumentsWorks" id="cpptest.provider://function_test::CallWithRValueReferenceArgumentsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallWithMixedArgumentsWorks" id="cpptest.provider://function_test::CallWithMixedArgumentsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="function_refTest" id="cpptest.provider://function_refTest" total="22" fail="0" err="0" pass="22" >
                  <Test ln="1" auth="" locRef="" name="CallValidByAssignResultEqual" id="cpptest.provider://function_refTest::CallValidByAssignResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallValidByCopyConstructResultEqual" id="cpptest.provider://function_refTest::CallValidByCopyConstructResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidByCopyAssignResultEqual" id="cpptest.provider://function_refTest::CreateValidByCopyAssignResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidByMoveResultEqual" id="cpptest.provider://function_refTest::CreateValidByMoveResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidByMoveAssignResultEqual" id="cpptest.provider://function_refTest::CreateValidByMoveAssignResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidAndSwapResultEqual" id="cpptest.provider://function_refTest::CreateValidAndSwapResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidWithCapturingLambdaVoidVoidIncremented" id="cpptest.provider://function_refTest::CreateValidWithCapturingLambdaVoidVoidIncremented" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidWithLambdaIntVoidResultEqual" id="cpptest.provider://function_refTest::CreateValidWithLambdaIntVoidResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidWithLambdaIntIntIncremented" id="cpptest.provider://function_refTest::CreateValidWithLambdaIntIntIncremented" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidWithFreeFunctionResultEqual" id="cpptest.provider://function_refTest::CreateValidWithFreeFunctionResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidWithComplexTypeResultEqual" id="cpptest.provider://function_refTest::CreateValidWithComplexTypeResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidWithFunctorResultEqual" id="cpptest.provider://function_refTest::CreateValidWithFunctorResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidWithStdBindResultEqual" id="cpptest.provider://function_refTest::CreateValidWithStdBindResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateValidWithStdFunctionResultEqual" id="cpptest.provider://function_refTest::CreateValidWithStdFunctionResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StoreInStdFunctionResultEqual" id="cpptest.provider://function_refTest::StoreInStdFunctionResultEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallOverloadedFunctionResultsInCallOfInt" id="cpptest.provider://function_refTest::CallOverloadedFunctionResultsInCallOfInt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallOverloadedFunctionResultsInCallOfVoid" id="cpptest.provider://function_refTest::CallOverloadedFunctionResultsInCallOfVoid" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallOverloadedFunctionResultsInCallOfIntInt" id="cpptest.provider://function_refTest::CallOverloadedFunctionResultsInCallOfIntInt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreationWithFunctionPointerWorks" id="cpptest.provider://function_refTest::CreationWithFunctionPointerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreationWithFunctionPointerWithRefArgWorks" id="cpptest.provider://function_refTest::CreationWithFunctionPointerWithRefArgWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreationWithFunctionPointerWithComplexTypeArgWorks" id="cpptest.provider://function_refTest::CreationWithFunctionPointerWithComplexTypeArgWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CanBeConstructedFromConstReference" id="cpptest.provider://function_refTest::CanBeConstructedFromConstReference" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="BumpAllocator_Test" id="cpptest.provider://BumpAllocator_Test" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="AllocateFailsWithZeroSize" id="cpptest.provider://BumpAllocator_Test::AllocateFailsWithZeroSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OverallocationFails" id="cpptest.provider://BumpAllocator_Test::OverallocationFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OverallocationAfterMultipleCallsFails" id="cpptest.provider://BumpAllocator_Test::OverallocationAfterMultipleCallsFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AllocationIsCorrectlyAligned" id="cpptest.provider://BumpAllocator_Test::AllocationIsCorrectlyAligned" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AllocateSmallMemoryChunkAndStoreDataWorks" id="cpptest.provider://BumpAllocator_Test::AllocateSmallMemoryChunkAndStoreDataWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AllocateCompleteMemoryAndStoreDataWorks" id="cpptest.provider://BumpAllocator_Test::AllocateCompleteMemoryAndStoreDataWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AllocateCompleteMemoryWithEquallySizedChunksWorks" id="cpptest.provider://BumpAllocator_Test::AllocateCompleteMemoryWithEquallySizedChunksWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AllocateCompleteMemoryWithDifferentSizedChunksWorks" id="cpptest.provider://BumpAllocator_Test::AllocateCompleteMemoryWithDifferentSizedChunksWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AllocateAfterDeallocateWorks" id="cpptest.provider://BumpAllocator_Test::AllocateAfterDeallocateWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="memory_test" id="cpptest.provider://memory_test" total="2" fail="0" err="0" pass="2" >
                  <Test ln="1" auth="" locRef="" name="MaxSizeWorksAsExpected" id="cpptest.provider://memory_test::MaxSizeWorksAsExpected" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxAlignmentWorksAsExpected" id="cpptest.provider://memory_test::MaxAlignmentWorksAsExpected" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="RelativePointer_test/0" id="cpptest.provider://RelativePointer_test/0" total="14" fail="0" err="0" pass="14" >
                  <Test ln="1" auth="" locRef="" name="ConstrTests" id="cpptest.provider://RelativePointer_test/0::ConstrTests" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOperatorTests" id="cpptest.provider://RelativePointer_test/0::AssignmentOperatorTests" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IdAndOffsetAreTranslatedToRawPointerCorrectly" id="cpptest.provider://RelativePointer_test/0::IdAndOffsetAreTranslatedToRawPointerCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GetOffsetReturnsCorrectOffset" id="cpptest.provider://RelativePointer_test/0::GetOffsetReturnsCorrectOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GetPtrReturnsAddressWithCorrectOffset" id="cpptest.provider://RelativePointer_test/0::GetPtrReturnsAddressWithCorrectOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RegisteringAndUnregisteringRelativePointerWorks" id="cpptest.provider://RelativePointer_test/0::RegisteringAndUnregisteringRelativePointerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnRegisteringOneRelativePointerWorks" id="cpptest.provider://RelativePointer_test/0::UnRegisteringOneRelativePointerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnregisteringAllRelativePointerWorks" id="cpptest.provider://RelativePointer_test/0::UnregisteringAllRelativePointerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RegisterPtrWithIdFailsWhenTooLarge" id="cpptest.provider://RelativePointer_test/0::RegisterPtrWithIdFailsWhenTooLarge" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BasePointerIsSameAfterRegistering" id="cpptest.provider://RelativePointer_test/0::BasePointerIsSameAfterRegistering" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOperatorResultsInSameBasePointerIdAndOffset" id="cpptest.provider://RelativePointer_test/0::AssignmentOperatorResultsInSameBasePointerIdAndOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DereferencingOperatorResultsInSameValue" id="cpptest.provider://RelativePointer_test/0::DereferencingOperatorResultsInSameValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MemoryRemappingWorks" id="cpptest.provider://RelativePointer_test/0::MemoryRemappingWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DefaultConstructedRelativePtrIsNull" id="cpptest.provider://RelativePointer_test/0::DefaultConstructedRelativePtrIsNull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="RelativePointer_test/1" id="cpptest.provider://RelativePointer_test/1" total="14" fail="0" err="0" pass="14" >
                  <Test ln="1" auth="" locRef="" name="ConstrTests" id="cpptest.provider://RelativePointer_test/1::ConstrTests" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOperatorTests" id="cpptest.provider://RelativePointer_test/1::AssignmentOperatorTests" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IdAndOffsetAreTranslatedToRawPointerCorrectly" id="cpptest.provider://RelativePointer_test/1::IdAndOffsetAreTranslatedToRawPointerCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GetOffsetReturnsCorrectOffset" id="cpptest.provider://RelativePointer_test/1::GetOffsetReturnsCorrectOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GetPtrReturnsAddressWithCorrectOffset" id="cpptest.provider://RelativePointer_test/1::GetPtrReturnsAddressWithCorrectOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RegisteringAndUnregisteringRelativePointerWorks" id="cpptest.provider://RelativePointer_test/1::RegisteringAndUnregisteringRelativePointerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnRegisteringOneRelativePointerWorks" id="cpptest.provider://RelativePointer_test/1::UnRegisteringOneRelativePointerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnregisteringAllRelativePointerWorks" id="cpptest.provider://RelativePointer_test/1::UnregisteringAllRelativePointerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RegisterPtrWithIdFailsWhenTooLarge" id="cpptest.provider://RelativePointer_test/1::RegisterPtrWithIdFailsWhenTooLarge" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BasePointerIsSameAfterRegistering" id="cpptest.provider://RelativePointer_test/1::BasePointerIsSameAfterRegistering" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOperatorResultsInSameBasePointerIdAndOffset" id="cpptest.provider://RelativePointer_test/1::AssignmentOperatorResultsInSameBasePointerIdAndOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DereferencingOperatorResultsInSameValue" id="cpptest.provider://RelativePointer_test/1::DereferencingOperatorResultsInSameValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MemoryRemappingWorks" id="cpptest.provider://RelativePointer_test/1::MemoryRemappingWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DefaultConstructedRelativePtrIsNull" id="cpptest.provider://RelativePointer_test/1::DefaultConstructedRelativePtrIsNull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="RelativePointer_test/2" id="cpptest.provider://RelativePointer_test/2" total="14" fail="0" err="0" pass="14" >
                  <Test ln="1" auth="" locRef="" name="ConstrTests" id="cpptest.provider://RelativePointer_test/2::ConstrTests" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOperatorTests" id="cpptest.provider://RelativePointer_test/2::AssignmentOperatorTests" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IdAndOffsetAreTranslatedToRawPointerCorrectly" id="cpptest.provider://RelativePointer_test/2::IdAndOffsetAreTranslatedToRawPointerCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GetOffsetReturnsCorrectOffset" id="cpptest.provider://RelativePointer_test/2::GetOffsetReturnsCorrectOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GetPtrReturnsAddressWithCorrectOffset" id="cpptest.provider://RelativePointer_test/2::GetPtrReturnsAddressWithCorrectOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RegisteringAndUnregisteringRelativePointerWorks" id="cpptest.provider://RelativePointer_test/2::RegisteringAndUnregisteringRelativePointerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnRegisteringOneRelativePointerWorks" id="cpptest.provider://RelativePointer_test/2::UnRegisteringOneRelativePointerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnregisteringAllRelativePointerWorks" id="cpptest.provider://RelativePointer_test/2::UnregisteringAllRelativePointerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RegisterPtrWithIdFailsWhenTooLarge" id="cpptest.provider://RelativePointer_test/2::RegisterPtrWithIdFailsWhenTooLarge" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BasePointerIsSameAfterRegistering" id="cpptest.provider://RelativePointer_test/2::BasePointerIsSameAfterRegistering" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOperatorResultsInSameBasePointerIdAndOffset" id="cpptest.provider://RelativePointer_test/2::AssignmentOperatorResultsInSameBasePointerIdAndOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DereferencingOperatorResultsInSameValue" id="cpptest.provider://RelativePointer_test/2::DereferencingOperatorResultsInSameValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MemoryRemappingWorks" id="cpptest.provider://RelativePointer_test/2::MemoryRemappingWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DefaultConstructedRelativePtrIsNull" id="cpptest.provider://RelativePointer_test/2::DefaultConstructedRelativePtrIsNull" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="RelativePointerData_test" id="cpptest.provider://RelativePointerData_test" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="DefaultConstructedResultsInNullptrIdAndOffset" id="cpptest.provider://RelativePointerData_test::DefaultConstructedResultsInNullptrIdAndOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DefaultConstructedResultsInLogicallyNullptr" id="cpptest.provider://RelativePointerData_test::DefaultConstructedResultsInLogicallyNullptr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResetOnDefaultConstructedResultsInLogicallyNullptr" id="cpptest.provider://RelativePointerData_test::ResetOnDefaultConstructedResultsInLogicallyNullptr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructedWithNonZeroIdAndOffsetResultsInSameIdAndOffset" id="cpptest.provider://RelativePointerData_test::ConstructedWithNonZeroIdAndOffsetResultsInSameIdAndOffset" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructedWithZeroIdAndOffsetResultsNotInLogicallyNullptr" id="cpptest.provider://RelativePointerData_test::ConstructedWithZeroIdAndOffsetResultsNotInLogicallyNullptr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructedWithNonZeroIdAndOffsetResultsNotInLogicallyNullptr" id="cpptest.provider://RelativePointerData_test::ConstructedWithNonZeroIdAndOffsetResultsNotInLogicallyNullptr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructedWithMaxIdAndOffsetResultsNotInLogicallyNullptr" id="cpptest.provider://RelativePointerData_test::ConstructedWithMaxIdAndOffsetResultsNotInLogicallyNullptr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ResetOnConstructedWithNonZeroIdAndOffsetResultsInLogicallyNullptr" id="cpptest.provider://RelativePointerData_test::ResetOnConstructedWithNonZeroIdAndOffsetResultsInLogicallyNullptr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructedWithNullPointerIdResultsLogicallyNullptr" id="cpptest.provider://RelativePointerData_test::ConstructedWithNullPointerIdResultsLogicallyNullptr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructedWithNullPointerOffsetResultsInLogicallyNullptr" id="cpptest.provider://RelativePointerData_test::ConstructedWithNullPointerOffsetResultsInLogicallyNullptr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructedWithNullPointerIdAndOffsetResultsInLogicallyNullptr" id="cpptest.provider://RelativePointerData_test::ConstructedWithNullPointerIdAndOffsetResultsInLogicallyNullptr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ScopeGuard_test" id="cpptest.provider://ScopeGuard_test" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="InitFunctionIsCalledInCtorWhenSet" id="cpptest.provider://ScopeGuard_test::InitFunctionIsCalledInCtorWhenSet" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitFunctionIsCalledInCtorWhenSetWithCleanupFunction" id="cpptest.provider://ScopeGuard_test::InitFunctionIsCalledInCtorWhenSetWithCleanupFunction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CleanupFunctionIsCalledInDtor" id="cpptest.provider://ScopeGuard_test::CleanupFunctionIsCalledInDtor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CleanupFunctionIsCalledInDtorWhenUsingCleanupOnlyCTor" id="cpptest.provider://ScopeGuard_test::CleanupFunctionIsCalledInDtorWhenUsingCleanupOnlyCTor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CleanupFunctionIsCalledInDtorWithEmptyInitFunction" id="cpptest.provider://ScopeGuard_test::CleanupFunctionIsCalledInDtorWithEmptyInitFunction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveCTorDoesNotCallCleanupFunctionOfOrigin" id="cpptest.provider://ScopeGuard_test::MoveCTorDoesNotCallCleanupFunctionOfOrigin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructedDoesCallCleanupFunctionWhenDestroyed" id="cpptest.provider://ScopeGuard_test::MoveConstructedDoesCallCleanupFunctionWhenDestroyed" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentCallsCleanup" id="cpptest.provider://ScopeGuard_test::MoveAssignmentCallsCleanup" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignedCallsCleanupWhenOutOfScope" id="cpptest.provider://ScopeGuard_test::MoveAssignedCallsCleanupWhenOutOfScope" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="UniquePtrTest" id="cpptest.provider://UniquePtrTest" total="15" fail="0" err="0" pass="15" >
                  <Test ln="1" auth="" locRef="" name="CtorWithObjectPtrAndDeleterSetsPtrToObjectAndCallsDeleter" id="cpptest.provider://UniquePtrTest::CtorWithObjectPtrAndDeleterSetsPtrToObjectAndCallsDeleter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CtorUsingMoveWithObjectPtrAndDeleterSetsPtrToObjectAndCallsDeleter" id="cpptest.provider://UniquePtrTest::CtorUsingMoveWithObjectPtrAndDeleterSetsPtrToObjectAndCallsDeleter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentUniquePtrsSetsPtrToObjectAndCallsDeleter" id="cpptest.provider://UniquePtrTest::MoveAssignmentUniquePtrsSetsPtrToObjectAndCallsDeleter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOverwriteAUniquePtrWithAnotherOneAndCallsAnotherDeleterOnMove" id="cpptest.provider://UniquePtrTest::MoveAssignmentOverwriteAUniquePtrWithAnotherOneAndCallsAnotherDeleterOnMove" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessUnderlyingObjectResultsInCorrectValue" id="cpptest.provider://UniquePtrTest::AccessUnderlyingObjectResultsInCorrectValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessUnderlyingObjectViaGetResultsInCorrectValue" id="cpptest.provider://UniquePtrTest::AccessUnderlyingObjectViaGetResultsInCorrectValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReleaseAnObjectResultsInDeleterNotBeingCalled" id="cpptest.provider://UniquePtrTest::ReleaseAnObjectResultsInDeleterNotBeingCalled" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SwapTwoValidUniquePtrsWithDifferentDeletersSucceeds" id="cpptest.provider://UniquePtrTest::SwapTwoValidUniquePtrsWithDifferentDeletersSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SwapUniquePtrWithUniquePtrLeadsToCleanupOfBothInReverseOrder" id="cpptest.provider://UniquePtrTest::SwapUniquePtrWithUniquePtrLeadsToCleanupOfBothInReverseOrder" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareAUniquePtrWithItselfIsTrue" id="cpptest.provider://UniquePtrTest::CompareAUniquePtrWithItselfIsTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareAUniquePtrWithAnotherOneOfAnotherObjectIsFalse" id="cpptest.provider://UniquePtrTest::CompareAUniquePtrWithAnotherOneOfAnotherObjectIsFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NotEqualCompareOfAUniquePtrWithItselfIsFalse" id="cpptest.provider://UniquePtrTest::NotEqualCompareOfAUniquePtrWithItselfIsFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NotEqualCompareOfAUniquePtrWithAnotherOneOfAnotherObjectIsTrue" id="cpptest.provider://UniquePtrTest::NotEqualCompareOfAUniquePtrWithAnotherOneOfAnotherObjectIsTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CanGetUnderlyingPtrFromConstUniquePtr" id="cpptest.provider://UniquePtrTest::CanGetUnderlyingPtrFromConstUniquePtr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CanUseArrowOperatorToAccessObjectInConstUniquePtr" id="cpptest.provider://UniquePtrTest::CanUseArrowOperatorToAccessObjectInConstUniquePtr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="AccessController_test" id="cpptest.provider://AccessController_test" total="7" fail="0" err="0" pass="7" >
                  <Test ln="1" auth="" locRef="" name="writeStandardPermissions" id="cpptest.provider://AccessController_test::writeStandardPermissions" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="writeSpecialUserPermissions" id="cpptest.provider://AccessController_test::writeSpecialUserPermissions" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="writeSpecialGroupPermissions" id="cpptest.provider://AccessController_test::writeSpecialGroupPermissions" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="writeSpecialPermissionsWithID" id="cpptest.provider://AccessController_test::writeSpecialPermissionsWithID" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="addNameInWrongPlace" id="cpptest.provider://AccessController_test::addNameInWrongPlace" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="addManyPermissions" id="cpptest.provider://AccessController_test::addManyPermissions" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="addStrangeNames" id="cpptest.provider://AccessController_test::addStrangeNames" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="File_test" id="cpptest.provider://File_test" total="24" fail="0" err="0" pass="24" >
                  <Test ln="1" auth="" locRef="" name="CreatingFileWorks" id="cpptest.provider://File_test::CreatingFileWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingWithPermissionsWorks" id="cpptest.provider://File_test::CreatingWithPermissionsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PurgeAndCreateRemovesExistingFile" id="cpptest.provider://File_test::PurgeAndCreateRemovesExistingFile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingExclusivelyTwiceFails" id="cpptest.provider://File_test::CreatingExclusivelyTwiceFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpeningExistingFileWorks" id="cpptest.provider://File_test::OpeningExistingFileWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpeningNonExistingFileFails" id="cpptest.provider://File_test::OpeningNonExistingFileFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenOrCreateCreatesNonExistingFile" id="cpptest.provider://File_test::OpenOrCreateCreatesNonExistingFile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenOrCreateOpensExistingFile" id="cpptest.provider://File_test::OpenOrCreateOpensExistingFile" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenFileForReadingWithInsufficientPermissionFails" id="cpptest.provider://File_test::OpenFileForReadingWithInsufficientPermissionFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenFileForReadWriteWithInsufficientPermissionFails" id="cpptest.provider://File_test::OpenFileForReadWriteWithInsufficientPermissionFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AfterCreationTheFileExists" id="cpptest.provider://File_test::AfterCreationTheFileExists" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveReturnsTrueWhenFileExist" id="cpptest.provider://File_test::RemoveReturnsTrueWhenFileExist" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RemoveReturnsFalseWhenFileDoesNotExist" id="cpptest.provider://File_test::RemoveReturnsFalseWhenFileDoesNotExist" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReadAndWriteToFileWorks" id="cpptest.provider://File_test::ReadAndWriteToFileWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReadingOfAWriteOnlyFileFails" id="cpptest.provider://File_test::ReadingOfAWriteOnlyFileFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReadingWithSmallerBufferSizeWorks" id="cpptest.provider://File_test::ReadingWithSmallerBufferSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReadingWithLargerBufferSizeWorks" id="cpptest.provider://File_test::ReadingWithLargerBufferSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReadingWithOffsetWorks" id="cpptest.provider://File_test::ReadingWithOffsetWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReadingWithOutOfBoundsOffsetReadsNothing" id="cpptest.provider://File_test::ReadingWithOutOfBoundsOffsetReadsNothing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WritingIntoAReadOnlyFileFails" id="cpptest.provider://File_test::WritingIntoAReadOnlyFileFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WriteAtOverridesContent" id="cpptest.provider://File_test::WriteAtOverridesContent" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WriteWithOutOfBoundsOffsetAddsZerosInBetween" id="cpptest.provider://File_test::WriteWithOutOfBoundsOffsetAddsZerosInBetween" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructedFileWorks" id="cpptest.provider://File_test::MoveConstructedFileWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignedFileWorks" id="cpptest.provider://File_test::MoveAssignedFileWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="FileLock_test" id="cpptest.provider://FileLock_test" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="EmptyNameLeadsToError" id="cpptest.provider://FileLock_test::EmptyNameLeadsToError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InvalidNameLeadsToError" id="cpptest.provider://FileLock_test::InvalidNameLeadsToError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InvalidPathLeadsToError" id="cpptest.provider://FileLock_test::InvalidPathLeadsToError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxStringWorks" id="cpptest.provider://FileLock_test::MaxStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SecondLockWithDifferentNameWorks" id="cpptest.provider://FileLock_test::SecondLockWithDifferentNameWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LockAndReleaseWorks" id="cpptest.provider://FileLock_test::LockAndReleaseWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingSameFileLockAgainFails" id="cpptest.provider://FileLock_test::CreatingSameFileLockAgainFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveCtorTransfersLock" id="cpptest.provider://FileLock_test::MoveCtorTransfersLock" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignTransfersLock" id="cpptest.provider://FileLock_test::MoveAssignTransfersLock" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="Mutex_test" id="cpptest.provider://Mutex_test" total="14" fail="0" err="0" pass="14" >
                  <Test ln="1" auth="" locRef="" name="TryLockAndUnlockWithNonRecursiveMutexWorks" id="cpptest.provider://Mutex_test::TryLockAndUnlockWithNonRecursiveMutexWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TryLockWithNonRecursiveMutexReturnsFailsWhenLocked" id="cpptest.provider://Mutex_test::TryLockWithNonRecursiveMutexReturnsFailsWhenLocked" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LockAndUnlockWithNonRecursiveMutexWorks" id="cpptest.provider://Mutex_test::LockAndUnlockWithNonRecursiveMutexWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RepeatedLockAndUnlockWithNonRecursiveMutexWorks" id="cpptest.provider://Mutex_test::RepeatedLockAndUnlockWithNonRecursiveMutexWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TryLockReturnsFalseWhenMutexLockedInOtherThreadNonRecursiveMutex" id="cpptest.provider://Mutex_test::TryLockReturnsFalseWhenMutexLockedInOtherThreadNonRecursiveMutex" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TryLockReturnsFalseWhenMutexLockedInOtherThreadRecursiveMutex" id="cpptest.provider://Mutex_test::TryLockReturnsFalseWhenMutexLockedInOtherThreadRecursiveMutex" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LockedMutexBlocksNonRecursiveMutex" id="cpptest.provider://Mutex_test::LockedMutexBlocksNonRecursiveMutex" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LockedMutexBlocksRecursiveMutex" id="cpptest.provider://Mutex_test::LockedMutexBlocksRecursiveMutex" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MutexWithDeadlockDetectionsFailsOnDeadlock" id="cpptest.provider://Mutex_test::MutexWithDeadlockDetectionsFailsOnDeadlock" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MutexWithDeadlockDetectionsFailsWhenSameThreadTriesToUnlockItTwice" id="cpptest.provider://Mutex_test::MutexWithDeadlockDetectionsFailsWhenSameThreadTriesToUnlockItTwice" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MutexWithDeadlockDetectionsFailsWhenAnotherThreadTriesToUnlock" id="cpptest.provider://Mutex_test::MutexWithDeadlockDetectionsFailsWhenAnotherThreadTriesToUnlock" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MutexWithOnReleaseWhenLockedBehaviorUnlocksLockedMutexWhenThreadTerminatesAndSetsItIntoInconsistentState" id="cpptest.provider://Mutex_test::MutexWithOnReleaseWhenLockedBehaviorUnlocksLockedMutexWhenThreadTerminatesAndSetsItIntoInconsistentState" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MutexWithStallWhenLockedBehaviorDoesntUnlockMutexWhenThreadTerminates" id="cpptest.provider://Mutex_test::MutexWithStallWhenLockedBehaviorDoesntUnlockMutexWhenThreadTerminates" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializingMutexTwiceResultsInError" id="cpptest.provider://Mutex_test::InitializingMutexTwiceResultsInError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="NamedSemaphoreTest" id="cpptest.provider://NamedSemaphoreTest" total="11" fail="0" err="0" pass="11" >
                  <Test ln="1" auth="" locRef="" name="DefaultInitialValueIsZero" id="cpptest.provider://NamedSemaphoreTest::DefaultInitialValueIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitialValueIsSetOnCreation" id="cpptest.provider://NamedSemaphoreTest::InitialValueIsSetOnCreation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenExistingSemaphoreDoesNotOverrideInitialValue" id="cpptest.provider://NamedSemaphoreTest::OpenExistingSemaphoreDoesNotOverrideInitialValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenExistingSemaphoreWorksWithoutDestroyingItInTheDtor" id="cpptest.provider://NamedSemaphoreTest::OpenExistingSemaphoreWorksWithoutDestroyingItInTheDtor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenNonExistingSemaphoreFails" id="cpptest.provider://NamedSemaphoreTest::OpenNonExistingSemaphoreFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExclusiveCreateFailsWhenSemaphoreAlreadyExists" id="cpptest.provider://NamedSemaphoreTest::ExclusiveCreateFailsWhenSemaphoreAlreadyExists" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SemaphoreWithInvalidNameFails" id="cpptest.provider://NamedSemaphoreTest::SemaphoreWithInvalidNameFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenOrCreateOpensExistingSemaphoreWithoutDestroyingItInTheDtor" id="cpptest.provider://NamedSemaphoreTest::OpenOrCreateOpensExistingSemaphoreWithoutDestroyingItInTheDtor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenOrCreateRemovesSemaphoreWhenItHasTheOwnership" id="cpptest.provider://NamedSemaphoreTest::OpenOrCreateRemovesSemaphoreWhenItHasTheOwnership" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WhenOwningSemaphoreIsClosedBeforeOpenedSemaphoreTheOpenedSemaphoreRemainsUsable" id="cpptest.provider://NamedSemaphoreTest::WhenOwningSemaphoreIsClosedBeforeOpenedSemaphoreTheOpenedSemaphoreRemainsUsable" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PurgeAndCreateCreatesNewSemaphore" id="cpptest.provider://NamedSemaphoreTest::PurgeAndCreateCreatesNewSemaphore" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="PosixCall_test" id="cpptest.provider://PosixCall_test" total="36" fail="0" err="0" pass="36" >
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithSuccessReturnValue_GoodCase" id="cpptest.provider://PosixCall_test::CallingFunctionWithSuccessReturnValue_GoodCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithSuccessReturnValue_BadCase" id="cpptest.provider://PosixCall_test::CallingFunctionWithSuccessReturnValue_BadCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithFailureReturnValue_GoodCase" id="cpptest.provider://PosixCall_test::CallingFunctionWithFailureReturnValue_GoodCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithFailureReturnValue_BadCase" id="cpptest.provider://PosixCall_test::CallingFunctionWithFailureReturnValue_BadCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithSuccessReturnValueAndIgnoredErrno_GoodCase" id="cpptest.provider://PosixCall_test::CallingFunctionWithSuccessReturnValueAndIgnoredErrno_GoodCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithSuccessReturnValueAndIgnoredErrno_BadCase" id="cpptest.provider://PosixCall_test::CallingFunctionWithSuccessReturnValueAndIgnoredErrno_BadCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithFailureReturnValueAndIgnoredErrno_GoodCase" id="cpptest.provider://PosixCall_test::CallingFunctionWithFailureReturnValueAndIgnoredErrno_GoodCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithFailureReturnValueAndIgnoredErrno_BadCase" id="cpptest.provider://PosixCall_test::CallingFunctionWithFailureReturnValueAndIgnoredErrno_BadCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IgnoringMultipleErrnosWorks" id="cpptest.provider://PosixCall_test::IgnoringMultipleErrnosWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IgnoringMultipleErrnosWhereOccurringErrnoIsNotListedFails" id="cpptest.provider://PosixCall_test::IgnoringMultipleErrnosWhereOccurringErrnoIsNotListedFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IgnoringMultipleErrnosWhereOccurringErrnoIsFirstInListSucceeds" id="cpptest.provider://PosixCall_test::IgnoringMultipleErrnosWhereOccurringErrnoIsFirstInListSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IgnoringMultipleErrnosWhereOccurringErrnoIsLastInListSucceeds" id="cpptest.provider://PosixCall_test::IgnoringMultipleErrnosWhereOccurringErrnoIsLastInListSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IgnoringErrnosByMultipleIgnoreErrnosCallsWorksWhenErrnoIsFirst" id="cpptest.provider://PosixCall_test::IgnoringErrnosByMultipleIgnoreErrnosCallsWorksWhenErrnoIsFirst" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IgnoringErrnosByMultipleIgnoreErrnosCallsWorksWhenErrnoIsMiddle" id="cpptest.provider://PosixCall_test::IgnoringErrnosByMultipleIgnoreErrnosCallsWorksWhenErrnoIsMiddle" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IgnoringErrnosByMultipleIgnoreErrnosCallsWorksWhenErrnoIsLast" id="cpptest.provider://PosixCall_test::IgnoringErrnosByMultipleIgnoreErrnosCallsWorksWhenErrnoIsLast" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IgnoringErrnosByMultipleIgnoreErrnosCallsFails" id="cpptest.provider://PosixCall_test::IgnoringErrnosByMultipleIgnoreErrnosCallsFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuppressErrnoLoggingWithNonPresentErrnoPrintsErrorMessage" id="cpptest.provider://PosixCall_test::SuppressErrnoLoggingWithNonPresentErrnoPrintsErrorMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuppressErrnoLoggingWithPresentErrnoDoesNotPrintErrorMessage" id="cpptest.provider://PosixCall_test::SuppressErrnoLoggingWithPresentErrnoDoesNotPrintErrorMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuppressMultipleErrnoLoggingWithNoPresentErrnoPrintsErrorMessage" id="cpptest.provider://PosixCall_test::SuppressMultipleErrnoLoggingWithNoPresentErrnoPrintsErrorMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuppressMultipleErrnoLoggingWithPresentErrnoDoesNotPrintErrorMessage" id="cpptest.provider://PosixCall_test::SuppressMultipleErrnoLoggingWithPresentErrnoDoesNotPrintErrorMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuppressErrnoLoggingByMultipleCallsWithNonPresentErrnoPrintsErrorMessage" id="cpptest.provider://PosixCall_test::SuppressErrnoLoggingByMultipleCallsWithNonPresentErrnoPrintsErrorMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuppressErrnoLoggingByMultipleCallsWithPresentErrnoDoesNotPrintErrorMessage" id="cpptest.provider://PosixCall_test::SuppressErrnoLoggingByMultipleCallsWithPresentErrnoDoesNotPrintErrorMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuppressErrnoLoggingOfIgnoredErrnoDoesNotPrintErrorMessage" id="cpptest.provider://PosixCall_test::SuppressErrnoLoggingOfIgnoredErrnoDoesNotPrintErrorMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuppressErrnoLoggingOfNotIgnoredErrnoDoesNotPrintErrorMessage" id="cpptest.provider://PosixCall_test::SuppressErrnoLoggingOfNotIgnoredErrnoDoesNotPrintErrorMessage" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="RecallingFunctionWithEintrWorks" id="cpptest.provider://PosixCall_test::RecallingFunctionWithEintrWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FunctionReturnsEINTRTooOftenResultsInFailure" id="cpptest.provider://PosixCall_test::FunctionReturnsEINTRTooOftenResultsInFailure" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithMultipleSuccessReturnValuesWhereGoodValueIsFirst" id="cpptest.provider://PosixCall_test::CallingFunctionWithMultipleSuccessReturnValuesWhereGoodValueIsFirst" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithMultipleSuccessReturnValuesWhereGoodValueIsCenter" id="cpptest.provider://PosixCall_test::CallingFunctionWithMultipleSuccessReturnValuesWhereGoodValueIsCenter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithMultipleSuccessReturnValuesWhereGoodValueIsLast" id="cpptest.provider://PosixCall_test::CallingFunctionWithMultipleSuccessReturnValuesWhereGoodValueIsLast" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithMultipleSuccessReturnValuesWhereGoodValueIsNotPresent" id="cpptest.provider://PosixCall_test::CallingFunctionWithMultipleSuccessReturnValuesWhereGoodValueIsNotPresent" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithMultipleFailureReturnValuesWhereFailureValueIsFirst" id="cpptest.provider://PosixCall_test::CallingFunctionWithMultipleFailureReturnValuesWhereFailureValueIsFirst" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithMultipleFailureReturnValuesWhereFailureValueIsCenter" id="cpptest.provider://PosixCall_test::CallingFunctionWithMultipleFailureReturnValuesWhereFailureValueIsCenter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithMultipleFailureReturnValuesWhereFailureValueIsLast" id="cpptest.provider://PosixCall_test::CallingFunctionWithMultipleFailureReturnValuesWhereFailureValueIsLast" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CallingFunctionWithMultipleFailureReturnValuesWhereFailureValueIsNotPresent" id="cpptest.provider://PosixCall_test::CallingFunctionWithMultipleFailureReturnValuesWhereFailureValueIsNotPresent" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ErrnoIsSetFromReturnValueWhenFunctionHandlesErrnosInReturnValue_GoodCase" id="cpptest.provider://PosixCall_test::ErrnoIsSetFromReturnValueWhenFunctionHandlesErrnosInReturnValue_GoodCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ErrnoIsSetFromReturnValueWhenFunctionHandlesErrnosInReturnValue_BadCase" id="cpptest.provider://PosixCall_test::ErrnoIsSetFromReturnValueWhenFunctionHandlesErrnosInReturnValue_BadCase" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SemaphoreInterfaceTest/0" id="cpptest.provider://SemaphoreInterfaceTest/0" total="14" fail="0" err="0" pass="14" >
                  <Test ln="1" auth="" locRef="" name="InitialValueIsSetCorrect" id="cpptest.provider://SemaphoreInterfaceTest/0::InitialValueIsSetCorrect" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitialValueExceedingMaxSupportedValueFails" id="cpptest.provider://SemaphoreInterfaceTest/0::InitialValueExceedingMaxSupportedValueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PostWithMaxSemaphoreValueLeadsToOverflow" id="cpptest.provider://SemaphoreInterfaceTest/0::PostWithMaxSemaphoreValueLeadsToOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PostIncreasesSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/0::PostIncreasesSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WaitDecreasesSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/0::WaitDecreasesSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulTryWaitDecreasesSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/0::SuccessfulTryWaitDecreasesSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FailingTryWaitDoesNotChangeSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/0::FailingTryWaitDoesNotChangeSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulTimedWaitDecreasesSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/0::SuccessfulTimedWaitDecreasesSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FailingTimedWaitDoesNotChangeSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/0::FailingTimedWaitDoesNotChangeSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TryWaitAfterPostIsSuccessful" id="cpptest.provider://SemaphoreInterfaceTest/0::TryWaitAfterPostIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TryWaitWithNoPostIsNotSuccessful" id="cpptest.provider://SemaphoreInterfaceTest/0::TryWaitWithNoPostIsNotSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WaitValidAfterPostIsNonBlocking" id="cpptest.provider://SemaphoreInterfaceTest/0::WaitValidAfterPostIsNonBlocking" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WaitBlocksAtLeastDefinedSleepTime" id="cpptest.provider://SemaphoreInterfaceTest/0::WaitBlocksAtLeastDefinedSleepTime" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimedWaitBlocksAtLeastDefinedSleepTimeAndSignalsTimeout" id="cpptest.provider://SemaphoreInterfaceTest/0::TimedWaitBlocksAtLeastDefinedSleepTimeAndSignalsTimeout" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SemaphoreInterfaceTest/1" id="cpptest.provider://SemaphoreInterfaceTest/1" total="14" fail="0" err="0" pass="14" >
                  <Test ln="1" auth="" locRef="" name="InitialValueIsSetCorrect" id="cpptest.provider://SemaphoreInterfaceTest/1::InitialValueIsSetCorrect" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitialValueExceedingMaxSupportedValueFails" id="cpptest.provider://SemaphoreInterfaceTest/1::InitialValueExceedingMaxSupportedValueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PostWithMaxSemaphoreValueLeadsToOverflow" id="cpptest.provider://SemaphoreInterfaceTest/1::PostWithMaxSemaphoreValueLeadsToOverflow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PostIncreasesSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/1::PostIncreasesSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WaitDecreasesSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/1::WaitDecreasesSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulTryWaitDecreasesSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/1::SuccessfulTryWaitDecreasesSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FailingTryWaitDoesNotChangeSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/1::FailingTryWaitDoesNotChangeSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulTimedWaitDecreasesSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/1::SuccessfulTimedWaitDecreasesSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FailingTimedWaitDoesNotChangeSemaphoreValue" id="cpptest.provider://SemaphoreInterfaceTest/1::FailingTimedWaitDoesNotChangeSemaphoreValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TryWaitAfterPostIsSuccessful" id="cpptest.provider://SemaphoreInterfaceTest/1::TryWaitAfterPostIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TryWaitWithNoPostIsNotSuccessful" id="cpptest.provider://SemaphoreInterfaceTest/1::TryWaitWithNoPostIsNotSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WaitValidAfterPostIsNonBlocking" id="cpptest.provider://SemaphoreInterfaceTest/1::WaitValidAfterPostIsNonBlocking" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WaitBlocksAtLeastDefinedSleepTime" id="cpptest.provider://SemaphoreInterfaceTest/1::WaitBlocksAtLeastDefinedSleepTime" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimedWaitBlocksAtLeastDefinedSleepTimeAndSignalsTimeout" id="cpptest.provider://SemaphoreInterfaceTest/1::TimedWaitBlocksAtLeastDefinedSleepTimeAndSignalsTimeout" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SharedMemory_Test" id="cpptest.provider://SharedMemory_Test" total="16" fail="0" err="0" pass="16" >
                  <Test ln="1" auth="" locRef="" name="CTorWithValidArguments" id="cpptest.provider://SharedMemory_Test::CTorWithValidArguments" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CTorWithInvalidMessageQueueNames" id="cpptest.provider://SharedMemory_Test::CTorWithInvalidMessageQueueNames" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CTorWithInvalidArguments" id="cpptest.provider://SharedMemory_Test::CTorWithInvalidArguments" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveCTorWithValidValues" id="cpptest.provider://SharedMemory_Test::MoveCTorWithValidValues" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="getHandleOfValidObject" id="cpptest.provider://SharedMemory_Test::getHandleOfValidObject" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnlinkNonExistingShmFails" id="cpptest.provider://SharedMemory_Test::UnlinkNonExistingShmFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnlinkExistingShmWorks" id="cpptest.provider://SharedMemory_Test::UnlinkExistingShmWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExclusiveCreateWorksWhenShmDoesNotExist" id="cpptest.provider://SharedMemory_Test::ExclusiveCreateWorksWhenShmDoesNotExist" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExclusiveCreateFailsWhenShmExists" id="cpptest.provider://SharedMemory_Test::ExclusiveCreateFailsWhenShmExists" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PurgeAndCreateWorksWhenShmDoesNotExist" id="cpptest.provider://SharedMemory_Test::PurgeAndCreateWorksWhenShmDoesNotExist" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="PurgeAndCreateWorksWhenShmExists" id="cpptest.provider://SharedMemory_Test::PurgeAndCreateWorksWhenShmExists" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateOrOpenCreatesShmWhenShmDoesNotExist" id="cpptest.provider://SharedMemory_Test::CreateOrOpenCreatesShmWhenShmDoesNotExist" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateOrOpenOpensShmWhenShmDoesExist" id="cpptest.provider://SharedMemory_Test::CreateOrOpenOpensShmWhenShmDoesExist" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenWorksWhenShmExist" id="cpptest.provider://SharedMemory_Test::OpenWorksWhenShmExist" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenFailsWhenShmDoesNotExist" id="cpptest.provider://SharedMemory_Test::OpenFailsWhenShmDoesNotExist" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenFailsWhenCreatingShmInReadOnlyMode" id="cpptest.provider://SharedMemory_Test::OpenFailsWhenCreatingShmInReadOnlyMode" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SharedMemoryObject_Test" id="cpptest.provider://SharedMemoryObject_Test" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="CTorWithValidArguments" id="cpptest.provider://SharedMemoryObject_Test::CTorWithValidArguments" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CTorOpenNonExistingSharedMemoryObject" id="cpptest.provider://SharedMemoryObject_Test::CTorOpenNonExistingSharedMemoryObject" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AllocateMemoryInSharedMemoryAndReadIt" id="cpptest.provider://SharedMemoryObject_Test::AllocateMemoryInSharedMemoryAndReadIt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenFailsWhenActualMemorySizeIsSmallerThanRequestedSize" id="cpptest.provider://SharedMemoryObject_Test::OpenFailsWhenActualMemorySizeIsSmallerThanRequestedSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenSutMapsAllMemoryIntoProcess" id="cpptest.provider://SharedMemoryObject_Test::OpenSutMapsAllMemoryIntoProcess" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AcquiringOwnerWorks" id="cpptest.provider://SharedMemoryObject_Test::AcquiringOwnerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AcquiringPermissionsWorks" id="cpptest.provider://SharedMemoryObject_Test::AcquiringPermissionsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SettingOwnerWorks" id="cpptest.provider://SharedMemoryObject_Test::SettingOwnerWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SettingPermissionsWorks" id="cpptest.provider://SharedMemoryObject_Test::SettingPermissionsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SignalHandler_test/0" id="cpptest.provider://SignalHandler_test/0" total="4" fail="0" err="0" pass="4" >
                  <Test ln="1" auth="" locRef="" name="RegisteringSignalGuardCallbackWorks" id="cpptest.provider://SignalHandler_test/0::RegisteringSignalGuardCallbackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WhenSignalGuardGoesOutOfScopePreviousStateIsRestored" id="cpptest.provider://SignalHandler_test/0::WhenSignalGuardGoesOutOfScopePreviousStateIsRestored" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructedSignalGuardCallbackWorks" id="cpptest.provider://SignalHandler_test/0::MoveConstructedSignalGuardCallbackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructedSignalGuardRestoresPreviousState" id="cpptest.provider://SignalHandler_test/0::MoveConstructedSignalGuardRestoresPreviousState" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SignalHandler_test/1" id="cpptest.provider://SignalHandler_test/1" total="4" fail="0" err="0" pass="4" >
                  <Test ln="1" auth="" locRef="" name="RegisteringSignalGuardCallbackWorks" id="cpptest.provider://SignalHandler_test/1::RegisteringSignalGuardCallbackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WhenSignalGuardGoesOutOfScopePreviousStateIsRestored" id="cpptest.provider://SignalHandler_test/1::WhenSignalGuardGoesOutOfScopePreviousStateIsRestored" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructedSignalGuardCallbackWorks" id="cpptest.provider://SignalHandler_test/1::MoveConstructedSignalGuardCallbackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructedSignalGuardRestoresPreviousState" id="cpptest.provider://SignalHandler_test/1::MoveConstructedSignalGuardRestoresPreviousState" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SignalHandler_test/2" id="cpptest.provider://SignalHandler_test/2" total="4" fail="0" err="0" pass="4" >
                  <Test ln="1" auth="" locRef="" name="RegisteringSignalGuardCallbackWorks" id="cpptest.provider://SignalHandler_test/2::RegisteringSignalGuardCallbackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WhenSignalGuardGoesOutOfScopePreviousStateIsRestored" id="cpptest.provider://SignalHandler_test/2::WhenSignalGuardGoesOutOfScopePreviousStateIsRestored" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructedSignalGuardCallbackWorks" id="cpptest.provider://SignalHandler_test/2::MoveConstructedSignalGuardCallbackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructedSignalGuardRestoresPreviousState" id="cpptest.provider://SignalHandler_test/2::MoveConstructedSignalGuardRestoresPreviousState" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SignalHandler_test/3" id="cpptest.provider://SignalHandler_test/3" total="4" fail="0" err="0" pass="4" >
                  <Test ln="1" auth="" locRef="" name="RegisteringSignalGuardCallbackWorks" id="cpptest.provider://SignalHandler_test/3::RegisteringSignalGuardCallbackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="WhenSignalGuardGoesOutOfScopePreviousStateIsRestored" id="cpptest.provider://SignalHandler_test/3::WhenSignalGuardGoesOutOfScopePreviousStateIsRestored" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructedSignalGuardCallbackWorks" id="cpptest.provider://SignalHandler_test/3::MoveConstructedSignalGuardCallbackWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructedSignalGuardRestoresPreviousState" id="cpptest.provider://SignalHandler_test/3::MoveConstructedSignalGuardRestoresPreviousState" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="Thread_test" id="cpptest.provider://Thread_test" total="5" fail="0" err="0" pass="5" >
                  <Test ln="1" auth="" locRef="" name="CreateThreadWithNonEmptyCallableSucceeds" id="cpptest.provider://Thread_test::CreateThreadWithNonEmptyCallableSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DtorOfThreadBlocksUntilCallbackHasFinished" id="cpptest.provider://Thread_test::DtorOfThreadBlocksUntilCallbackHasFinished" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SetAndGetWithEmptyThreadNameIsWorking" id="cpptest.provider://Thread_test::SetAndGetWithEmptyThreadNameIsWorking" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SetAndGetWithThreadNameCapacityIsWorking" id="cpptest.provider://Thread_test::SetAndGetWithThreadNameCapacityIsWorking" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SetAndGetSmallStringIsWorking" id="cpptest.provider://Thread_test::SetAndGetSmallStringIsWorking" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="TypesTest" id="cpptest.provider://TypesTest" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="ConvertToOflagFromAccessModeWorks" id="cpptest.provider://TypesTest::ConvertToOflagFromAccessModeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertToProtflagFromAccessModeWorks" id="cpptest.provider://TypesTest::ConvertToProtflagFromAccessModeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertToOflagFromOpenModeWorks" id="cpptest.provider://TypesTest::ConvertToOflagFromOpenModeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertToOflagFromAccessAndOpenModeWorks" id="cpptest.provider://TypesTest::ConvertToOflagFromAccessAndOpenModeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="OpenModeAsStringLiteral" id="cpptest.provider://TypesTest::OpenModeAsStringLiteral" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessModeAsStringLiteral" id="cpptest.provider://TypesTest::AccessModeAsStringLiteral" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="UnnamedSemaphoreTest" id="cpptest.provider://UnnamedSemaphoreTest" total="2" fail="0" err="0" pass="2" >
                  <Test ln="1" auth="" locRef="" name="DefaultInitialValueIsZero" id="cpptest.provider://UnnamedSemaphoreTest::DefaultInitialValueIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitialValueIsSetOnCreation" id="cpptest.provider://UnnamedSemaphoreTest::InitialValueIsSetOnCreation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="algorithm_test" id="cpptest.provider://algorithm_test" total="23" fail="0" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="MaxOfOneElement" id="cpptest.provider://algorithm_test::MaxOfOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxOfTwoElements" id="cpptest.provider://algorithm_test::MaxOfTwoElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxOfManyElements" id="cpptest.provider://algorithm_test::MaxOfManyElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MinOfOneElement" id="cpptest.provider://algorithm_test::MinOfOneElement" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MinOfTwoElements" id="cpptest.provider://algorithm_test::MinOfTwoElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MinOfManyElements" id="cpptest.provider://algorithm_test::MinOfManyElements" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DoesContainValue_ValueListOfZeroDoesNotContainValue" id="cpptest.provider://algorithm_test::DoesContainValue_ValueListOfZeroDoesNotContainValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DoesContainValue_ValueListOfOneDoesNotContainValue" id="cpptest.provider://algorithm_test::DoesContainValue_ValueListOfOneDoesNotContainValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DoesContainValue_ValueListOfOneDoesContainValue" id="cpptest.provider://algorithm_test::DoesContainValue_ValueListOfOneDoesContainValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DoesContainValue_ValueListOfMultipleValuesDoesNotContainValue" id="cpptest.provider://algorithm_test::DoesContainValue_ValueListOfMultipleValuesDoesNotContainValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DoesContainValue_ValueListOfMultipleValuesDoesContainValueAtFront" id="cpptest.provider://algorithm_test::DoesContainValue_ValueListOfMultipleValuesDoesContainValueAtFront" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DoesContainValue_ValueListOfMultipleValuesDoesContainValueInTheMiddle" id="cpptest.provider://algorithm_test::DoesContainValue_ValueListOfMultipleValuesDoesContainValueInTheMiddle" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DoesContainValue_ValueListOfMultipleValuesDoesContainValueAtEnd" id="cpptest.provider://algorithm_test::DoesContainValue_ValueListOfMultipleValuesDoesContainValueAtEnd" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BestFittingTypeUsesUint8WhenValueSmaller256" id="cpptest.provider://algorithm_test::BestFittingTypeUsesUint8WhenValueSmaller256" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BestFittingTypeUsesUint8WhenValueEqualTo255" id="cpptest.provider://algorithm_test::BestFittingTypeUsesUint8WhenValueEqualTo255" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BestFittingTypeUsesUint16WhenValueEqualTo256" id="cpptest.provider://algorithm_test::BestFittingTypeUsesUint16WhenValueEqualTo256" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BestFittingTypeUsesUint16WhenValueBetween256And65535" id="cpptest.provider://algorithm_test::BestFittingTypeUsesUint16WhenValueBetween256And65535" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BestFittingTypeUsesUint16WhenValueEqualTo65535" id="cpptest.provider://algorithm_test::BestFittingTypeUsesUint16WhenValueEqualTo65535" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BestFittingTypeUsesUint32WhenValueEqualTo65536" id="cpptest.provider://algorithm_test::BestFittingTypeUsesUint32WhenValueEqualTo65536" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BestFittingTypeUsesUint32WhenValueBetween2p16And2p32" id="cpptest.provider://algorithm_test::BestFittingTypeUsesUint32WhenValueBetween2p16And2p32" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BestFittingTypeUsesUint32WhenValueEqualTo4294967295" id="cpptest.provider://algorithm_test::BestFittingTypeUsesUint32WhenValueEqualTo4294967295" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BestFittingTypeUsesUint64WhenValueEqualTo4294967296" id="cpptest.provider://algorithm_test::BestFittingTypeUsesUint64WhenValueEqualTo4294967296" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BestFittingTypeUsesUint32WhenValueGreater2p32" id="cpptest.provider://algorithm_test::BestFittingTypeUsesUint32WhenValueGreater2p32" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="algorithm_test_isPowerOfTwo/0" id="cpptest.provider://algorithm_test_isPowerOfTwo/0" total="7" fail="0" err="0" pass="7" >
                  <Test ln="1" auth="" locRef="" name="OneIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/0::OneIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/0::TwoIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FourIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/0::FourIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxPossiblePowerOfTwoForTypeIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/0::MaxPossiblePowerOfTwoForTypeIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ZeroIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/0::ZeroIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FourtyTwoIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/0::FourtyTwoIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxValueForTypeIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/0::MaxValueForTypeIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="algorithm_test_isPowerOfTwo/1" id="cpptest.provider://algorithm_test_isPowerOfTwo/1" total="7" fail="0" err="0" pass="7" >
                  <Test ln="1" auth="" locRef="" name="OneIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/1::OneIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/1::TwoIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FourIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/1::FourIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxPossiblePowerOfTwoForTypeIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/1::MaxPossiblePowerOfTwoForTypeIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ZeroIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/1::ZeroIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FourtyTwoIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/1::FourtyTwoIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxValueForTypeIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/1::MaxValueForTypeIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="algorithm_test_isPowerOfTwo/2" id="cpptest.provider://algorithm_test_isPowerOfTwo/2" total="7" fail="0" err="0" pass="7" >
                  <Test ln="1" auth="" locRef="" name="OneIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/2::OneIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/2::TwoIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FourIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/2::FourIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxPossiblePowerOfTwoForTypeIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/2::MaxPossiblePowerOfTwoForTypeIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ZeroIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/2::ZeroIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FourtyTwoIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/2::FourtyTwoIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxValueForTypeIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/2::MaxValueForTypeIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="algorithm_test_isPowerOfTwo/3" id="cpptest.provider://algorithm_test_isPowerOfTwo/3" total="7" fail="0" err="0" pass="7" >
                  <Test ln="1" auth="" locRef="" name="OneIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/3::OneIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/3::TwoIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FourIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/3::FourIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxPossiblePowerOfTwoForTypeIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/3::MaxPossiblePowerOfTwoForTypeIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ZeroIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/3::ZeroIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FourtyTwoIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/3::FourtyTwoIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxValueForTypeIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/3::MaxValueForTypeIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="algorithm_test_isPowerOfTwo/4" id="cpptest.provider://algorithm_test_isPowerOfTwo/4" total="7" fail="0" err="0" pass="7" >
                  <Test ln="1" auth="" locRef="" name="OneIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/4::OneIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/4::TwoIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FourIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/4::FourIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxPossiblePowerOfTwoForTypeIsPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/4::MaxPossiblePowerOfTwoForTypeIsPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ZeroIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/4::ZeroIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FourtyTwoIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/4::FourtyTwoIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MaxValueForTypeIsNotPowerOfTwo" id="cpptest.provider://algorithm_test_isPowerOfTwo/4::MaxValueForTypeIsNotPowerOfTwo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="Size_test" id="cpptest.provider://Size_test" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="ArrayCapacityReturnsCorrectValues" id="cpptest.provider://Size_test::ArrayCapacityReturnsCorrectValues" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="TypeTraitsTest" id="cpptest.provider://TypeTraitsTest" total="28" fail="0" err="0" pass="28" >
                  <Test ln="1" auth="" locRef="" name="IsInvocableResolvesToTrue" id="cpptest.provider://TypeTraitsTest::IsInvocableResolvesToTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IsInvocableResolvesToFalse" id="cpptest.provider://TypeTraitsTest::IsInvocableResolvesToFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IsInvocableRResolvesToTrue" id="cpptest.provider://TypeTraitsTest::IsInvocableRResolvesToTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IsInvocableRResolvesToFalse" id="cpptest.provider://TypeTraitsTest::IsInvocableRResolvesToFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NoTypeAsMemberIsFalse" id="cpptest.provider://TypeTraitsTest::NoTypeAsMemberIsFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MyTypeAsMemberIsTrue" id="cpptest.provider://TypeTraitsTest::MyTypeAsMemberIsTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddConstConditionallyAddsConstIfConditionTypeIsConst" id="cpptest.provider://TypeTraitsTest::AddConstConditionallyAddsConstIfConditionTypeIsConst" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddConstConditionallyDoesNotAddsConstIfConditionTypeIsNotConst" id="cpptest.provider://TypeTraitsTest::AddConstConditionallyDoesNotAddsConstIfConditionTypeIsNotConst" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddConstConditionallyTypeAliasWorks" id="cpptest.provider://TypeTraitsTest::AddConstConditionallyTypeAliasWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AlwaysFalseWorks" id="cpptest.provider://TypeTraitsTest::AlwaysFalseWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IsFunctionPointerResolvesToTrue" id="cpptest.provider://TypeTraitsTest::IsFunctionPointerResolvesToTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="IsFunctionPointerResolvesToFalse" id="cpptest.provider://TypeTraitsTest::IsFunctionPointerResolvesToFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_StringTypeTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_StringTypeTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_int8_tTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_int8_tTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_int16_tTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_int16_tTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_int32_tTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_int32_tTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_int64_tTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_int64_tTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_uint8_tTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_uint8_tTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_uint16_tTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_uint16_tTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_uint32_tTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_uint32_tTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_uint64_tTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_uint64_tTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_boolTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_boolTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_charTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_charTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_floatTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_floatTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_doubleTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_doubleTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TypeInfo_long_doubleTranslatesCorrectly" id="cpptest.provider://TypeTraitsTest::TypeInfo_long_doubleTranslatesCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NonCharArraysAreIdentifiedCorrectly" id="cpptest.provider://TypeTraitsTest::NonCharArraysAreIdentifiedCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CharArraysAreIdentifiedCorrectly" id="cpptest.provider://TypeTraitsTest::CharArraysAreIdentifiedCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="ConsoleLogger_test" id="cpptest.provider://ConsoleLogger_test" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="SettingTheLogLevelWorks" id="cpptest.provider://ConsoleLogger_test::SettingTheLogLevelWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="LoggingLogLevelThreshold_test" id="cpptest.provider://LoggingLogLevelThreshold_test" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="LogLevel" id="cpptest.provider://LoggingLogLevelThreshold_test::LogLevel" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStream_test" id="cpptest.provider://IoxLogStream_test" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="CTorDelegatesParameterToLogger" id="cpptest.provider://IoxLogStream_test::CTorDelegatesParameterToLogger" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnnamedTemporaryLogStreamObject" id="cpptest.provider://IoxLogStream_test::UnnamedTemporaryLogStreamObject" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LocalLogStreamObject" id="cpptest.provider://IoxLogStream_test::LocalLogStreamObject" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorCStyleString" id="cpptest.provider://IoxLogStream_test::StreamOperatorCStyleString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorStdString" id="cpptest.provider://IoxLogStream_test::StreamOperatorStdString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogLevel" id="cpptest.provider://IoxLogStream_test::StreamOperatorLogLevel" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexOctBinIntegral_test/0" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/0" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/0::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/0::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/0::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/0::StreamOperatorLogOct_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/0::StreamOperatorLogOct_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/0::StreamOperatorLogOct_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexOctBinIntegral_test/1" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/1" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/1::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/1::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/1::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/1::StreamOperatorLogOct_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/1::StreamOperatorLogOct_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/1::StreamOperatorLogOct_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexOctBinIntegral_test/2" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/2" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/2::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/2::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/2::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/2::StreamOperatorLogOct_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/2::StreamOperatorLogOct_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/2::StreamOperatorLogOct_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexOctBinIntegral_test/3" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/3" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/3::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/3::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/3::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/3::StreamOperatorLogOct_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/3::StreamOperatorLogOct_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/3::StreamOperatorLogOct_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexOctBinIntegral_test/4" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/4" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/4::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/4::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/4::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/4::StreamOperatorLogOct_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/4::StreamOperatorLogOct_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/4::StreamOperatorLogOct_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexOctBinIntegral_test/5" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/5" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/5::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/5::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/5::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/5::StreamOperatorLogOct_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/5::StreamOperatorLogOct_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/5::StreamOperatorLogOct_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexOctBinIntegral_test/6" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/6" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/6::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/6::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/6::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/6::StreamOperatorLogOct_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/6::StreamOperatorLogOct_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/6::StreamOperatorLogOct_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexOctBinIntegral_test/7" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/7" total="6" fail="0" err="0" pass="6" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/7::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/7::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/7::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueLow" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/7::StreamOperatorLogOct_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMin" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/7::StreamOperatorLogOct_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogOct_ValueMax" id="cpptest.provider://IoxLogStreamHexOctBinIntegral_test/7::StreamOperatorLogOct_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexFloatingPoint_test/0" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/0" total="3" fail="0" err="0" pass="3" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/0::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/0::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/0::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexFloatingPoint_test/1" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/1" total="3" fail="0" err="0" pass="3" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/1::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/1::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/1::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamHexFloatingPoint_test/2" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/2" total="3" fail="0" err="0" pass="3" >
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueLow" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/2::StreamOperatorLogHex_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMin" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/2::StreamOperatorLogHex_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperatorLogHex_ValueMax" id="cpptest.provider://IoxLogStreamHexFloatingPoint_test/2::StreamOperatorLogHex_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/0" id="cpptest.provider://IoxLogStreamArithmetic_test/0" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/0::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/0::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/0::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/0::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/0::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/0::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/0::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/0::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/0::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/1" id="cpptest.provider://IoxLogStreamArithmetic_test/1" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/1::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/1::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/1::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/1::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/1::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/1::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/1::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/1::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/1::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/2" id="cpptest.provider://IoxLogStreamArithmetic_test/2" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/2::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/2::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/2::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/2::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/2::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/2::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/2::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/2::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/2::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/3" id="cpptest.provider://IoxLogStreamArithmetic_test/3" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/3::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/3::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/3::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/3::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/3::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/3::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/3::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/3::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/3::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/4" id="cpptest.provider://IoxLogStreamArithmetic_test/4" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/4::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/4::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/4::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/4::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/4::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/4::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/4::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/4::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/4::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/5" id="cpptest.provider://IoxLogStreamArithmetic_test/5" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/5::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/5::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/5::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/5::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/5::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/5::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/5::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/5::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/5::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/6" id="cpptest.provider://IoxLogStreamArithmetic_test/6" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/6::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/6::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/6::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/6::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/6::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/6::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/6::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/6::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/6::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/7" id="cpptest.provider://IoxLogStreamArithmetic_test/7" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/7::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/7::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/7::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/7::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/7::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/7::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/7::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/7::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/7::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/8" id="cpptest.provider://IoxLogStreamArithmetic_test/8" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/8::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/8::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/8::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/8::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/8::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/8::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/8::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/8::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/8::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/9" id="cpptest.provider://IoxLogStreamArithmetic_test/9" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/9::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/9::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/9::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/9::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/9::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/9::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/9::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/9::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/9::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/10" id="cpptest.provider://IoxLogStreamArithmetic_test/10" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/10::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/10::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/10::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/10::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/10::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/10::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/10::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/10::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/10::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="IoxLogStreamArithmetic_test/11" id="cpptest.provider://IoxLogStreamArithmetic_test/11" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/11::StreamOperator_ValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/11::StreamOperator_ValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/11::StreamOperator_ValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/11::StreamOperator_ConstValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/11::StreamOperator_ConstValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/11::StreamOperator_ConstValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueLow" id="cpptest.provider://IoxLogStreamArithmetic_test/11::StreamOperator_ConstexprValueLow" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMin" id="cpptest.provider://IoxLogStreamArithmetic_test/11::StreamOperator_ConstexprValueMin" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StreamOperator_ConstexprValueMax" id="cpptest.provider://IoxLogStreamArithmetic_test/11::StreamOperator_ConstexprValueMax" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="AdaptiveWaitTest" id="cpptest.provider://AdaptiveWaitTest" total="3" fail="0" err="0" pass="3" >
                  <Test ln="1" auth="" locRef="" name="repeatCallingWaitUntilItSaturatesTakesAtLeastCorrectAmountOfTime" id="cpptest.provider://AdaptiveWaitTest::repeatCallingWaitUntilItSaturatesTakesAtLeastCorrectAmountOfTime" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="waitWaitsAtLeastFINAL_WAITING_TIMEafterINITIAL_REPETITIONS" id="cpptest.provider://AdaptiveWaitTest::waitWaitsAtLeastFINAL_WAITING_TIMEafterINITIAL_REPETITIONS" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="wait_loopWaitsAtLeastAsLongAsTheConditionsReturnsTrue" id="cpptest.provider://AdaptiveWaitTest::wait_loopWaitsAtLeastAsLongAsTheConditionsReturnsTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="DeadlineTimer_test" id="cpptest.provider://DeadlineTimer_test" total="9" fail="0" err="0" pass="9" >
                  <Test ln="1" auth="" locRef="" name="TimingTest_ZeroTimeoutTest" id="cpptest.provider://DeadlineTimer_test::TimingTest_ZeroTimeoutTest" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_DurationOfNonZeroIsExpiresAfterTimeout" id="cpptest.provider://DeadlineTimer_test::TimingTest_DurationOfNonZeroIsExpiresAfterTimeout" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_ResetWithDurationIsExpired" id="cpptest.provider://DeadlineTimer_test::TimingTest_ResetWithDurationIsExpired" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_ResetWhenNotExpiredIsStillNotExpired" id="cpptest.provider://DeadlineTimer_test::TimingTest_ResetWhenNotExpiredIsStillNotExpired" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_ResetAfterBeingExpiredIsNotExpired" id="cpptest.provider://DeadlineTimer_test::TimingTest_ResetAfterBeingExpiredIsNotExpired" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_ResetWithCustomizedTimeAfterBeingExpiredIsNotExpired" id="cpptest.provider://DeadlineTimer_test::TimingTest_ResetWithCustomizedTimeAfterBeingExpiredIsNotExpired" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_ResetWithCustomizedTimeAfterBeingExpiredIsExpired" id="cpptest.provider://DeadlineTimer_test::TimingTest_ResetWithCustomizedTimeAfterBeingExpiredIsExpired" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_RemainingTimeCheckIfExpired" id="cpptest.provider://DeadlineTimer_test::TimingTest_RemainingTimeCheckIfExpired" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_RemainingTimeCheckIfNotExpired" id="cpptest.provider://DeadlineTimer_test::TimingTest_RemainingTimeCheckIfNotExpired" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="Duration_test" id="cpptest.provider://Duration_test" total="192" fail="0" err="0" pass="192" >
                  <Test ln="1" auth="" locRef="" name="ConversionConstants" id="cpptest.provider://Duration_test::ConversionConstants" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructDurationWithZeroTime" id="cpptest.provider://Duration_test::ConstructDurationWithZeroTime" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructDurationWithResultOfLessNanosecondsThanOneSecond" id="cpptest.provider://Duration_test::ConstructDurationWithResultOfLessNanosecondsThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructDurationWithNanosecondsLessThanOneSecond" id="cpptest.provider://Duration_test::ConstructDurationWithNanosecondsLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructDurationWithNanosecondsEqualToOneSecond" id="cpptest.provider://Duration_test::ConstructDurationWithNanosecondsEqualToOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructDurationWithNanosecondsMoreThanOneSecond" id="cpptest.provider://Duration_test::ConstructDurationWithNanosecondsMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructDurationWithNanosecondsMaxValue" id="cpptest.provider://Duration_test::ConstructDurationWithNanosecondsMaxValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructDurationWithSecondsAndNanosecondsMaxValues" id="cpptest.provider://Duration_test::ConstructDurationWithSecondsAndNanosecondsMaxValues" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructDurationWithOneNanosecondResultsNotInZeroNanoseconds" id="cpptest.provider://Duration_test::ConstructDurationWithOneNanosecondResultsNotInZeroNanoseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromTimespecWithZeroValue" id="cpptest.provider://Duration_test::ConstructFromTimespecWithZeroValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromTimespecWithValueLessThanOneSecond" id="cpptest.provider://Duration_test::ConstructFromTimespecWithValueLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromTimespecWithValueMoreThanOneSecond" id="cpptest.provider://Duration_test::ConstructFromTimespecWithValueMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromTimespecWithMaxValue" id="cpptest.provider://Duration_test::ConstructFromTimespecWithMaxValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromITimerspecWithZeroValue" id="cpptest.provider://Duration_test::ConstructFromITimerspecWithZeroValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromITimerspecWithValueLessThanOneSecond" id="cpptest.provider://Duration_test::ConstructFromITimerspecWithValueLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromITimerspecWithValueMoreThanOneSecond" id="cpptest.provider://Duration_test::ConstructFromITimerspecWithValueMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromITimerspecWithMaxValue" id="cpptest.provider://Duration_test::ConstructFromITimerspecWithMaxValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromTimevalWithZeroValue" id="cpptest.provider://Duration_test::ConstructFromTimevalWithZeroValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromTimevalWithValueLessThanOneSecond" id="cpptest.provider://Duration_test::ConstructFromTimevalWithValueLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromTimevalWithValueMoreThanOneSecond" id="cpptest.provider://Duration_test::ConstructFromTimevalWithValueMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstructFromTimevalWithMaxValue" id="cpptest.provider://Duration_test::ConstructFromTimevalWithMaxValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromDaysLiteral" id="cpptest.provider://Duration_test::CreateDurationFromDaysLiteral" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromHoursLiteral" id="cpptest.provider://Duration_test::CreateDurationFromHoursLiteral" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMinutesLiteral" id="cpptest.provider://Duration_test::CreateDurationFromMinutesLiteral" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromSecondsLiteral" id="cpptest.provider://Duration_test::CreateDurationFromSecondsLiteral" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMillisecondsLiteral" id="cpptest.provider://Duration_test::CreateDurationFromMillisecondsLiteral" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMicrosecondsLiteral" id="cpptest.provider://Duration_test::CreateDurationFromMicrosecondsLiteral" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromNanosecondsLiteral" id="cpptest.provider://Duration_test::CreateDurationFromNanosecondsLiteral" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromDaysFunctionWithZeroDays" id="cpptest.provider://Duration_test::CreateDurationFromDaysFunctionWithZeroDays" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromDaysFunctionWithMultipleDays" id="cpptest.provider://Duration_test::CreateDurationFromDaysFunctionWithMultipleDays" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromDaysFunctionWithDaysResultsNotYetInSaturation" id="cpptest.provider://Duration_test::CreateDurationFromDaysFunctionWithDaysResultsNotYetInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromDaysFunctionWithMaxDaysResultsInSaturation" id="cpptest.provider://Duration_test::CreateDurationFromDaysFunctionWithMaxDaysResultsInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromDaysFunctionWithNegativeValuesIsZero" id="cpptest.provider://Duration_test::CreateDurationFromDaysFunctionWithNegativeValuesIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromHoursFunctionWithZeroHours" id="cpptest.provider://Duration_test::CreateDurationFromHoursFunctionWithZeroHours" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromHoursFunctionWithMultipleHours" id="cpptest.provider://Duration_test::CreateDurationFromHoursFunctionWithMultipleHours" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromHoursFunctionWithHoursResultsNotYetInSaturation" id="cpptest.provider://Duration_test::CreateDurationFromHoursFunctionWithHoursResultsNotYetInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromHoursFunctionWithMaxHoursResultsInSaturation" id="cpptest.provider://Duration_test::CreateDurationFromHoursFunctionWithMaxHoursResultsInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromHoursFunctionWithNegativeValueIsZero" id="cpptest.provider://Duration_test::CreateDurationFromHoursFunctionWithNegativeValueIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMinutesFunctionWithZeroMinuts" id="cpptest.provider://Duration_test::CreateDurationFromMinutesFunctionWithZeroMinuts" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMinutesFunctionWithMultipleMinutes" id="cpptest.provider://Duration_test::CreateDurationFromMinutesFunctionWithMultipleMinutes" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMinutesFunctionWithMinutesResultsNotYetInSaturation" id="cpptest.provider://Duration_test::CreateDurationFromMinutesFunctionWithMinutesResultsNotYetInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMinutesFunctionWithMaxMinutesResultsInSaturation" id="cpptest.provider://Duration_test::CreateDurationFromMinutesFunctionWithMaxMinutesResultsInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMinutesFunctionWithNegativeValueIsZero" id="cpptest.provider://Duration_test::CreateDurationFromMinutesFunctionWithNegativeValueIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromSecondsFunctionWithZeroSeconds" id="cpptest.provider://Duration_test::CreateDurationFromSecondsFunctionWithZeroSeconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromSecondsFunction" id="cpptest.provider://Duration_test::CreateDurationFromSecondsFunction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromSecondsFunctionWithMaxSeconds" id="cpptest.provider://Duration_test::CreateDurationFromSecondsFunctionWithMaxSeconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromSecondsFunctionWithNegativeValueIsZero" id="cpptest.provider://Duration_test::CreateDurationFromSecondsFunctionWithNegativeValueIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMillisecondsFunctionWithZeroMilliseconds" id="cpptest.provider://Duration_test::CreateDurationFromMillisecondsFunctionWithZeroMilliseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMillisecondsFunctionWithMultipleMilliseconds" id="cpptest.provider://Duration_test::CreateDurationFromMillisecondsFunctionWithMultipleMilliseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMillisecondsFunctionWithMaxMilliseconds" id="cpptest.provider://Duration_test::CreateDurationFromMillisecondsFunctionWithMaxMilliseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMillisecondsFunctionWithNegativeValueIsZero" id="cpptest.provider://Duration_test::CreateDurationFromMillisecondsFunctionWithNegativeValueIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMicrosecondsFunctionWithZeroMicroseconds" id="cpptest.provider://Duration_test::CreateDurationFromMicrosecondsFunctionWithZeroMicroseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMicrosecondsFunctionWithMultipleMicroseconds" id="cpptest.provider://Duration_test::CreateDurationFromMicrosecondsFunctionWithMultipleMicroseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMicrosecondsFunctionWithMaxMicroseconds" id="cpptest.provider://Duration_test::CreateDurationFromMicrosecondsFunctionWithMaxMicroseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromMicrosecondsFunctionWithNegativeValueIsZero" id="cpptest.provider://Duration_test::CreateDurationFromMicrosecondsFunctionWithNegativeValueIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromNanosecondsFunctionWithZeroNanoseconds" id="cpptest.provider://Duration_test::CreateDurationFromNanosecondsFunctionWithZeroNanoseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromNanosecondsFunctionWithMultipleNanoseconds" id="cpptest.provider://Duration_test::CreateDurationFromNanosecondsFunctionWithMultipleNanoseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromNanosecondsFunction" id="cpptest.provider://Duration_test::CreateDurationFromNanosecondsFunction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateDurationFromNanosecondsFunctionWithNegativeValueIsZero" id="cpptest.provider://Duration_test::CreateDurationFromNanosecondsFunctionWithNegativeValueIsZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertDaysFromZeroDuration" id="cpptest.provider://Duration_test::ConvertDaysFromZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertDaysFromDurationLessThanOneDay" id="cpptest.provider://Duration_test::ConvertDaysFromDurationLessThanOneDay" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertDaysFromDurationMoreThanOneDay" id="cpptest.provider://Duration_test::ConvertDaysFromDurationMoreThanOneDay" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertDaysFromMaxDuration" id="cpptest.provider://Duration_test::ConvertDaysFromMaxDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertHoursFromZeroDuration" id="cpptest.provider://Duration_test::ConvertHoursFromZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertHoursFromDurationLessThanOneHour" id="cpptest.provider://Duration_test::ConvertHoursFromDurationLessThanOneHour" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertHoursFromDurationMoreThanOneHour" id="cpptest.provider://Duration_test::ConvertHoursFromDurationMoreThanOneHour" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertHoursFromMaxDuration" id="cpptest.provider://Duration_test::ConvertHoursFromMaxDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMinutesFromZeroDuration" id="cpptest.provider://Duration_test::ConvertMinutesFromZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMinutesFromDurationLessThanOneMinute" id="cpptest.provider://Duration_test::ConvertMinutesFromDurationLessThanOneMinute" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMinutesFromDurationMoreThanOneMinute" id="cpptest.provider://Duration_test::ConvertMinutesFromDurationMoreThanOneMinute" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMinutesFromMaxDuration" id="cpptest.provider://Duration_test::ConvertMinutesFromMaxDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertSecondsFromZeroDuration" id="cpptest.provider://Duration_test::ConvertSecondsFromZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertSecondsFromDurationLessThanOneSecond" id="cpptest.provider://Duration_test::ConvertSecondsFromDurationLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertSecondsFromDurationMoreThanOneSecond" id="cpptest.provider://Duration_test::ConvertSecondsFromDurationMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertSecondsFromMaxSecondsMinusOne" id="cpptest.provider://Duration_test::ConvertSecondsFromMaxSecondsMinusOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertSecondsFromMaxDuration" id="cpptest.provider://Duration_test::ConvertSecondsFromMaxDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMillisecondsFromZeroDuration" id="cpptest.provider://Duration_test::ConvertMillisecondsFromZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMillisecondsFromDurationLessThanOneMillisecond" id="cpptest.provider://Duration_test::ConvertMillisecondsFromDurationLessThanOneMillisecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMilliecondsFromDurationMoreThanOneMillisecond" id="cpptest.provider://Duration_test::ConvertMilliecondsFromDurationMoreThanOneMillisecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMillisecondsFromDurationResultsNotYetInSaturation" id="cpptest.provider://Duration_test::ConvertMillisecondsFromDurationResultsNotYetInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMillisecondsFromMaxDurationResultsInSaturation" id="cpptest.provider://Duration_test::ConvertMillisecondsFromMaxDurationResultsInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMicrosecondsFromZeroDuration" id="cpptest.provider://Duration_test::ConvertMicrosecondsFromZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMicrosecondsFromDurationLessThanOneMicrosecond" id="cpptest.provider://Duration_test::ConvertMicrosecondsFromDurationLessThanOneMicrosecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMicrosecondsFromDurationMoreThanOneMicrosecond" id="cpptest.provider://Duration_test::ConvertMicrosecondsFromDurationMoreThanOneMicrosecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMicrosecondsFromDurationResultsNotYetInSaturation" id="cpptest.provider://Duration_test::ConvertMicrosecondsFromDurationResultsNotYetInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertMicroecondsFromMaxDurationResultsInSaturation" id="cpptest.provider://Duration_test::ConvertMicroecondsFromMaxDurationResultsInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertNanosecondsFromZeroDuration" id="cpptest.provider://Duration_test::ConvertNanosecondsFromZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertNanosecondsFromDurationOfOneNanosecond" id="cpptest.provider://Duration_test::ConvertNanosecondsFromDurationOfOneNanosecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertNanosecondsFromDurationMultipleNanoseconds" id="cpptest.provider://Duration_test::ConvertNanosecondsFromDurationMultipleNanoseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertNanosecondsFromDurationResultsNotYetInSaturation" id="cpptest.provider://Duration_test::ConvertNanosecondsFromDurationResultsNotYetInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertNanoecondsFromMaxDurationResultsInSaturation" id="cpptest.provider://Duration_test::ConvertNanoecondsFromMaxDurationResultsInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimespecWithNoneReferenceFromZeroDuration" id="cpptest.provider://Duration_test::ConvertTimespecWithNoneReferenceFromZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimespecWithNoneReferenceFromDurationLessThanOneSecond" id="cpptest.provider://Duration_test::ConvertTimespecWithNoneReferenceFromDurationLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimespecWithNoneReferenceFromDurationMoreThanOneSecond" id="cpptest.provider://Duration_test::ConvertTimespecWithNoneReferenceFromDurationMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimespecWithNoneReferenceFromDurationResultsNotYetInSaturation" id="cpptest.provider://Duration_test::ConvertTimespecWithNoneReferenceFromDurationResultsNotYetInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimespecWithNoneReferenceFromMaxDurationResultsInSaturation" id="cpptest.provider://Duration_test::ConvertTimespecWithNoneReferenceFromMaxDurationResultsInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimespecWithMonotonicReference" id="cpptest.provider://Duration_test::ConvertTimespecWithMonotonicReference" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimespecWithMonotonicReferenceFromMaxDurationResultsInSaturation" id="cpptest.provider://Duration_test::ConvertTimespecWithMonotonicReferenceFromMaxDurationResultsInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimespecWithEpochReference" id="cpptest.provider://Duration_test::ConvertTimespecWithEpochReference" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimespecWithEpochReferenceFromMaxDurationResultsInSaturation" id="cpptest.provider://Duration_test::ConvertTimespecWithEpochReferenceFromMaxDurationResultsInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimevalFromZeroDuration" id="cpptest.provider://Duration_test::ConvertTimevalFromZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimevalFromDurationWithLessThanOneSecond" id="cpptest.provider://Duration_test::ConvertTimevalFromDurationWithLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimevalFromDurationWithMoreThanOneSecond" id="cpptest.provider://Duration_test::ConvertTimevalFromDurationWithMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimevalFromDurationResultsNotYetInSaturation" id="cpptest.provider://Duration_test::ConvertTimevalFromDurationResultsNotYetInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertTimevalFromMaxDurationResultsInSaturation" id="cpptest.provider://Duration_test::ConvertTimevalFromMaxDurationResultsInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareTwoEqualDurationsForEquality" id="cpptest.provider://Duration_test::CompareTwoEqualDurationsForEquality" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareTwoNonEqualDurationsForEquality" id="cpptest.provider://Duration_test::CompareTwoNonEqualDurationsForEquality" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareTwoNonEqualDurationsForInequality" id="cpptest.provider://Duration_test::CompareTwoNonEqualDurationsForInequality" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareTwoEqualDurationsForInequality" id="cpptest.provider://Duration_test::CompareTwoEqualDurationsForInequality" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareTwoEqualDurationsAreNotLessThan" id="cpptest.provider://Duration_test::CompareTwoEqualDurationsAreNotLessThan" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareTwoEqualDurationsAreNotGreaterThan" id="cpptest.provider://Duration_test::CompareTwoEqualDurationsAreNotGreaterThan" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareTwoEqualDurationsAreLessThanOrEqualTo" id="cpptest.provider://Duration_test::CompareTwoEqualDurationsAreLessThanOrEqualTo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareTwoEqualDurationsAreGreaterThanOrEqualTo" id="cpptest.provider://Duration_test::CompareTwoEqualDurationsAreGreaterThanOrEqualTo" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareDurationIsLessThanOther" id="cpptest.provider://Duration_test::CompareDurationIsLessThanOther" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareDurationIsNotLessThanOther" id="cpptest.provider://Duration_test::CompareDurationIsNotLessThanOther" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareDurationIsLessThanOrEqualToOther" id="cpptest.provider://Duration_test::CompareDurationIsLessThanOrEqualToOther" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareDurationIsNotLessThanOrEqualToOther" id="cpptest.provider://Duration_test::CompareDurationIsNotLessThanOrEqualToOther" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareDurationIsGreaterThanOther" id="cpptest.provider://Duration_test::CompareDurationIsGreaterThanOther" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareDurationIsNotGreaterThanOther" id="cpptest.provider://Duration_test::CompareDurationIsNotGreaterThanOther" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareDurationIsGreaterThanOrEqualToOther" id="cpptest.provider://Duration_test::CompareDurationIsGreaterThanOrEqualToOther" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareDurationIsNotGreaterThanOrEqualToOther" id="cpptest.provider://Duration_test::CompareDurationIsNotGreaterThanOrEqualToOther" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddDurationDoesNotChangeOriginalObject" id="cpptest.provider://Duration_test::AddDurationDoesNotChangeOriginalObject" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddDurationWithTwoZeroDurationsResultsInZeroDuration" id="cpptest.provider://Duration_test::AddDurationWithTwoZeroDurationsResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddDurationWithOneZeroDurationsResultsInNoneZeroDuration" id="cpptest.provider://Duration_test::AddDurationWithOneZeroDurationsResultsInNoneZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddDurationWithSumOfDurationsLessThanOneSecondsResultsInLessThanOneSecond" id="cpptest.provider://Duration_test::AddDurationWithSumOfDurationsLessThanOneSecondsResultsInLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddDurationWithSumOfDurationsMoreThanOneSecondsResultsInMoreThanOneSecond" id="cpptest.provider://Duration_test::AddDurationWithSumOfDurationsMoreThanOneSecondsResultsInMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddDurationWithOneDurationMoreThanOneSecondsResultsInMoreThanOneSecond" id="cpptest.provider://Duration_test::AddDurationWithOneDurationMoreThanOneSecondsResultsInMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddDurationWithDurationsMoreThanOneSecondsResultsInMoreThanOneSecond" id="cpptest.provider://Duration_test::AddDurationWithDurationsMoreThanOneSecondsResultsInMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddDurationResultsNotYetInSaturation" id="cpptest.provider://Duration_test::AddDurationResultsNotYetInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddDurationResultsInSaturationFromNanoseconds" id="cpptest.provider://Duration_test::AddDurationResultsInSaturationFromNanoseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddDurationResultsInSaturationFromSeconds" id="cpptest.provider://Duration_test::AddDurationResultsInSaturationFromSeconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddAssignSecondsToDurationResultsInSecondsAdditionToLHS" id="cpptest.provider://Duration_test::AddAssignSecondsToDurationResultsInSecondsAdditionToLHS" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddAssignNanosecondsToDurationResultsInNanosecondsAdditionToLHS" id="cpptest.provider://Duration_test::AddAssignNanosecondsToDurationResultsInNanosecondsAdditionToLHS" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddAssignDurationPastNanosecondBoundaryResultsInSecondIncrementToLHS" id="cpptest.provider://Duration_test::AddAssignDurationPastNanosecondBoundaryResultsInSecondIncrementToLHS" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddAssignDurationResultsInSaturationFromSeconds" id="cpptest.provider://Duration_test::AddAssignDurationResultsInSaturationFromSeconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AddAssignDurationResultsInSaturationFromNanoseconds" id="cpptest.provider://Duration_test::AddAssignDurationResultsInSaturationFromNanoseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationDoesNotChangeOriginalObject" id="cpptest.provider://Duration_test::SubtractDurationDoesNotChangeOriginalObject" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationWithTwoZeroDurationsResultsInZeroDuration" id="cpptest.provider://Duration_test::SubtractDurationWithTwoZeroDurationsResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationWithDurationsWithSameValueResultsInZeroDuration" id="cpptest.provider://Duration_test::SubtractDurationWithDurationsWithSameValueResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationFromZeroDurationsResultsInZeroDuration" id="cpptest.provider://Duration_test::SubtractDurationFromZeroDurationsResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationWithLargerDurationsResultsInZeroDurationFromNanoseconds" id="cpptest.provider://Duration_test::SubtractDurationWithLargerDurationsResultsInZeroDurationFromNanoseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationWithLargerDurationsResultsInZeroDurationFromSeconds" id="cpptest.provider://Duration_test::SubtractDurationWithLargerDurationsResultsInZeroDurationFromSeconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationWithZeroDurationsResultsInOriginaDuration" id="cpptest.provider://Duration_test::SubtractDurationWithZeroDurationsResultsInOriginaDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationMoreThanOneSecondWithLessThanOneSecondResultsInMoreThanOneSecond" id="cpptest.provider://Duration_test::SubtractDurationMoreThanOneSecondWithLessThanOneSecondResultsInMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationMoreThanOneSecondWithLessThanOneSecondResultsInLessThanOneSecond" id="cpptest.provider://Duration_test::SubtractDurationMoreThanOneSecondWithLessThanOneSecondResultsInLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationMoreThanOneSecondWithMoreThanOneSecondResultsInLessThanOneSecond" id="cpptest.provider://Duration_test::SubtractDurationMoreThanOneSecondWithMoreThanOneSecondResultsInLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractDurationWithSecondsAndNanosecondsCausingReductionOfSeconds" id="cpptest.provider://Duration_test::SubtractDurationWithSecondsAndNanosecondsCausingReductionOfSeconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractAssignSecondsFromDurationResultsInSecondSubtractractionToLHS" id="cpptest.provider://Duration_test::SubtractAssignSecondsFromDurationResultsInSecondSubtractractionToLHS" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractAssignNanosecondsFromDurationResultsInNanosecondSubtractractionToLHS" id="cpptest.provider://Duration_test::SubtractAssignNanosecondsFromDurationResultsInNanosecondSubtractractionToLHS" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractAssignDurationPastZeroNanosecondsResultsInDecrementedSeconds" id="cpptest.provider://Duration_test::SubtractAssignDurationPastZeroNanosecondsResultsInDecrementedSeconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubtractAssignLargerDurationResultsInZero" id="cpptest.provider://Duration_test::SubtractAssignLargerDurationResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationDoesNotChangeOriginalObject" id="cpptest.provider://Duration_test::MultiplyDurationDoesNotChangeOriginalObject" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyZeroDurationWithZeroSignedMultiplicatorResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyZeroDurationWithZeroSignedMultiplicatorResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyZeroDurationWithZeroUnsignedMultiplicatorResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyZeroDurationWithZeroUnsignedMultiplicatorResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyZeroDurationWithZeroFloatMultiplicatorResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyZeroDurationWithZeroFloatMultiplicatorResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithZeroSignedMultiplicatorResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyDurationWithZeroSignedMultiplicatorResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithZeroUnsignedMultiplicatorResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyDurationWithZeroUnsignedMultiplicatorResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithZeroFloatMultiplicatorResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyDurationWithZeroFloatMultiplicatorResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationLessThanOneSecondWithSignedResultsInLessThanOneSecond" id="cpptest.provider://Duration_test::MultiplyDurationLessThanOneSecondWithSignedResultsInLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationLessThanOneSecondWithUnsignedResultsInLessThanOneSecond" id="cpptest.provider://Duration_test::MultiplyDurationLessThanOneSecondWithUnsignedResultsInLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationLessThanOneSecondWithFloatResultsInLessThanOneSecond" id="cpptest.provider://Duration_test::MultiplyDurationLessThanOneSecondWithFloatResultsInLessThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationLessThanOneSecondWithSignedResultsInMoreThanOneSecond" id="cpptest.provider://Duration_test::MultiplyDurationLessThanOneSecondWithSignedResultsInMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationLessThanOneSecondWithUnsignedResultsInMoreThanOneSecond" id="cpptest.provider://Duration_test::MultiplyDurationLessThanOneSecondWithUnsignedResultsInMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationLessThanOneSecondWithFloatResultsInMoreThanOneSecond" id="cpptest.provider://Duration_test::MultiplyDurationLessThanOneSecondWithFloatResultsInMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationMoreThanOneSecondWithSignedResultsInMoreThanOneSecond" id="cpptest.provider://Duration_test::MultiplyDurationMoreThanOneSecondWithSignedResultsInMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationMoreThanOneSecondWithUnsignedResultsInMoreThanOneSecond" id="cpptest.provider://Duration_test::MultiplyDurationMoreThanOneSecondWithUnsignedResultsInMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationMoreThanOneSecondWithFloatResultsInMoreThanOneSecond" id="cpptest.provider://Duration_test::MultiplyDurationMoreThanOneSecondWithFloatResultsInMoreThanOneSecond" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithSelfAssignOperatorWorks" id="cpptest.provider://Duration_test::MultiplyDurationWithSelfAssignOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithFractionalFloat" id="cpptest.provider://Duration_test::MultiplyDurationWithFractionalFloat" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithNegativMultiplicatorResultsInZero" id="cpptest.provider://Duration_test::MultiplyDurationWithNegativMultiplicatorResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationLessThanOneSecondResultsInMoreNanosecondsThan64BitCanRepresent" id="cpptest.provider://Duration_test::MultiplyDurationLessThanOneSecondResultsInMoreNanosecondsThan64BitCanRepresent" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationResultsNotYetInSaturation" id="cpptest.provider://Duration_test::MultiplyDurationResultsNotYetInSaturation" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationResultsInSaturationDueToSeconds" id="cpptest.provider://Duration_test::MultiplyDurationResultsInSaturationDueToSeconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationResultsInSaturationDueToNanoseconds" id="cpptest.provider://Duration_test::MultiplyDurationResultsInSaturationDueToNanoseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyZeroDurationWithQuietNaNResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyZeroDurationWithQuietNaNResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyMaxDurationWithQuietNaNResultsInMaxDuration" id="cpptest.provider://Duration_test::MultiplyMaxDurationWithQuietNaNResultsInMaxDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyZeroDurationWithSignalingNaNResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyZeroDurationWithSignalingNaNResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyMaxDurationWithSignalingNaNResultsInMaxDuration" id="cpptest.provider://Duration_test::MultiplyMaxDurationWithSignalingNaNResultsInMaxDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyZeroDurationWithPosInfResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyZeroDurationWithPosInfResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyMaxDurationWithPosInfResultsInMaxDuration" id="cpptest.provider://Duration_test::MultiplyMaxDurationWithPosInfResultsInMaxDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyZeroDurationWithNegInfResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyZeroDurationWithNegInfResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyMaxDurationWithNegInfResultsInZeroDuration" id="cpptest.provider://Duration_test::MultiplyMaxDurationWithNegInfResultsInZeroDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithMinimalFloatResultsInZero" id="cpptest.provider://Duration_test::MultiplyDurationWithMinimalFloatResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithMinimalDoubleResultsInZero" id="cpptest.provider://Duration_test::MultiplyDurationWithMinimalDoubleResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyMaxDurationWithFloatOneResultsInMaxDuration" id="cpptest.provider://Duration_test::MultiplyMaxDurationWithFloatOneResultsInMaxDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyMaxDurationWithDoubleOneResultsInMaxDuration" id="cpptest.provider://Duration_test::MultiplyMaxDurationWithDoubleOneResultsInMaxDuration" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithFloatResultsInSaturationDueToSeconds" id="cpptest.provider://Duration_test::MultiplyDurationWithFloatResultsInSaturationDueToSeconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithDoubleResultsInSaturationDueToSeconds" id="cpptest.provider://Duration_test::MultiplyDurationWithDoubleResultsInSaturationDueToSeconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithFloatResultsInSaturationDueToNanoseconds" id="cpptest.provider://Duration_test::MultiplyDurationWithFloatResultsInSaturationDueToNanoseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MultiplyDurationWithDoubleResultsInSaturationDueToNanoseconds" id="cpptest.provider://Duration_test::MultiplyDurationWithDoubleResultsInSaturationDueToNanoseconds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StdStreamingOperator" id="cpptest.provider://Duration_test::StdStreamingOperator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LogStreamingOperator" id="cpptest.provider://Duration_test::LogStreamingOperator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="UnixDomainSocket_test" id="cpptest.provider://UnixDomainSocket_test" total="29" fail="0" err="0" pass="29" >
                  <Test ln="1" auth="" locRef="" name="UnlinkEmptySocketNameLeadsToInvalidChannelNameError" id="cpptest.provider://UnixDomainSocket_test::UnlinkEmptySocketNameLeadsToInvalidChannelNameError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnlinkEmptySocketNameWithPathPrefixLeadsToInvalidChannelNameError" id="cpptest.provider://UnixDomainSocket_test::UnlinkEmptySocketNameWithPathPrefixLeadsToInvalidChannelNameError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnlinkTooLongSocketNameWithPathPrefixLeadsToInvalidChannelNameError" id="cpptest.provider://UnixDomainSocket_test::UnlinkTooLongSocketNameWithPathPrefixLeadsToInvalidChannelNameError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnlinkExistingSocketIsSuccessful" id="cpptest.provider://UnixDomainSocket_test::UnlinkExistingSocketIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnlinkExistingSocketWithPathPrefixLeadsIsSuccessful" id="cpptest.provider://UnixDomainSocket_test::UnlinkExistingSocketWithPathPrefixLeadsIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimedSendOnServerLeadsToError" id="cpptest.provider://UnixDomainSocket_test::TimedSendOnServerLeadsToError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SendOnServerLeadsToError" id="cpptest.provider://UnixDomainSocket_test::SendOnServerLeadsToError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfNonEmptyMessageWithSendAndReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfNonEmptyMessageWithSendAndReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfNonEmptyMessageWithTimedSendAndReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfNonEmptyMessageWithTimedSendAndReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfNonEmptyMessageWithTimedSendAndTimedReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfNonEmptyMessageWithTimedSendAndTimedReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfNonEmptyMessageWithSendAndTimedReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfNonEmptyMessageWithSendAndTimedReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfEmptyMessageWithSendAndReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfEmptyMessageWithSendAndReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfEmptyMessageWithTimedSendAndReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfEmptyMessageWithTimedSendAndReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfEmptyMessageWithTimedSendAndTimedReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfEmptyMessageWithTimedSendAndTimedReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfEmptyMessageWithSendAndTimedReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfEmptyMessageWithSendAndTimedReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfMaxLengthMessageWithSendAndReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfMaxLengthMessageWithSendAndReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfMaxLengthMessageWithTimedSendAndReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfMaxLengthMessageWithTimedSendAndReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfMaxLengthMessageWithTimedSendAndTimedReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfMaxLengthMessageWithTimedSendAndTimedReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfMaxLengthMessageWithSendAndTimedReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfMaxLengthMessageWithSendAndTimedReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfMultipleMessagesWithSendAndReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfMultipleMessagesWithSendAndReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfMultipleMessagesWithTimedSendAndReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfMultipleMessagesWithTimedSendAndReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfMultipleMessagesWithTimedSendAndTimedReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfMultipleMessagesWithTimedSendAndTimedReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SuccessfulCommunicationOfMultipleMessagesWithSendAndTimedReceive" id="cpptest.provider://UnixDomainSocket_test::SuccessfulCommunicationOfMultipleMessagesWithSendAndTimedReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnableToSendTooLongMessageWithSend" id="cpptest.provider://UnixDomainSocket_test::UnableToSendTooLongMessageWithSend" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnableToSendTooLongMessageWithTimedSend" id="cpptest.provider://UnixDomainSocket_test::UnableToSendTooLongMessageWithTimedSend" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReceivingOnClientLeadsToErrorWithReceive" id="cpptest.provider://UnixDomainSocket_test::ReceivingOnClientLeadsToErrorWithReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReceivingOnClientLeadsToErrorWithTimedReceive" id="cpptest.provider://UnixDomainSocket_test::ReceivingOnClientLeadsToErrorWithTimedReceive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_TimedReceiveBlocks" id="cpptest.provider://UnixDomainSocket_test::TimingTest_TimedReceiveBlocks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TimingTest_TimedReceiveBlocksUntilMessageIsReceived" id="cpptest.provider://UnixDomainSocket_test::TimingTest_TimedReceiveBlocksUntilMessageIsReceived" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="into_test_from" id="cpptest.provider://into_test_from" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="FromWorksAsConstexpr" id="cpptest.provider://into_test_from::FromWorksAsConstexpr" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="into_test_into" id="cpptest.provider://into_test_into" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="IntoWorksWhenFromIsSpecialized" id="cpptest.provider://into_test_into::IntoWorksWhenFromIsSpecialized" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="UniqueId_test" id="cpptest.provider://UniqueId_test" total="10" fail="0" err="0" pass="10" >
                  <Test ln="1" auth="" locRef="" name="ConstructingUniqueIdWorks" id="cpptest.provider://UniqueId_test::ConstructingUniqueIdWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConversionToValueTypeWorks" id="cpptest.provider://UniqueId_test::ConversionToValueTypeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoConsecutiveCreatedUniqueIdsDifferByOne" id="cpptest.provider://UniqueId_test::TwoConsecutiveCreatedUniqueIdsDifferByOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ComparingTwoUniqueIdsWorks" id="cpptest.provider://UniqueId_test::ComparingTwoUniqueIdsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructingUniqueIdsWorks" id="cpptest.provider://UniqueId_test::CopyConstructingUniqueIdsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssigningUniqueIdsWorks" id="cpptest.provider://UniqueId_test::CopyAssigningUniqueIdsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructingUniqueIdsWorks" id="cpptest.provider://UniqueId_test::MoveConstructingUniqueIdsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssigningUniqueIdsWorks" id="cpptest.provider://UniqueId_test::MoveAssigningUniqueIdsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UniqueIdsAreMonotonicallyIncreasing" id="cpptest.provider://UniqueId_test::UniqueIdsAreMonotonicallyIncreasing" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SortingUniqueIdsWorks" id="cpptest.provider://UniqueId_test::SortingUniqueIdsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="expected_test" id="cpptest.provider://expected_test" total="70" fail="0" err="0" pass="70" >
                  <Test ln="1" auth="" locRef="" name="CreateWithPODTypeIsSuccessful" id="cpptest.provider://expected_test::CreateWithPODTypeIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithVoidTypeIsSuccessful" id="cpptest.provider://expected_test::CreateWithVoidTypeIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithErrorResultsInError" id="cpptest.provider://expected_test::CreateWithErrorResultsInError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstCreateWithErrorResultsInError" id="cpptest.provider://expected_test::ConstCreateWithErrorResultsInError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ErrorTypeOnlyCreateWithErrorResultsInError" id="cpptest.provider://expected_test::ErrorTypeOnlyCreateWithErrorResultsInError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateFromConstErrorResultsInError" id="cpptest.provider://expected_test::CreateFromConstErrorResultsInError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateFromConstSuccessResultsInCorrectValue" id="cpptest.provider://expected_test::CreateFromConstSuccessResultsInCorrectValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithComplexTypeIsSuccessful" id="cpptest.provider://expected_test::CreateWithComplexTypeIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithSTLTypeIsSuccessful" id="cpptest.provider://expected_test::CreateWithSTLTypeIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithComplexErrorResultsInError" id="cpptest.provider://expected_test::CreateWithComplexErrorResultsInError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateRValueAndGetErrorResultsInCorrectError" id="cpptest.provider://expected_test::CreateRValueAndGetErrorResultsInCorrectError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateConstRValueAndGetErrorResultsInCorrectError" id="cpptest.provider://expected_test::CreateConstRValueAndGetErrorResultsInCorrectError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateLValueAndGetErrorResultsInCorrectError" id="cpptest.provider://expected_test::CreateLValueAndGetErrorResultsInCorrectError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstCreateLValueAndGetErrorResultsInCorrectError" id="cpptest.provider://expected_test::ConstCreateLValueAndGetErrorResultsInCorrectError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateRValueAndGetValueResultsInCorrectValue" id="cpptest.provider://expected_test::CreateRValueAndGetValueResultsInCorrectValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateConstRValueAndGetValueResultsInCorrectValue" id="cpptest.provider://expected_test::CreateConstRValueAndGetValueResultsInCorrectValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateLValueAndGetValueResultsInCorrectValue" id="cpptest.provider://expected_test::CreateLValueAndGetValueResultsInCorrectValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstCreateLValueAndGetValueResultsInCorrectValue" id="cpptest.provider://expected_test::ConstCreateLValueAndGetValueResultsInCorrectValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithValueAndMoveCtorLeadsToMovedSource" id="cpptest.provider://expected_test::CreateWithValueAndMoveCtorLeadsToMovedSource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithErrorAndMoveCtorLeadsToMovedSource" id="cpptest.provider://expected_test::CreateWithErrorAndMoveCtorLeadsToMovedSource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithValueAndMoveAssignmentLeadsToMovedSource" id="cpptest.provider://expected_test::CreateWithValueAndMoveAssignmentLeadsToMovedSource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithErrorAndMoveAssignmentLeadsToMovedSource" id="cpptest.provider://expected_test::CreateWithErrorAndMoveAssignmentLeadsToMovedSource" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithOkFreeFunctionWithVoidValueTypeIsSuccessful" id="cpptest.provider://expected_test::CreateWithOkFreeFunctionWithVoidValueTypeIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithOkFreeFunctionByCopyIsSuccessful" id="cpptest.provider://expected_test::CreateWithOkFreeFunctionByCopyIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithOkFreeFunctionByMoveIsSuccessful" id="cpptest.provider://expected_test::CreateWithOkFreeFunctionByMoveIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithOkFreeFunctionByForwardingIsSuccessful" id="cpptest.provider://expected_test::CreateWithOkFreeFunctionByForwardingIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithErrFreeFunctionByCopyIsSuccessful" id="cpptest.provider://expected_test::CreateWithErrFreeFunctionByCopyIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithErrFreeFunctionByMoveIsSuccessful" id="cpptest.provider://expected_test::CreateWithErrFreeFunctionByMoveIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateWithErrFreeFunctionByForwardingIsSuccessful" id="cpptest.provider://expected_test::CreateWithErrFreeFunctionByForwardingIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BoolOperatorReturnsError" id="cpptest.provider://expected_test::BoolOperatorReturnsError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="BoolOperatorReturnsNoError" id="cpptest.provider://expected_test::BoolOperatorReturnsNoError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ErrorTypeOnlyBoolOperatorReturnsError" id="cpptest.provider://expected_test::ErrorTypeOnlyBoolOperatorReturnsError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ErrorTypeOnlyBoolOperatorReturnsNoError" id="cpptest.provider://expected_test::ErrorTypeOnlyBoolOperatorReturnsNoError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="HasValueIsTrueWhenHasErrorIsFalse" id="cpptest.provider://expected_test::HasValueIsTrueWhenHasErrorIsFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="HasValueIsFalseWhenHasErrorIsTrue" id="cpptest.provider://expected_test::HasValueIsFalseWhenHasErrorIsTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ArrowOperatorWorks" id="cpptest.provider://expected_test::ArrowOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstArrowOperatorWorks" id="cpptest.provider://expected_test::ConstArrowOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DereferencingOperatorWorks" id="cpptest.provider://expected_test::DereferencingOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstDereferencingOperatorWorks" id="cpptest.provider://expected_test::ConstDereferencingOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateFromInPlaceTypeLeadsToValidVoidValueTypeSut" id="cpptest.provider://expected_test::CreateFromInPlaceTypeLeadsToValidVoidValueTypeSut" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateFromInPlaceTypeLeadsToValidSut" id="cpptest.provider://expected_test::CreateFromInPlaceTypeLeadsToValidSut" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateFromUnexpectTypeLeadsToValidSutWithError" id="cpptest.provider://expected_test::CreateFromUnexpectTypeLeadsToValidSutWithError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateFromEmptySuccessTypeLeadsToValidSut" id="cpptest.provider://expected_test::CreateFromEmptySuccessTypeLeadsToValidSut" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateFromSuccessTypeLeadsToValidSut" id="cpptest.provider://expected_test::CreateFromSuccessTypeLeadsToValidSut" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreateFromErrorLeadsToCorrectError" id="cpptest.provider://expected_test::CreateFromErrorLeadsToCorrectError" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertNonEmptySuccessResultToVoidValueTypeResultIsSuccessful" id="cpptest.provider://expected_test::ConvertNonEmptySuccessResultToVoidValueTypeResultIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertConstNonEmptySuccessResultToVoidValueTypeResultIsSuccessful" id="cpptest.provider://expected_test::ConvertConstNonEmptySuccessResultToVoidValueTypeResultIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConvertNonEmptyErrorResultVoidValueTypeResultIsSuccessful" id="cpptest.provider://expected_test::ConvertNonEmptyErrorResultVoidValueTypeResultIsSuccessful" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectedWithValueConvertsToOptionalWithValue" id="cpptest.provider://expected_test::ExpectedWithValueConvertsToOptionalWithValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ExpectedWithErrorConvertsToOptionalWithoutValue" id="cpptest.provider://expected_test::ExpectedWithErrorConvertsToOptionalWithoutValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentIsNotEnforcedInMoveConstructor" id="cpptest.provider://expected_test::MoveAssignmentIsNotEnforcedInMoveConstructor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessingValueOfLValueExpectedWhichContainsErrorWithArrowOpLeadsToErrorHandlerCall" id="cpptest.provider://expected_test::AccessingValueOfLValueExpectedWhichContainsErrorWithArrowOpLeadsToErrorHandlerCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessingValueOfConstLValueExpectedWhichContainsErrorWithArrowOpLeadsToErrorHandlerCall" id="cpptest.provider://expected_test::AccessingValueOfConstLValueExpectedWhichContainsErrorWithArrowOpLeadsToErrorHandlerCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessingValueOfLValueExpectedWhichContainsErrorWithDerefOpLeadsToErrorHandlerCall" id="cpptest.provider://expected_test::AccessingValueOfLValueExpectedWhichContainsErrorWithDerefOpLeadsToErrorHandlerCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessingValueOfConstLValueExpectedWhichContainsErrorWithDerefOpLeadsToErrorHandlerCall" id="cpptest.provider://expected_test::AccessingValueOfConstLValueExpectedWhichContainsErrorWithDerefOpLeadsToErrorHandlerCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessingValueOfLValueExpectedWhichContainsErrorLeadsToErrorHandlerCall" id="cpptest.provider://expected_test::AccessingValueOfLValueExpectedWhichContainsErrorLeadsToErrorHandlerCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessingValueOfConstLValueExpectedWhichContainsErrorLeadsToErrorHandlerCall" id="cpptest.provider://expected_test::AccessingValueOfConstLValueExpectedWhichContainsErrorLeadsToErrorHandlerCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessingValueOfRValueExpectedWhichContainsErrorLeadsToErrorHandlerCall" id="cpptest.provider://expected_test::AccessingValueOfRValueExpectedWhichContainsErrorLeadsToErrorHandlerCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessingErrorOfLValueExpectedWhichContainsValueLeadsToErrorHandlerCall" id="cpptest.provider://expected_test::AccessingErrorOfLValueExpectedWhichContainsValueLeadsToErrorHandlerCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessingErrorOfConstLValueExpectedWhichContainsValueLeadsToErrorHandlerCall" id="cpptest.provider://expected_test::AccessingErrorOfConstLValueExpectedWhichContainsValueLeadsToErrorHandlerCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessingErrorOfRValueExpectedWhichContainsValueLeadsToErrorHandlerCall" id="cpptest.provider://expected_test::AccessingErrorOfRValueExpectedWhichContainsValueLeadsToErrorHandlerCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoVoidValueTypeExpectedWithEqualErrorAreEqual" id="cpptest.provider://expected_test::TwoVoidValueTypeExpectedWithEqualErrorAreEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoVoidValueTypeExpectedWithUnequalErrorAreUnequal" id="cpptest.provider://expected_test::TwoVoidValueTypeExpectedWithUnequalErrorAreUnequal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoVoidValueTypeExpectedWithValuesAreEqual" id="cpptest.provider://expected_test::TwoVoidValueTypeExpectedWithValuesAreEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoVoidValueTypeExpectedWithErrorAndValueAreUnequal" id="cpptest.provider://expected_test::TwoVoidValueTypeExpectedWithErrorAndValueAreUnequal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoExpectedWithEqualErrorAreEqual" id="cpptest.provider://expected_test::TwoExpectedWithEqualErrorAreEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoExpectedsWithUnequalErrorAreUnequal" id="cpptest.provider://expected_test::TwoExpectedsWithUnequalErrorAreUnequal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoExpectedWithEqualValueAreEqual" id="cpptest.provider://expected_test::TwoExpectedWithEqualValueAreEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoExpectedWithUnequalValueAreUnequal" id="cpptest.provider://expected_test::TwoExpectedWithUnequalValueAreUnequal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoExpectedWithErrorAndValueAreUnequal" id="cpptest.provider://expected_test::TwoExpectedWithErrorAndValueAreUnequal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="Optional_test" id="cpptest.provider://Optional_test" total="47" fail="0" err="0" pass="47" >
                  <Test ln="1" auth="" locRef="" name="DefaultCTorHasValue" id="cpptest.provider://Optional_test::DefaultCTorHasValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NulloptCTor" id="cpptest.provider://Optional_test::NulloptCTor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="emplaceWithoutPresetValue" id="cpptest.provider://Optional_test::emplaceWithoutPresetValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="emplaceWithPresetValue" id="cpptest.provider://Optional_test::emplaceWithPresetValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="value" id="cpptest.provider://Optional_test::value" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="const_value" id="cpptest.provider://Optional_test::const_value" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="resetWithValue" id="cpptest.provider://Optional_test::resetWithValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="resetWithoutValue" id="cpptest.provider://Optional_test::resetWithoutValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="boolOperatorNoValue" id="cpptest.provider://Optional_test::boolOperatorNoValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="boolOperatorWithValue" id="cpptest.provider://Optional_test::boolOperatorWithValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ArrowOperator" id="cpptest.provider://Optional_test::ArrowOperator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstArrowOperator" id="cpptest.provider://Optional_test::ConstArrowOperator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DereferenceOperator" id="cpptest.provider://Optional_test::DereferenceOperator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstDereferenceOperator" id="cpptest.provider://Optional_test::ConstDereferenceOperator" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UserDefinedTypeAssignment" id="cpptest.provider://Optional_test::UserDefinedTypeAssignment" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEqualValue" id="cpptest.provider://Optional_test::CompareWithEqualValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEqualNullopt" id="cpptest.provider://Optional_test::CompareWithEqualNullopt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithInequalValue" id="cpptest.provider://Optional_test::CompareWithInequalValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithNoValueWithValue" id="cpptest.provider://Optional_test::CompareWithNoValueWithValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithNoValueWithNullopt" id="cpptest.provider://Optional_test::CompareWithNoValueWithNullopt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithValueWithNullopt" id="cpptest.provider://Optional_test::CompareWithValueWithNullopt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NotCompareWithEqualValue" id="cpptest.provider://Optional_test::NotCompareWithEqualValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NotCompareWithNullopt" id="cpptest.provider://Optional_test::NotCompareWithNullopt" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyCTorWithValue" id="cpptest.provider://Optional_test::CopyCTorWithValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyCTorWithNoValue" id="cpptest.provider://Optional_test::CopyCTorWithNoValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithValue" id="cpptest.provider://Optional_test::CopyAssignmentWithValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentNoValue" id="cpptest.provider://Optional_test::CopyAssignmentNoValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentFromNoValueToNoValue" id="cpptest.provider://Optional_test::CopyAssignmentFromNoValueToNoValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveCTorWithValue" id="cpptest.provider://Optional_test::MoveCTorWithValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveCTorWithNoValue" id="cpptest.provider://Optional_test::MoveCTorWithNoValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithValue" id="cpptest.provider://Optional_test::MoveAssignmentWithValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithNoValue" id="cpptest.provider://Optional_test::MoveAssignmentWithNoValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentFromNoValueToNoValue" id="cpptest.provider://Optional_test::MoveAssignmentFromNoValueToNoValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="Destructor" id="cpptest.provider://Optional_test::Destructor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorOnCopyCTor" id="cpptest.provider://Optional_test::DestructorOnCopyCTor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorOnCopyAssignment" id="cpptest.provider://Optional_test::DestructorOnCopyAssignment" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorOnMoveCTor" id="cpptest.provider://Optional_test::DestructorOnMoveCTor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorOnMoveAssignment" id="cpptest.provider://Optional_test::DestructorOnMoveAssignment" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DestructorOnEmplace" id="cpptest.provider://Optional_test::DestructorOnEmplace" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MakeOptional" id="cpptest.provider://Optional_test::MakeOptional" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReturningNulloptWithoutConstruction" id="cpptest.provider://Optional_test::ReturningNulloptWithoutConstruction" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructionWithElementWorks" id="cpptest.provider://Optional_test::CopyConstructionWithElementWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InPlaceConstructionCtorCallsDefCtorWhenCalledWithoutArgs" id="cpptest.provider://Optional_test::InPlaceConstructionCtorCallsDefCtorWhenCalledWithoutArgs" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InPlaceConstructionCtorCallsCorrectCtorWhenCalledWithLVal" id="cpptest.provider://Optional_test::InPlaceConstructionCtorCallsCorrectCtorWhenCalledWithLVal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InPlaceConstructionCtorCallsCorrectCtorWhenCalledWithPodRVal" id="cpptest.provider://Optional_test::InPlaceConstructionCtorCallsCorrectCtorWhenCalledWithPodRVal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InPlaceConstructionCtorCallsCorrectCtorWhenCalledWithComplexTypeRVal" id="cpptest.provider://Optional_test::InPlaceConstructionCtorCallsCorrectCtorWhenCalledWithComplexTypeRVal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InPlaceConstructionCtorCallsCorrectCtorWhenCalledWithMixedArgs" id="cpptest.provider://Optional_test::InPlaceConstructionCtorCallsCorrectCtorWhenCalledWithMixedArgs" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SemanticString_test/0" id="cpptest.provider://SemanticString_test/0" total="23" fail="0" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="InitializeWithValidStringLiteralWorks" id="cpptest.provider://SemanticString_test/0::InitializeWithValidStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeWorksCorrectly" id="cpptest.provider://SemanticString_test/0::SizeWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AsStringWorksCorrectly" id="cpptest.provider://SemanticString_test/0::AsStringWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CapacityWorksCorrectly" id="cpptest.provider://SemanticString_test/0::CapacityWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CanBeFilledUpToMaxCapacity" id="cpptest.provider://SemanticString_test/0::CanBeFilledUpToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithValidStringValueWorks" id="cpptest.provider://SemanticString_test/0::InitializeWithValidStringValueWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithStringContainingIllegalCharactersFails" id="cpptest.provider://SemanticString_test/0::InitializeWithStringContainingIllegalCharactersFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithStringContainingIllegalContentFails" id="cpptest.provider://SemanticString_test/0::InitializeWithStringContainingIllegalContentFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithTooLongContentFails" id="cpptest.provider://SemanticString_test/0::InitializeWithTooLongContentFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendValidContentToValidStringWorks" id="cpptest.provider://SemanticString_test/0::AppendValidContentToValidStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendInvalidCharactersToValidStringFails" id="cpptest.provider://SemanticString_test/0::AppendInvalidCharactersToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GenerateInvalidContentWithAppend" id="cpptest.provider://SemanticString_test/0::GenerateInvalidContentWithAppend" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GenerateInvalidContentWithInsert" id="cpptest.provider://SemanticString_test/0::GenerateInvalidContentWithInsert" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendTooLongContentToValidStringFails" id="cpptest.provider://SemanticString_test/0::AppendTooLongContentToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertValidContentToValidStringWorks" id="cpptest.provider://SemanticString_test/0::InsertValidContentToValidStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertInvalidCharactersToValidStringFails" id="cpptest.provider://SemanticString_test/0::InsertInvalidCharactersToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertTooLongContentToValidStringFails" id="cpptest.provider://SemanticString_test/0::InsertTooLongContentToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EqualityOperatorWorks" id="cpptest.provider://SemanticString_test/0::EqualityOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InequalityOperatorWorks" id="cpptest.provider://SemanticString_test/0::InequalityOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LessThanOrEqualOperatorWorks" id="cpptest.provider://SemanticString_test/0::LessThanOrEqualOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LessThanOperatorWorks" id="cpptest.provider://SemanticString_test/0::LessThanOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GreaterThanOrEqualOperatorWorks" id="cpptest.provider://SemanticString_test/0::GreaterThanOrEqualOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GreaterThanOperatorWorks" id="cpptest.provider://SemanticString_test/0::GreaterThanOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SemanticString_test/1" id="cpptest.provider://SemanticString_test/1" total="23" fail="0" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="InitializeWithValidStringLiteralWorks" id="cpptest.provider://SemanticString_test/1::InitializeWithValidStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeWorksCorrectly" id="cpptest.provider://SemanticString_test/1::SizeWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AsStringWorksCorrectly" id="cpptest.provider://SemanticString_test/1::AsStringWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CapacityWorksCorrectly" id="cpptest.provider://SemanticString_test/1::CapacityWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CanBeFilledUpToMaxCapacity" id="cpptest.provider://SemanticString_test/1::CanBeFilledUpToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithValidStringValueWorks" id="cpptest.provider://SemanticString_test/1::InitializeWithValidStringValueWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithStringContainingIllegalCharactersFails" id="cpptest.provider://SemanticString_test/1::InitializeWithStringContainingIllegalCharactersFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithStringContainingIllegalContentFails" id="cpptest.provider://SemanticString_test/1::InitializeWithStringContainingIllegalContentFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithTooLongContentFails" id="cpptest.provider://SemanticString_test/1::InitializeWithTooLongContentFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendValidContentToValidStringWorks" id="cpptest.provider://SemanticString_test/1::AppendValidContentToValidStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendInvalidCharactersToValidStringFails" id="cpptest.provider://SemanticString_test/1::AppendInvalidCharactersToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GenerateInvalidContentWithAppend" id="cpptest.provider://SemanticString_test/1::GenerateInvalidContentWithAppend" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GenerateInvalidContentWithInsert" id="cpptest.provider://SemanticString_test/1::GenerateInvalidContentWithInsert" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendTooLongContentToValidStringFails" id="cpptest.provider://SemanticString_test/1::AppendTooLongContentToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertValidContentToValidStringWorks" id="cpptest.provider://SemanticString_test/1::InsertValidContentToValidStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertInvalidCharactersToValidStringFails" id="cpptest.provider://SemanticString_test/1::InsertInvalidCharactersToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertTooLongContentToValidStringFails" id="cpptest.provider://SemanticString_test/1::InsertTooLongContentToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EqualityOperatorWorks" id="cpptest.provider://SemanticString_test/1::EqualityOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InequalityOperatorWorks" id="cpptest.provider://SemanticString_test/1::InequalityOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LessThanOrEqualOperatorWorks" id="cpptest.provider://SemanticString_test/1::LessThanOrEqualOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LessThanOperatorWorks" id="cpptest.provider://SemanticString_test/1::LessThanOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GreaterThanOrEqualOperatorWorks" id="cpptest.provider://SemanticString_test/1::GreaterThanOrEqualOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GreaterThanOperatorWorks" id="cpptest.provider://SemanticString_test/1::GreaterThanOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SemanticString_test/2" id="cpptest.provider://SemanticString_test/2" total="23" fail="0" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="InitializeWithValidStringLiteralWorks" id="cpptest.provider://SemanticString_test/2::InitializeWithValidStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeWorksCorrectly" id="cpptest.provider://SemanticString_test/2::SizeWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AsStringWorksCorrectly" id="cpptest.provider://SemanticString_test/2::AsStringWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CapacityWorksCorrectly" id="cpptest.provider://SemanticString_test/2::CapacityWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CanBeFilledUpToMaxCapacity" id="cpptest.provider://SemanticString_test/2::CanBeFilledUpToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithValidStringValueWorks" id="cpptest.provider://SemanticString_test/2::InitializeWithValidStringValueWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithStringContainingIllegalCharactersFails" id="cpptest.provider://SemanticString_test/2::InitializeWithStringContainingIllegalCharactersFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithStringContainingIllegalContentFails" id="cpptest.provider://SemanticString_test/2::InitializeWithStringContainingIllegalContentFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithTooLongContentFails" id="cpptest.provider://SemanticString_test/2::InitializeWithTooLongContentFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendValidContentToValidStringWorks" id="cpptest.provider://SemanticString_test/2::AppendValidContentToValidStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendInvalidCharactersToValidStringFails" id="cpptest.provider://SemanticString_test/2::AppendInvalidCharactersToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GenerateInvalidContentWithAppend" id="cpptest.provider://SemanticString_test/2::GenerateInvalidContentWithAppend" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GenerateInvalidContentWithInsert" id="cpptest.provider://SemanticString_test/2::GenerateInvalidContentWithInsert" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendTooLongContentToValidStringFails" id="cpptest.provider://SemanticString_test/2::AppendTooLongContentToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertValidContentToValidStringWorks" id="cpptest.provider://SemanticString_test/2::InsertValidContentToValidStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertInvalidCharactersToValidStringFails" id="cpptest.provider://SemanticString_test/2::InsertInvalidCharactersToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertTooLongContentToValidStringFails" id="cpptest.provider://SemanticString_test/2::InsertTooLongContentToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EqualityOperatorWorks" id="cpptest.provider://SemanticString_test/2::EqualityOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InequalityOperatorWorks" id="cpptest.provider://SemanticString_test/2::InequalityOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LessThanOrEqualOperatorWorks" id="cpptest.provider://SemanticString_test/2::LessThanOrEqualOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LessThanOperatorWorks" id="cpptest.provider://SemanticString_test/2::LessThanOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GreaterThanOrEqualOperatorWorks" id="cpptest.provider://SemanticString_test/2::GreaterThanOrEqualOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GreaterThanOperatorWorks" id="cpptest.provider://SemanticString_test/2::GreaterThanOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SemanticString_test/3" id="cpptest.provider://SemanticString_test/3" total="23" fail="0" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="InitializeWithValidStringLiteralWorks" id="cpptest.provider://SemanticString_test/3::InitializeWithValidStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeWorksCorrectly" id="cpptest.provider://SemanticString_test/3::SizeWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AsStringWorksCorrectly" id="cpptest.provider://SemanticString_test/3::AsStringWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CapacityWorksCorrectly" id="cpptest.provider://SemanticString_test/3::CapacityWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CanBeFilledUpToMaxCapacity" id="cpptest.provider://SemanticString_test/3::CanBeFilledUpToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithValidStringValueWorks" id="cpptest.provider://SemanticString_test/3::InitializeWithValidStringValueWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithStringContainingIllegalCharactersFails" id="cpptest.provider://SemanticString_test/3::InitializeWithStringContainingIllegalCharactersFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithStringContainingIllegalContentFails" id="cpptest.provider://SemanticString_test/3::InitializeWithStringContainingIllegalContentFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithTooLongContentFails" id="cpptest.provider://SemanticString_test/3::InitializeWithTooLongContentFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendValidContentToValidStringWorks" id="cpptest.provider://SemanticString_test/3::AppendValidContentToValidStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendInvalidCharactersToValidStringFails" id="cpptest.provider://SemanticString_test/3::AppendInvalidCharactersToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GenerateInvalidContentWithAppend" id="cpptest.provider://SemanticString_test/3::GenerateInvalidContentWithAppend" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GenerateInvalidContentWithInsert" id="cpptest.provider://SemanticString_test/3::GenerateInvalidContentWithInsert" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendTooLongContentToValidStringFails" id="cpptest.provider://SemanticString_test/3::AppendTooLongContentToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertValidContentToValidStringWorks" id="cpptest.provider://SemanticString_test/3::InsertValidContentToValidStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertInvalidCharactersToValidStringFails" id="cpptest.provider://SemanticString_test/3::InsertInvalidCharactersToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertTooLongContentToValidStringFails" id="cpptest.provider://SemanticString_test/3::InsertTooLongContentToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EqualityOperatorWorks" id="cpptest.provider://SemanticString_test/3::EqualityOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InequalityOperatorWorks" id="cpptest.provider://SemanticString_test/3::InequalityOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LessThanOrEqualOperatorWorks" id="cpptest.provider://SemanticString_test/3::LessThanOrEqualOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LessThanOperatorWorks" id="cpptest.provider://SemanticString_test/3::LessThanOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GreaterThanOrEqualOperatorWorks" id="cpptest.provider://SemanticString_test/3::GreaterThanOrEqualOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GreaterThanOperatorWorks" id="cpptest.provider://SemanticString_test/3::GreaterThanOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="SemanticString_test/4" id="cpptest.provider://SemanticString_test/4" total="23" fail="0" err="0" pass="23" >
                  <Test ln="1" auth="" locRef="" name="InitializeWithValidStringLiteralWorks" id="cpptest.provider://SemanticString_test/4::InitializeWithValidStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SizeWorksCorrectly" id="cpptest.provider://SemanticString_test/4::SizeWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AsStringWorksCorrectly" id="cpptest.provider://SemanticString_test/4::AsStringWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CapacityWorksCorrectly" id="cpptest.provider://SemanticString_test/4::CapacityWorksCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CanBeFilledUpToMaxCapacity" id="cpptest.provider://SemanticString_test/4::CanBeFilledUpToMaxCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithValidStringValueWorks" id="cpptest.provider://SemanticString_test/4::InitializeWithValidStringValueWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithStringContainingIllegalCharactersFails" id="cpptest.provider://SemanticString_test/4::InitializeWithStringContainingIllegalCharactersFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithStringContainingIllegalContentFails" id="cpptest.provider://SemanticString_test/4::InitializeWithStringContainingIllegalContentFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializeWithTooLongContentFails" id="cpptest.provider://SemanticString_test/4::InitializeWithTooLongContentFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendValidContentToValidStringWorks" id="cpptest.provider://SemanticString_test/4::AppendValidContentToValidStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendInvalidCharactersToValidStringFails" id="cpptest.provider://SemanticString_test/4::AppendInvalidCharactersToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GenerateInvalidContentWithAppend" id="cpptest.provider://SemanticString_test/4::GenerateInvalidContentWithAppend" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GenerateInvalidContentWithInsert" id="cpptest.provider://SemanticString_test/4::GenerateInvalidContentWithInsert" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendTooLongContentToValidStringFails" id="cpptest.provider://SemanticString_test/4::AppendTooLongContentToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertValidContentToValidStringWorks" id="cpptest.provider://SemanticString_test/4::InsertValidContentToValidStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertInvalidCharactersToValidStringFails" id="cpptest.provider://SemanticString_test/4::InsertInvalidCharactersToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertTooLongContentToValidStringFails" id="cpptest.provider://SemanticString_test/4::InsertTooLongContentToValidStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EqualityOperatorWorks" id="cpptest.provider://SemanticString_test/4::EqualityOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InequalityOperatorWorks" id="cpptest.provider://SemanticString_test/4::InequalityOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LessThanOrEqualOperatorWorks" id="cpptest.provider://SemanticString_test/4::LessThanOrEqualOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="LessThanOperatorWorks" id="cpptest.provider://SemanticString_test/4::LessThanOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GreaterThanOrEqualOperatorWorks" id="cpptest.provider://SemanticString_test/4::GreaterThanOrEqualOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GreaterThanOperatorWorks" id="cpptest.provider://SemanticString_test/4::GreaterThanOperatorWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="string_test" id="cpptest.provider://string_test" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="CapacityReturnsSpecifiedCapacity" id="cpptest.provider://string_test::CapacityReturnsSpecifiedCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="stringTyped_test/0" id="cpptest.provider://stringTyped_test/0" total="184" fail="0" err="0" pass="184" >
                  <Test ln="1" auth="" locRef="" name="EmptyInitializationResultsInSize0" id="cpptest.provider://stringTyped_test/0::EmptyInitializationResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmptyInitializationResultsInEmptyString" id="cpptest.provider://stringTyped_test/0::EmptyInitializationResultsInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructEmptyStringResultsInSize0" id="cpptest.provider://stringTyped_test/0::CopyConstructEmptyStringResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::CopyConstructStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSize0Works" id="cpptest.provider://stringTyped_test/0::MoveConstructionWithStringOfSize0Works" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSizeSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::MoveConstructionWithStringOfSizeSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSizeCapaWorks" id="cpptest.provider://stringTyped_test/0::MoveConstructionWithStringOfSizeCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfCopyAssignmentExcluded" id="cpptest.provider://stringTyped_test/0::SelfCopyAssignmentExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSize0Works" id="cpptest.provider://stringTyped_test/0::CopyAssignmentWithStringOfSize0Works" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSizeSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::CopyAssignmentWithStringOfSizeSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSizeCapaWorks" id="cpptest.provider://stringTyped_test/0::CopyAssignmentWithStringOfSizeCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfMoveAssignmentExcluded" id="cpptest.provider://stringTyped_test/0::SelfMoveAssignmentExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/0::MoveAssignmentOfStringWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSmallerSizeResultsInSmallerSize" id="cpptest.provider://stringTyped_test/0::MoveAssignmentOfStringWithSmallerSizeResultsInSmallerSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::MoveAssignmentOfStringWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CharToStringConvConstrWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/0::CharToStringConvConstrWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CharToStringConvConstrWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::CharToStringConvConstrWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/0::UnsafeCharToStringConvConstrWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::UnsafeCharToStringConvConstrWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSizeGreaterCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::UnsafeCharToStringConvConstrWithSizeGreaterCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithNullPtrResultsEmptyString" id="cpptest.provider://stringTyped_test/0::UnsafeCharToStringConvConstrWithNullPtrResultsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCount0ResultsInSize0" id="cpptest.provider://stringTyped_test/0::UnsafeCharToStringConstrWithCount0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCountEqCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::UnsafeCharToStringConstrWithCountEqCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCountGreaterCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::UnsafeCharToStringConstrWithCountGreaterCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithNullPtrResultsEmptyString" id="cpptest.provider://stringTyped_test/0::UnsafeCharToStringConstrWithNullPtrResultsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSize0WithOperatorResultsInSize0" id="cpptest.provider://stringTyped_test/0::AssignCStringOfSize0WithOperatorResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSizeCapaWithOperatorResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::AssignCStringOfSizeCapaWithOperatorResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfAssignmentIsExcluded" id="cpptest.provider://stringTyped_test/0::SelfAssignmentIsExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/0::AssignStringOfSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::AssignStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSize0AndSmallerCapaResultsInSize0" id="cpptest.provider://stringTyped_test/0::AssignStringOfSize0AndSmallerCapaResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::AssignStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FreshlyAssignNothingResultsInZeroSize" id="cpptest.provider://stringTyped_test/0::FreshlyAssignNothingResultsInZeroSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReassignNothingResultsInZeroSize" id="cpptest.provider://stringTyped_test/0::ReassignNothingResultsInZeroSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::AssignCStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCStringOfSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/0::UnsafeAssignOfCStringOfSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCStringOfSize1ResultsInSize1" id="cpptest.provider://stringTyped_test/0::UnsafeAssignOfCStringOfSize1ResultsInSize1" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignCStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/0::UnsafeAssignCStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignCStringOfSizeGreaterCapaResultsInSize0" id="cpptest.provider://stringTyped_test/0::UnsafeAssignCStringOfSizeGreaterCapaResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfInvalidCStringFails" id="cpptest.provider://stringTyped_test/0::UnsafeAssignOfInvalidCStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCharPointerPointingToSameAddress" id="cpptest.provider://stringTyped_test/0::UnsafeAssignOfCharPointerPointingToSameAddress" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfNullptrFails" id="cpptest.provider://stringTyped_test/0::UnsafeAssignOfNullptrFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringsResultsInZero" id="cpptest.provider://stringTyped_test/0::CompareEqStringsResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultNegative" id="cpptest.provider://stringTyped_test/0::CompareResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultPositive" id="cpptest.provider://stringTyped_test/0::CompareResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyStringResultsInPositive" id="cpptest.provider://stringTyped_test/0::CompareWithEmptyStringResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringsWithDifferentCapaResultsInZero" id="cpptest.provider://stringTyped_test/0::CompareEqStringsWithDifferentCapaResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultNegativeWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareResultNegativeWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultPositiveWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareResultPositiveWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyStringOfDifferentCapaResultsInPositive" id="cpptest.provider://stringTyped_test/0::CompareWithEmptyStringOfDifferentCapaResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultTrue" id="cpptest.provider://stringTyped_test/0::CompareOperatorEqualResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultFalse" id="cpptest.provider://stringTyped_test/0::CompareOperatorEqualResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorEqualResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorEqualResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultFalse" id="cpptest.provider://stringTyped_test/0::CompareOperatorNotEqualResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultTrue" id="cpptest.provider://stringTyped_test/0::CompareOperatorNotEqualResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorNotEqualResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorNotEqualResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultTrue" id="cpptest.provider://stringTyped_test/0::CompareOperatorLessResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultFalse" id="cpptest.provider://stringTyped_test/0::CompareOperatorLessResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorLessResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorLessResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultTrue" id="cpptest.provider://stringTyped_test/0::CompareOperatorLessEqResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultFalse" id="cpptest.provider://stringTyped_test/0::CompareOperatorLessEqResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorLessEqResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorLessEqResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultTrue" id="cpptest.provider://stringTyped_test/0::CompareOperatorGreaterResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultFalse" id="cpptest.provider://stringTyped_test/0::CompareOperatorGreaterResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorGreaterResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorGreaterResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultTrue" id="cpptest.provider://stringTyped_test/0::CompareOperatorGreaterEqResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultFalse" id="cpptest.provider://stringTyped_test/0::CompareOperatorGreaterEqResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorGreaterEqResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorGreaterEqResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqCharArrayResultsInZero" id="cpptest.provider://stringTyped_test/0::CompareEqCharArrayResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultNegative" id="cpptest.provider://stringTyped_test/0::CompareWithCharArrayResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultPositive" id="cpptest.provider://stringTyped_test/0::CompareWithCharArrayResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyCharArrayResultsInPositive" id="cpptest.provider://stringTyped_test/0::CompareWithEmptyCharArrayResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringAndCharArrayWithDifferentCapaResultsInZero" id="cpptest.provider://stringTyped_test/0::CompareEqStringAndCharArrayWithDifferentCapaResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultNegativeWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareWithCharArrayResultNegativeWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultPositiveWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareWithCharArrayResultPositiveWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyCharArrayOfDifferentCapaResultsInPositive" id="cpptest.provider://stringTyped_test/0::CompareWithEmptyCharArrayOfDifferentCapaResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualStringsWorks" id="cpptest.provider://stringTyped_test/0::CheckForEqualityWithEqualStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalStringsWorks" id="cpptest.provider://stringTyped_test/0::CheckForEqualityWithUnequalStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualStringWithDifferentCapaWorks" id="cpptest.provider://stringTyped_test/0::CheckForEqualityWithEqualStringWithDifferentCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalStringWithDifferentSizeWorks" id="cpptest.provider://stringTyped_test/0::CheckForEqualityWithUnequalStringWithDifferentSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentStrings" id="cpptest.provider://stringTyped_test/0::CompareOperatorsWithDifferentStrings" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualStrings" id="cpptest.provider://stringTyped_test/0::CompareOperatorsWithEqualStrings" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentStringWithDifferentSize" id="cpptest.provider://stringTyped_test/0::CompareOperatorsWithDifferentStringWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualStringWithDifferentCapa" id="cpptest.provider://stringTyped_test/0::CompareOperatorsWithEqualStringWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqCharResultsInZero" id="cpptest.provider://stringTyped_test/0::CompareEqCharResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultNegative" id="cpptest.provider://stringTyped_test/0::CompareWithCharResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultPositive" id="cpptest.provider://stringTyped_test/0::CompareWithCharResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultPositiveWithDifferentSize" id="cpptest.provider://stringTyped_test/0::CompareWithCharResultPositiveWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEmptyStringWithCharWorks" id="cpptest.provider://stringTyped_test/0::CompareEmptyStringWithCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualCharWorks" id="cpptest.provider://stringTyped_test/0::CheckForEqualityWithEqualCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalCharWorks" id="cpptest.provider://stringTyped_test/0::CheckForEqualityWithUnequalCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithCharWithDifferentSizeWorks" id="cpptest.provider://stringTyped_test/0::CheckForEqualityWithCharWithDifferentSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentChar" id="cpptest.provider://stringTyped_test/0::CompareOperatorsWithDifferentChar" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualChar" id="cpptest.provider://stringTyped_test/0::CompareOperatorsWithEqualChar" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentCharWithDifferentSize" id="cpptest.provider://stringTyped_test/0::CompareOperatorsWithDifferentCharWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewlyCreatedStringIsEmpty" id="cpptest.provider://stringTyped_test/0::NewlyCreatedStringIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StringWithContentIsNotEmtpy" id="cpptest.provider://stringTyped_test/0::StringWithContentIsNotEmtpy" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ClearEmptyStringDoesNotChangeString" id="cpptest.provider://stringTyped_test/0::ClearEmptyStringDoesNotChangeString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ClearNotEmptyStringResultsInEmptyStringWithUnchangedCapacity" id="cpptest.provider://stringTyped_test/0::ClearNotEmptyStringResultsInEmptyStringWithUnchangedCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ChangeStringAfterClearWorks" id="cpptest.provider://stringTyped_test/0::ChangeStringAfterClearWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstrWithEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::ConstrWithEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstrWithStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::ConstrWithStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstrWithEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::MoveConstrWithEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstrWithStringSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::MoveConstrWithStringSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::AssignmentOfStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::AssignmentOfEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfNotEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::AssignmentOfNotEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::MoveAssignmentOfEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::MoveAssignmentOfStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfNotEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/0::MoveAssignmentOfNotEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoEmptyStringsReturnsEmptyStringWithTotalCapa" id="cpptest.provider://stringTyped_test/0::ConcatenateTwoEmptyStringsReturnsEmptyStringWithTotalCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoStringsWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateTwoStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoNotEmptyStringsWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateTwoNotEmptyStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateThreeStringsWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateThreeStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndStringLiteralWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateEmptyStringAndStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringLiteralAndStringWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateStringLiteralAndStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndNullCharReturnsStringWithSizeOne" id="cpptest.provider://stringTyped_test/0::ConcatenateEmptyStringAndNullCharReturnsStringWithSizeOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndCharWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateEmptyStringAndCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringAndCharWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateStringAndCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringsReturnsEmptyString" id="cpptest.provider://stringTyped_test/0::ConcatenateEmptyStringsReturnsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringsWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateStringsWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateNotEmptyStringsWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateNotEmptyStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndStringLiteralWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateEmptyStringAndStringLiteralWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringLiteralAndStringWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateStringLiteralAndStringWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndCharWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateEmptyStringAndCharWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateCharAndStringWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/0::ConcatenateCharAndStringWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendEmptyStringWorks" id="cpptest.provider://stringTyped_test/0::UnsafeAppendEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendFittingStringWorks" id="cpptest.provider://stringTyped_test/0::UnsafeAppendFittingStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendTooLargeStringFails" id="cpptest.provider://stringTyped_test/0::UnsafeAppendTooLargeStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendEmptyStringLiteralWorks" id="cpptest.provider://stringTyped_test/0::UnsafeAppendEmptyStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendNullCharWorks" id="cpptest.provider://stringTyped_test/0::UnsafeAppendNullCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendCharWorks" id="cpptest.provider://stringTyped_test/0::UnsafeAppendCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendWithCharFailsWhenCapacityIsExceeded" id="cpptest.provider://stringTyped_test/0::UnsafeAppendWithCharFailsWhenCapacityIsExceeded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendWithCharToEmptyStringWorks" id="cpptest.provider://stringTyped_test/0::UnsafeAppendWithCharToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendEmptyStringWorks" id="cpptest.provider://stringTyped_test/0::AppendEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/0::AppendStringToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/0::AppendStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendTooLargeStringResultsInTruncatedString" id="cpptest.provider://stringTyped_test/0::AppendTooLargeStringResultsInTruncatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendEmptyStringLiteralWorks" id="cpptest.provider://stringTyped_test/0::AppendEmptyStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringLiteralToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/0::AppendStringLiteralToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringContainingNullWorks" id="cpptest.provider://stringTyped_test/0::AppendStringContainingNullWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendNullCharWorks" id="cpptest.provider://stringTyped_test/0::AppendNullCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/0::AppendCharToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/0::AppendCharResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharDoesNotChangeStringWhenCapacityIsExceeded" id="cpptest.provider://stringTyped_test/0::AppendCharDoesNotChangeStringWhenCapacityIsExceeded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubstrWithDefaultPosAndSizeResultsInWholeString" id="cpptest.provider://stringTyped_test/0::SubstrWithDefaultPosAndSizeResultsInWholeString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubstrWithInvalidPosFails" id="cpptest.provider://stringTyped_test/0::SubstrWithInvalidPosFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindEmptyStringInEmptyStringWorks" id="cpptest.provider://stringTyped_test/0::FindEmptyStringInEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/0::FindStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfFailsForEmptyStringInEmptyString" id="cpptest.provider://stringTyped_test/0::FindFirstOfFailsForEmptyStringInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfForStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/0::FindFirstOfForStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfFailsForEmptyStringInEmptyString" id="cpptest.provider://stringTyped_test/0::FindLastOfFailsForEmptyStringInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfForStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/0::FindLastOfForStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaAtFails" id="cpptest.provider://stringTyped_test/0::AccessPositionOfEmptyStringViaAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaAtFails" id="cpptest.provider://stringTyped_test/0::AccessPositionOutOfBoundsViaAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNonEmptyStringViaAtReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/0::AccessFirstPositionOfNonEmptyStringViaAtReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessAndAssignToMaxPositionOfNotEmptyStringViaAtSucceeds" id="cpptest.provider://stringTyped_test/0::AccessAndAssignToMaxPositionOfNotEmptyStringViaAtSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaConstAtFails" id="cpptest.provider://stringTyped_test/0::AccessPositionOfEmptyStringViaConstAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaConstAtFails" id="cpptest.provider://stringTyped_test/0::AccessPositionOutOfBoundsViaConstAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaConstAtReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/0::AccessFirstPositionOfNotEmptyStringViaConstAtReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessMaxPositionOfNotEmptyStringViaConstAtSucceeds" id="cpptest.provider://stringTyped_test/0::AccessMaxPositionOfNotEmptyStringViaConstAtSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/0::AccessPositionOfEmptyStringViaSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/0::AccessPositionOutOfBoundsViaSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaSubscriptOperatorReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/0::AccessFirstPositionOfNotEmptyStringViaSubscriptOperatorReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessAndAssignToMaxPositionOfNotEmptyStringViaSubscriptOperatorSucceeds" id="cpptest.provider://stringTyped_test/0::AccessAndAssignToMaxPositionOfNotEmptyStringViaSubscriptOperatorSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaConstSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/0::AccessPositionOfEmptyStringViaConstSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaConstSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/0::AccessPositionOutOfBoundsViaConstSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaConstSubscriptOperatorReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/0::AccessFirstPositionOfNotEmptyStringViaConstSubscriptOperatorReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessMaxPositionOfNotEmptyStringViaConstSubscriptOperatorSucceeds" id="cpptest.provider://stringTyped_test/0::AccessMaxPositionOfNotEmptyStringViaConstSubscriptOperatorSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralToEmptyStringWorks" id="cpptest.provider://stringTyped_test/0::InsertStringLiteralToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertEmptyStringLiteralDoesNotChangeTheString" id="cpptest.provider://stringTyped_test/0::InsertEmptyStringLiteralDoesNotChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralWithCountGreaterThanSizeOfStringLiteralFails" id="cpptest.provider://stringTyped_test/0::InsertStringLiteralWithCountGreaterThanSizeOfStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralWithCount0DoesntChangeTheString" id="cpptest.provider://stringTyped_test/0::InsertStringLiteralWithCount0DoesntChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringToEmptyStringWorks" id="cpptest.provider://stringTyped_test/0::InsertCxxStringToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertEmptyCxxStringDoesNotChangeTheString" id="cpptest.provider://stringTyped_test/0::InsertEmptyCxxStringDoesNotChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringWithCountGreaterThanSizeOfStringLiteralFails" id="cpptest.provider://stringTyped_test/0::InsertCxxStringWithCountGreaterThanSizeOfStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringWithCount0DoesntChangeTheString" id="cpptest.provider://stringTyped_test/0::InsertCxxStringWithCount0DoesntChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UncheckedAtWorks" id="cpptest.provider://stringTyped_test/0::UncheckedAtWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="stringTyped_test/1" id="cpptest.provider://stringTyped_test/1" total="184" fail="0" err="0" pass="184" >
                  <Test ln="1" auth="" locRef="" name="EmptyInitializationResultsInSize0" id="cpptest.provider://stringTyped_test/1::EmptyInitializationResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmptyInitializationResultsInEmptyString" id="cpptest.provider://stringTyped_test/1::EmptyInitializationResultsInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructEmptyStringResultsInSize0" id="cpptest.provider://stringTyped_test/1::CopyConstructEmptyStringResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::CopyConstructStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSize0Works" id="cpptest.provider://stringTyped_test/1::MoveConstructionWithStringOfSize0Works" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSizeSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::MoveConstructionWithStringOfSizeSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSizeCapaWorks" id="cpptest.provider://stringTyped_test/1::MoveConstructionWithStringOfSizeCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfCopyAssignmentExcluded" id="cpptest.provider://stringTyped_test/1::SelfCopyAssignmentExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSize0Works" id="cpptest.provider://stringTyped_test/1::CopyAssignmentWithStringOfSize0Works" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSizeSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::CopyAssignmentWithStringOfSizeSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSizeCapaWorks" id="cpptest.provider://stringTyped_test/1::CopyAssignmentWithStringOfSizeCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfMoveAssignmentExcluded" id="cpptest.provider://stringTyped_test/1::SelfMoveAssignmentExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/1::MoveAssignmentOfStringWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSmallerSizeResultsInSmallerSize" id="cpptest.provider://stringTyped_test/1::MoveAssignmentOfStringWithSmallerSizeResultsInSmallerSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::MoveAssignmentOfStringWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CharToStringConvConstrWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/1::CharToStringConvConstrWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CharToStringConvConstrWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::CharToStringConvConstrWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/1::UnsafeCharToStringConvConstrWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::UnsafeCharToStringConvConstrWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSizeGreaterCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::UnsafeCharToStringConvConstrWithSizeGreaterCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithNullPtrResultsEmptyString" id="cpptest.provider://stringTyped_test/1::UnsafeCharToStringConvConstrWithNullPtrResultsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCount0ResultsInSize0" id="cpptest.provider://stringTyped_test/1::UnsafeCharToStringConstrWithCount0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCountEqCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::UnsafeCharToStringConstrWithCountEqCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCountGreaterCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::UnsafeCharToStringConstrWithCountGreaterCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithNullPtrResultsEmptyString" id="cpptest.provider://stringTyped_test/1::UnsafeCharToStringConstrWithNullPtrResultsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSize0WithOperatorResultsInSize0" id="cpptest.provider://stringTyped_test/1::AssignCStringOfSize0WithOperatorResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSizeCapaWithOperatorResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::AssignCStringOfSizeCapaWithOperatorResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfAssignmentIsExcluded" id="cpptest.provider://stringTyped_test/1::SelfAssignmentIsExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/1::AssignStringOfSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::AssignStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSize0AndSmallerCapaResultsInSize0" id="cpptest.provider://stringTyped_test/1::AssignStringOfSize0AndSmallerCapaResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::AssignStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FreshlyAssignNothingResultsInZeroSize" id="cpptest.provider://stringTyped_test/1::FreshlyAssignNothingResultsInZeroSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReassignNothingResultsInZeroSize" id="cpptest.provider://stringTyped_test/1::ReassignNothingResultsInZeroSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::AssignCStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCStringOfSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/1::UnsafeAssignOfCStringOfSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCStringOfSize1ResultsInSize1" id="cpptest.provider://stringTyped_test/1::UnsafeAssignOfCStringOfSize1ResultsInSize1" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignCStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/1::UnsafeAssignCStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignCStringOfSizeGreaterCapaResultsInSize0" id="cpptest.provider://stringTyped_test/1::UnsafeAssignCStringOfSizeGreaterCapaResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfInvalidCStringFails" id="cpptest.provider://stringTyped_test/1::UnsafeAssignOfInvalidCStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCharPointerPointingToSameAddress" id="cpptest.provider://stringTyped_test/1::UnsafeAssignOfCharPointerPointingToSameAddress" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfNullptrFails" id="cpptest.provider://stringTyped_test/1::UnsafeAssignOfNullptrFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringsResultsInZero" id="cpptest.provider://stringTyped_test/1::CompareEqStringsResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultNegative" id="cpptest.provider://stringTyped_test/1::CompareResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultPositive" id="cpptest.provider://stringTyped_test/1::CompareResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyStringResultsInPositive" id="cpptest.provider://stringTyped_test/1::CompareWithEmptyStringResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringsWithDifferentCapaResultsInZero" id="cpptest.provider://stringTyped_test/1::CompareEqStringsWithDifferentCapaResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultNegativeWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareResultNegativeWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultPositiveWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareResultPositiveWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyStringOfDifferentCapaResultsInPositive" id="cpptest.provider://stringTyped_test/1::CompareWithEmptyStringOfDifferentCapaResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultTrue" id="cpptest.provider://stringTyped_test/1::CompareOperatorEqualResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultFalse" id="cpptest.provider://stringTyped_test/1::CompareOperatorEqualResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorEqualResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorEqualResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultFalse" id="cpptest.provider://stringTyped_test/1::CompareOperatorNotEqualResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultTrue" id="cpptest.provider://stringTyped_test/1::CompareOperatorNotEqualResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorNotEqualResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorNotEqualResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultTrue" id="cpptest.provider://stringTyped_test/1::CompareOperatorLessResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultFalse" id="cpptest.provider://stringTyped_test/1::CompareOperatorLessResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorLessResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorLessResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultTrue" id="cpptest.provider://stringTyped_test/1::CompareOperatorLessEqResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultFalse" id="cpptest.provider://stringTyped_test/1::CompareOperatorLessEqResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorLessEqResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorLessEqResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultTrue" id="cpptest.provider://stringTyped_test/1::CompareOperatorGreaterResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultFalse" id="cpptest.provider://stringTyped_test/1::CompareOperatorGreaterResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorGreaterResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorGreaterResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultTrue" id="cpptest.provider://stringTyped_test/1::CompareOperatorGreaterEqResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultFalse" id="cpptest.provider://stringTyped_test/1::CompareOperatorGreaterEqResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorGreaterEqResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorGreaterEqResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqCharArrayResultsInZero" id="cpptest.provider://stringTyped_test/1::CompareEqCharArrayResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultNegative" id="cpptest.provider://stringTyped_test/1::CompareWithCharArrayResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultPositive" id="cpptest.provider://stringTyped_test/1::CompareWithCharArrayResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyCharArrayResultsInPositive" id="cpptest.provider://stringTyped_test/1::CompareWithEmptyCharArrayResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringAndCharArrayWithDifferentCapaResultsInZero" id="cpptest.provider://stringTyped_test/1::CompareEqStringAndCharArrayWithDifferentCapaResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultNegativeWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareWithCharArrayResultNegativeWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultPositiveWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareWithCharArrayResultPositiveWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyCharArrayOfDifferentCapaResultsInPositive" id="cpptest.provider://stringTyped_test/1::CompareWithEmptyCharArrayOfDifferentCapaResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualStringsWorks" id="cpptest.provider://stringTyped_test/1::CheckForEqualityWithEqualStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalStringsWorks" id="cpptest.provider://stringTyped_test/1::CheckForEqualityWithUnequalStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualStringWithDifferentCapaWorks" id="cpptest.provider://stringTyped_test/1::CheckForEqualityWithEqualStringWithDifferentCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalStringWithDifferentSizeWorks" id="cpptest.provider://stringTyped_test/1::CheckForEqualityWithUnequalStringWithDifferentSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentStrings" id="cpptest.provider://stringTyped_test/1::CompareOperatorsWithDifferentStrings" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualStrings" id="cpptest.provider://stringTyped_test/1::CompareOperatorsWithEqualStrings" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentStringWithDifferentSize" id="cpptest.provider://stringTyped_test/1::CompareOperatorsWithDifferentStringWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualStringWithDifferentCapa" id="cpptest.provider://stringTyped_test/1::CompareOperatorsWithEqualStringWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqCharResultsInZero" id="cpptest.provider://stringTyped_test/1::CompareEqCharResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultNegative" id="cpptest.provider://stringTyped_test/1::CompareWithCharResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultPositive" id="cpptest.provider://stringTyped_test/1::CompareWithCharResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultPositiveWithDifferentSize" id="cpptest.provider://stringTyped_test/1::CompareWithCharResultPositiveWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEmptyStringWithCharWorks" id="cpptest.provider://stringTyped_test/1::CompareEmptyStringWithCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualCharWorks" id="cpptest.provider://stringTyped_test/1::CheckForEqualityWithEqualCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalCharWorks" id="cpptest.provider://stringTyped_test/1::CheckForEqualityWithUnequalCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithCharWithDifferentSizeWorks" id="cpptest.provider://stringTyped_test/1::CheckForEqualityWithCharWithDifferentSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentChar" id="cpptest.provider://stringTyped_test/1::CompareOperatorsWithDifferentChar" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualChar" id="cpptest.provider://stringTyped_test/1::CompareOperatorsWithEqualChar" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentCharWithDifferentSize" id="cpptest.provider://stringTyped_test/1::CompareOperatorsWithDifferentCharWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewlyCreatedStringIsEmpty" id="cpptest.provider://stringTyped_test/1::NewlyCreatedStringIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StringWithContentIsNotEmtpy" id="cpptest.provider://stringTyped_test/1::StringWithContentIsNotEmtpy" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ClearEmptyStringDoesNotChangeString" id="cpptest.provider://stringTyped_test/1::ClearEmptyStringDoesNotChangeString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ClearNotEmptyStringResultsInEmptyStringWithUnchangedCapacity" id="cpptest.provider://stringTyped_test/1::ClearNotEmptyStringResultsInEmptyStringWithUnchangedCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ChangeStringAfterClearWorks" id="cpptest.provider://stringTyped_test/1::ChangeStringAfterClearWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstrWithEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::ConstrWithEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstrWithStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::ConstrWithStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstrWithEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::MoveConstrWithEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstrWithStringSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::MoveConstrWithStringSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::AssignmentOfStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::AssignmentOfEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfNotEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::AssignmentOfNotEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::MoveAssignmentOfEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::MoveAssignmentOfStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfNotEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/1::MoveAssignmentOfNotEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoEmptyStringsReturnsEmptyStringWithTotalCapa" id="cpptest.provider://stringTyped_test/1::ConcatenateTwoEmptyStringsReturnsEmptyStringWithTotalCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoStringsWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateTwoStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoNotEmptyStringsWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateTwoNotEmptyStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateThreeStringsWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateThreeStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndStringLiteralWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateEmptyStringAndStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringLiteralAndStringWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateStringLiteralAndStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndNullCharReturnsStringWithSizeOne" id="cpptest.provider://stringTyped_test/1::ConcatenateEmptyStringAndNullCharReturnsStringWithSizeOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndCharWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateEmptyStringAndCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringAndCharWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateStringAndCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringsReturnsEmptyString" id="cpptest.provider://stringTyped_test/1::ConcatenateEmptyStringsReturnsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringsWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateStringsWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateNotEmptyStringsWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateNotEmptyStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndStringLiteralWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateEmptyStringAndStringLiteralWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringLiteralAndStringWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateStringLiteralAndStringWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndCharWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateEmptyStringAndCharWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateCharAndStringWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/1::ConcatenateCharAndStringWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendEmptyStringWorks" id="cpptest.provider://stringTyped_test/1::UnsafeAppendEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendFittingStringWorks" id="cpptest.provider://stringTyped_test/1::UnsafeAppendFittingStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendTooLargeStringFails" id="cpptest.provider://stringTyped_test/1::UnsafeAppendTooLargeStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendEmptyStringLiteralWorks" id="cpptest.provider://stringTyped_test/1::UnsafeAppendEmptyStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendNullCharWorks" id="cpptest.provider://stringTyped_test/1::UnsafeAppendNullCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendCharWorks" id="cpptest.provider://stringTyped_test/1::UnsafeAppendCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendWithCharFailsWhenCapacityIsExceeded" id="cpptest.provider://stringTyped_test/1::UnsafeAppendWithCharFailsWhenCapacityIsExceeded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendWithCharToEmptyStringWorks" id="cpptest.provider://stringTyped_test/1::UnsafeAppendWithCharToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendEmptyStringWorks" id="cpptest.provider://stringTyped_test/1::AppendEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/1::AppendStringToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/1::AppendStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendTooLargeStringResultsInTruncatedString" id="cpptest.provider://stringTyped_test/1::AppendTooLargeStringResultsInTruncatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendEmptyStringLiteralWorks" id="cpptest.provider://stringTyped_test/1::AppendEmptyStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringLiteralToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/1::AppendStringLiteralToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringContainingNullWorks" id="cpptest.provider://stringTyped_test/1::AppendStringContainingNullWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendNullCharWorks" id="cpptest.provider://stringTyped_test/1::AppendNullCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/1::AppendCharToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/1::AppendCharResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharDoesNotChangeStringWhenCapacityIsExceeded" id="cpptest.provider://stringTyped_test/1::AppendCharDoesNotChangeStringWhenCapacityIsExceeded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubstrWithDefaultPosAndSizeResultsInWholeString" id="cpptest.provider://stringTyped_test/1::SubstrWithDefaultPosAndSizeResultsInWholeString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubstrWithInvalidPosFails" id="cpptest.provider://stringTyped_test/1::SubstrWithInvalidPosFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindEmptyStringInEmptyStringWorks" id="cpptest.provider://stringTyped_test/1::FindEmptyStringInEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/1::FindStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfFailsForEmptyStringInEmptyString" id="cpptest.provider://stringTyped_test/1::FindFirstOfFailsForEmptyStringInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfForStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/1::FindFirstOfForStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfFailsForEmptyStringInEmptyString" id="cpptest.provider://stringTyped_test/1::FindLastOfFailsForEmptyStringInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfForStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/1::FindLastOfForStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaAtFails" id="cpptest.provider://stringTyped_test/1::AccessPositionOfEmptyStringViaAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaAtFails" id="cpptest.provider://stringTyped_test/1::AccessPositionOutOfBoundsViaAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNonEmptyStringViaAtReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/1::AccessFirstPositionOfNonEmptyStringViaAtReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessAndAssignToMaxPositionOfNotEmptyStringViaAtSucceeds" id="cpptest.provider://stringTyped_test/1::AccessAndAssignToMaxPositionOfNotEmptyStringViaAtSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaConstAtFails" id="cpptest.provider://stringTyped_test/1::AccessPositionOfEmptyStringViaConstAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaConstAtFails" id="cpptest.provider://stringTyped_test/1::AccessPositionOutOfBoundsViaConstAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaConstAtReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/1::AccessFirstPositionOfNotEmptyStringViaConstAtReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessMaxPositionOfNotEmptyStringViaConstAtSucceeds" id="cpptest.provider://stringTyped_test/1::AccessMaxPositionOfNotEmptyStringViaConstAtSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/1::AccessPositionOfEmptyStringViaSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/1::AccessPositionOutOfBoundsViaSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaSubscriptOperatorReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/1::AccessFirstPositionOfNotEmptyStringViaSubscriptOperatorReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessAndAssignToMaxPositionOfNotEmptyStringViaSubscriptOperatorSucceeds" id="cpptest.provider://stringTyped_test/1::AccessAndAssignToMaxPositionOfNotEmptyStringViaSubscriptOperatorSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaConstSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/1::AccessPositionOfEmptyStringViaConstSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaConstSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/1::AccessPositionOutOfBoundsViaConstSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaConstSubscriptOperatorReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/1::AccessFirstPositionOfNotEmptyStringViaConstSubscriptOperatorReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessMaxPositionOfNotEmptyStringViaConstSubscriptOperatorSucceeds" id="cpptest.provider://stringTyped_test/1::AccessMaxPositionOfNotEmptyStringViaConstSubscriptOperatorSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralToEmptyStringWorks" id="cpptest.provider://stringTyped_test/1::InsertStringLiteralToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertEmptyStringLiteralDoesNotChangeTheString" id="cpptest.provider://stringTyped_test/1::InsertEmptyStringLiteralDoesNotChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralWithCountGreaterThanSizeOfStringLiteralFails" id="cpptest.provider://stringTyped_test/1::InsertStringLiteralWithCountGreaterThanSizeOfStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralWithCount0DoesntChangeTheString" id="cpptest.provider://stringTyped_test/1::InsertStringLiteralWithCount0DoesntChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringToEmptyStringWorks" id="cpptest.provider://stringTyped_test/1::InsertCxxStringToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertEmptyCxxStringDoesNotChangeTheString" id="cpptest.provider://stringTyped_test/1::InsertEmptyCxxStringDoesNotChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringWithCountGreaterThanSizeOfStringLiteralFails" id="cpptest.provider://stringTyped_test/1::InsertCxxStringWithCountGreaterThanSizeOfStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringWithCount0DoesntChangeTheString" id="cpptest.provider://stringTyped_test/1::InsertCxxStringWithCount0DoesntChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UncheckedAtWorks" id="cpptest.provider://stringTyped_test/1::UncheckedAtWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="stringTyped_test/2" id="cpptest.provider://stringTyped_test/2" total="184" fail="0" err="0" pass="184" >
                  <Test ln="1" auth="" locRef="" name="EmptyInitializationResultsInSize0" id="cpptest.provider://stringTyped_test/2::EmptyInitializationResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmptyInitializationResultsInEmptyString" id="cpptest.provider://stringTyped_test/2::EmptyInitializationResultsInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructEmptyStringResultsInSize0" id="cpptest.provider://stringTyped_test/2::CopyConstructEmptyStringResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::CopyConstructStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSize0Works" id="cpptest.provider://stringTyped_test/2::MoveConstructionWithStringOfSize0Works" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSizeSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::MoveConstructionWithStringOfSizeSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSizeCapaWorks" id="cpptest.provider://stringTyped_test/2::MoveConstructionWithStringOfSizeCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfCopyAssignmentExcluded" id="cpptest.provider://stringTyped_test/2::SelfCopyAssignmentExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSize0Works" id="cpptest.provider://stringTyped_test/2::CopyAssignmentWithStringOfSize0Works" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSizeSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::CopyAssignmentWithStringOfSizeSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSizeCapaWorks" id="cpptest.provider://stringTyped_test/2::CopyAssignmentWithStringOfSizeCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfMoveAssignmentExcluded" id="cpptest.provider://stringTyped_test/2::SelfMoveAssignmentExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/2::MoveAssignmentOfStringWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSmallerSizeResultsInSmallerSize" id="cpptest.provider://stringTyped_test/2::MoveAssignmentOfStringWithSmallerSizeResultsInSmallerSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::MoveAssignmentOfStringWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CharToStringConvConstrWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/2::CharToStringConvConstrWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CharToStringConvConstrWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::CharToStringConvConstrWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/2::UnsafeCharToStringConvConstrWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::UnsafeCharToStringConvConstrWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSizeGreaterCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::UnsafeCharToStringConvConstrWithSizeGreaterCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithNullPtrResultsEmptyString" id="cpptest.provider://stringTyped_test/2::UnsafeCharToStringConvConstrWithNullPtrResultsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCount0ResultsInSize0" id="cpptest.provider://stringTyped_test/2::UnsafeCharToStringConstrWithCount0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCountEqCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::UnsafeCharToStringConstrWithCountEqCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCountGreaterCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::UnsafeCharToStringConstrWithCountGreaterCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithNullPtrResultsEmptyString" id="cpptest.provider://stringTyped_test/2::UnsafeCharToStringConstrWithNullPtrResultsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSize0WithOperatorResultsInSize0" id="cpptest.provider://stringTyped_test/2::AssignCStringOfSize0WithOperatorResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSizeCapaWithOperatorResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::AssignCStringOfSizeCapaWithOperatorResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfAssignmentIsExcluded" id="cpptest.provider://stringTyped_test/2::SelfAssignmentIsExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/2::AssignStringOfSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::AssignStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSize0AndSmallerCapaResultsInSize0" id="cpptest.provider://stringTyped_test/2::AssignStringOfSize0AndSmallerCapaResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::AssignStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FreshlyAssignNothingResultsInZeroSize" id="cpptest.provider://stringTyped_test/2::FreshlyAssignNothingResultsInZeroSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReassignNothingResultsInZeroSize" id="cpptest.provider://stringTyped_test/2::ReassignNothingResultsInZeroSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::AssignCStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCStringOfSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/2::UnsafeAssignOfCStringOfSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCStringOfSize1ResultsInSize1" id="cpptest.provider://stringTyped_test/2::UnsafeAssignOfCStringOfSize1ResultsInSize1" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignCStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/2::UnsafeAssignCStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignCStringOfSizeGreaterCapaResultsInSize0" id="cpptest.provider://stringTyped_test/2::UnsafeAssignCStringOfSizeGreaterCapaResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfInvalidCStringFails" id="cpptest.provider://stringTyped_test/2::UnsafeAssignOfInvalidCStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCharPointerPointingToSameAddress" id="cpptest.provider://stringTyped_test/2::UnsafeAssignOfCharPointerPointingToSameAddress" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfNullptrFails" id="cpptest.provider://stringTyped_test/2::UnsafeAssignOfNullptrFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringsResultsInZero" id="cpptest.provider://stringTyped_test/2::CompareEqStringsResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultNegative" id="cpptest.provider://stringTyped_test/2::CompareResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultPositive" id="cpptest.provider://stringTyped_test/2::CompareResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyStringResultsInPositive" id="cpptest.provider://stringTyped_test/2::CompareWithEmptyStringResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringsWithDifferentCapaResultsInZero" id="cpptest.provider://stringTyped_test/2::CompareEqStringsWithDifferentCapaResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultNegativeWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareResultNegativeWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultPositiveWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareResultPositiveWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyStringOfDifferentCapaResultsInPositive" id="cpptest.provider://stringTyped_test/2::CompareWithEmptyStringOfDifferentCapaResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultTrue" id="cpptest.provider://stringTyped_test/2::CompareOperatorEqualResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultFalse" id="cpptest.provider://stringTyped_test/2::CompareOperatorEqualResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorEqualResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorEqualResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultFalse" id="cpptest.provider://stringTyped_test/2::CompareOperatorNotEqualResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultTrue" id="cpptest.provider://stringTyped_test/2::CompareOperatorNotEqualResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorNotEqualResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorNotEqualResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultTrue" id="cpptest.provider://stringTyped_test/2::CompareOperatorLessResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultFalse" id="cpptest.provider://stringTyped_test/2::CompareOperatorLessResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorLessResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorLessResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultTrue" id="cpptest.provider://stringTyped_test/2::CompareOperatorLessEqResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultFalse" id="cpptest.provider://stringTyped_test/2::CompareOperatorLessEqResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorLessEqResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorLessEqResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultTrue" id="cpptest.provider://stringTyped_test/2::CompareOperatorGreaterResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultFalse" id="cpptest.provider://stringTyped_test/2::CompareOperatorGreaterResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorGreaterResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorGreaterResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultTrue" id="cpptest.provider://stringTyped_test/2::CompareOperatorGreaterEqResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultFalse" id="cpptest.provider://stringTyped_test/2::CompareOperatorGreaterEqResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorGreaterEqResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorGreaterEqResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqCharArrayResultsInZero" id="cpptest.provider://stringTyped_test/2::CompareEqCharArrayResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultNegative" id="cpptest.provider://stringTyped_test/2::CompareWithCharArrayResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultPositive" id="cpptest.provider://stringTyped_test/2::CompareWithCharArrayResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyCharArrayResultsInPositive" id="cpptest.provider://stringTyped_test/2::CompareWithEmptyCharArrayResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringAndCharArrayWithDifferentCapaResultsInZero" id="cpptest.provider://stringTyped_test/2::CompareEqStringAndCharArrayWithDifferentCapaResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultNegativeWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareWithCharArrayResultNegativeWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultPositiveWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareWithCharArrayResultPositiveWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyCharArrayOfDifferentCapaResultsInPositive" id="cpptest.provider://stringTyped_test/2::CompareWithEmptyCharArrayOfDifferentCapaResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualStringsWorks" id="cpptest.provider://stringTyped_test/2::CheckForEqualityWithEqualStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalStringsWorks" id="cpptest.provider://stringTyped_test/2::CheckForEqualityWithUnequalStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualStringWithDifferentCapaWorks" id="cpptest.provider://stringTyped_test/2::CheckForEqualityWithEqualStringWithDifferentCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalStringWithDifferentSizeWorks" id="cpptest.provider://stringTyped_test/2::CheckForEqualityWithUnequalStringWithDifferentSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentStrings" id="cpptest.provider://stringTyped_test/2::CompareOperatorsWithDifferentStrings" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualStrings" id="cpptest.provider://stringTyped_test/2::CompareOperatorsWithEqualStrings" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentStringWithDifferentSize" id="cpptest.provider://stringTyped_test/2::CompareOperatorsWithDifferentStringWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualStringWithDifferentCapa" id="cpptest.provider://stringTyped_test/2::CompareOperatorsWithEqualStringWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqCharResultsInZero" id="cpptest.provider://stringTyped_test/2::CompareEqCharResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultNegative" id="cpptest.provider://stringTyped_test/2::CompareWithCharResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultPositive" id="cpptest.provider://stringTyped_test/2::CompareWithCharResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultPositiveWithDifferentSize" id="cpptest.provider://stringTyped_test/2::CompareWithCharResultPositiveWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEmptyStringWithCharWorks" id="cpptest.provider://stringTyped_test/2::CompareEmptyStringWithCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualCharWorks" id="cpptest.provider://stringTyped_test/2::CheckForEqualityWithEqualCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalCharWorks" id="cpptest.provider://stringTyped_test/2::CheckForEqualityWithUnequalCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithCharWithDifferentSizeWorks" id="cpptest.provider://stringTyped_test/2::CheckForEqualityWithCharWithDifferentSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentChar" id="cpptest.provider://stringTyped_test/2::CompareOperatorsWithDifferentChar" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualChar" id="cpptest.provider://stringTyped_test/2::CompareOperatorsWithEqualChar" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentCharWithDifferentSize" id="cpptest.provider://stringTyped_test/2::CompareOperatorsWithDifferentCharWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewlyCreatedStringIsEmpty" id="cpptest.provider://stringTyped_test/2::NewlyCreatedStringIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StringWithContentIsNotEmtpy" id="cpptest.provider://stringTyped_test/2::StringWithContentIsNotEmtpy" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ClearEmptyStringDoesNotChangeString" id="cpptest.provider://stringTyped_test/2::ClearEmptyStringDoesNotChangeString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ClearNotEmptyStringResultsInEmptyStringWithUnchangedCapacity" id="cpptest.provider://stringTyped_test/2::ClearNotEmptyStringResultsInEmptyStringWithUnchangedCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ChangeStringAfterClearWorks" id="cpptest.provider://stringTyped_test/2::ChangeStringAfterClearWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstrWithEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::ConstrWithEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstrWithStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::ConstrWithStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstrWithEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::MoveConstrWithEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstrWithStringSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::MoveConstrWithStringSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::AssignmentOfStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::AssignmentOfEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfNotEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::AssignmentOfNotEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::MoveAssignmentOfEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::MoveAssignmentOfStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfNotEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/2::MoveAssignmentOfNotEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoEmptyStringsReturnsEmptyStringWithTotalCapa" id="cpptest.provider://stringTyped_test/2::ConcatenateTwoEmptyStringsReturnsEmptyStringWithTotalCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoStringsWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateTwoStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoNotEmptyStringsWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateTwoNotEmptyStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateThreeStringsWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateThreeStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndStringLiteralWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateEmptyStringAndStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringLiteralAndStringWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateStringLiteralAndStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndNullCharReturnsStringWithSizeOne" id="cpptest.provider://stringTyped_test/2::ConcatenateEmptyStringAndNullCharReturnsStringWithSizeOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndCharWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateEmptyStringAndCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringAndCharWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateStringAndCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringsReturnsEmptyString" id="cpptest.provider://stringTyped_test/2::ConcatenateEmptyStringsReturnsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringsWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateStringsWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateNotEmptyStringsWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateNotEmptyStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndStringLiteralWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateEmptyStringAndStringLiteralWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringLiteralAndStringWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateStringLiteralAndStringWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndCharWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateEmptyStringAndCharWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateCharAndStringWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/2::ConcatenateCharAndStringWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendEmptyStringWorks" id="cpptest.provider://stringTyped_test/2::UnsafeAppendEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendFittingStringWorks" id="cpptest.provider://stringTyped_test/2::UnsafeAppendFittingStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendTooLargeStringFails" id="cpptest.provider://stringTyped_test/2::UnsafeAppendTooLargeStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendEmptyStringLiteralWorks" id="cpptest.provider://stringTyped_test/2::UnsafeAppendEmptyStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendNullCharWorks" id="cpptest.provider://stringTyped_test/2::UnsafeAppendNullCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendCharWorks" id="cpptest.provider://stringTyped_test/2::UnsafeAppendCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendWithCharFailsWhenCapacityIsExceeded" id="cpptest.provider://stringTyped_test/2::UnsafeAppendWithCharFailsWhenCapacityIsExceeded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendWithCharToEmptyStringWorks" id="cpptest.provider://stringTyped_test/2::UnsafeAppendWithCharToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendEmptyStringWorks" id="cpptest.provider://stringTyped_test/2::AppendEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/2::AppendStringToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/2::AppendStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendTooLargeStringResultsInTruncatedString" id="cpptest.provider://stringTyped_test/2::AppendTooLargeStringResultsInTruncatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendEmptyStringLiteralWorks" id="cpptest.provider://stringTyped_test/2::AppendEmptyStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringLiteralToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/2::AppendStringLiteralToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringContainingNullWorks" id="cpptest.provider://stringTyped_test/2::AppendStringContainingNullWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendNullCharWorks" id="cpptest.provider://stringTyped_test/2::AppendNullCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/2::AppendCharToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/2::AppendCharResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharDoesNotChangeStringWhenCapacityIsExceeded" id="cpptest.provider://stringTyped_test/2::AppendCharDoesNotChangeStringWhenCapacityIsExceeded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubstrWithDefaultPosAndSizeResultsInWholeString" id="cpptest.provider://stringTyped_test/2::SubstrWithDefaultPosAndSizeResultsInWholeString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubstrWithInvalidPosFails" id="cpptest.provider://stringTyped_test/2::SubstrWithInvalidPosFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindEmptyStringInEmptyStringWorks" id="cpptest.provider://stringTyped_test/2::FindEmptyStringInEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/2::FindStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfFailsForEmptyStringInEmptyString" id="cpptest.provider://stringTyped_test/2::FindFirstOfFailsForEmptyStringInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfForStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/2::FindFirstOfForStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfFailsForEmptyStringInEmptyString" id="cpptest.provider://stringTyped_test/2::FindLastOfFailsForEmptyStringInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfForStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/2::FindLastOfForStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaAtFails" id="cpptest.provider://stringTyped_test/2::AccessPositionOfEmptyStringViaAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaAtFails" id="cpptest.provider://stringTyped_test/2::AccessPositionOutOfBoundsViaAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNonEmptyStringViaAtReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/2::AccessFirstPositionOfNonEmptyStringViaAtReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessAndAssignToMaxPositionOfNotEmptyStringViaAtSucceeds" id="cpptest.provider://stringTyped_test/2::AccessAndAssignToMaxPositionOfNotEmptyStringViaAtSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaConstAtFails" id="cpptest.provider://stringTyped_test/2::AccessPositionOfEmptyStringViaConstAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaConstAtFails" id="cpptest.provider://stringTyped_test/2::AccessPositionOutOfBoundsViaConstAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaConstAtReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/2::AccessFirstPositionOfNotEmptyStringViaConstAtReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessMaxPositionOfNotEmptyStringViaConstAtSucceeds" id="cpptest.provider://stringTyped_test/2::AccessMaxPositionOfNotEmptyStringViaConstAtSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/2::AccessPositionOfEmptyStringViaSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/2::AccessPositionOutOfBoundsViaSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaSubscriptOperatorReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/2::AccessFirstPositionOfNotEmptyStringViaSubscriptOperatorReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessAndAssignToMaxPositionOfNotEmptyStringViaSubscriptOperatorSucceeds" id="cpptest.provider://stringTyped_test/2::AccessAndAssignToMaxPositionOfNotEmptyStringViaSubscriptOperatorSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaConstSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/2::AccessPositionOfEmptyStringViaConstSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaConstSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/2::AccessPositionOutOfBoundsViaConstSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaConstSubscriptOperatorReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/2::AccessFirstPositionOfNotEmptyStringViaConstSubscriptOperatorReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessMaxPositionOfNotEmptyStringViaConstSubscriptOperatorSucceeds" id="cpptest.provider://stringTyped_test/2::AccessMaxPositionOfNotEmptyStringViaConstSubscriptOperatorSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralToEmptyStringWorks" id="cpptest.provider://stringTyped_test/2::InsertStringLiteralToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertEmptyStringLiteralDoesNotChangeTheString" id="cpptest.provider://stringTyped_test/2::InsertEmptyStringLiteralDoesNotChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralWithCountGreaterThanSizeOfStringLiteralFails" id="cpptest.provider://stringTyped_test/2::InsertStringLiteralWithCountGreaterThanSizeOfStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralWithCount0DoesntChangeTheString" id="cpptest.provider://stringTyped_test/2::InsertStringLiteralWithCount0DoesntChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringToEmptyStringWorks" id="cpptest.provider://stringTyped_test/2::InsertCxxStringToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertEmptyCxxStringDoesNotChangeTheString" id="cpptest.provider://stringTyped_test/2::InsertEmptyCxxStringDoesNotChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringWithCountGreaterThanSizeOfStringLiteralFails" id="cpptest.provider://stringTyped_test/2::InsertCxxStringWithCountGreaterThanSizeOfStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringWithCount0DoesntChangeTheString" id="cpptest.provider://stringTyped_test/2::InsertCxxStringWithCount0DoesntChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UncheckedAtWorks" id="cpptest.provider://stringTyped_test/2::UncheckedAtWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="stringTyped_test/3" id="cpptest.provider://stringTyped_test/3" total="184" fail="0" err="0" pass="184" >
                  <Test ln="1" auth="" locRef="" name="EmptyInitializationResultsInSize0" id="cpptest.provider://stringTyped_test/3::EmptyInitializationResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmptyInitializationResultsInEmptyString" id="cpptest.provider://stringTyped_test/3::EmptyInitializationResultsInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructEmptyStringResultsInSize0" id="cpptest.provider://stringTyped_test/3::CopyConstructEmptyStringResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyConstructStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::CopyConstructStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSize0Works" id="cpptest.provider://stringTyped_test/3::MoveConstructionWithStringOfSize0Works" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSizeSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::MoveConstructionWithStringOfSizeSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstructionWithStringOfSizeCapaWorks" id="cpptest.provider://stringTyped_test/3::MoveConstructionWithStringOfSizeCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfCopyAssignmentExcluded" id="cpptest.provider://stringTyped_test/3::SelfCopyAssignmentExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSize0Works" id="cpptest.provider://stringTyped_test/3::CopyAssignmentWithStringOfSize0Works" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSizeSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::CopyAssignmentWithStringOfSizeSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithStringOfSizeCapaWorks" id="cpptest.provider://stringTyped_test/3::CopyAssignmentWithStringOfSizeCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfMoveAssignmentExcluded" id="cpptest.provider://stringTyped_test/3::SelfMoveAssignmentExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/3::MoveAssignmentOfStringWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSmallerSizeResultsInSmallerSize" id="cpptest.provider://stringTyped_test/3::MoveAssignmentOfStringWithSmallerSizeResultsInSmallerSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::MoveAssignmentOfStringWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CharToStringConvConstrWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/3::CharToStringConvConstrWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CharToStringConvConstrWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::CharToStringConvConstrWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/3::UnsafeCharToStringConvConstrWithSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::UnsafeCharToStringConvConstrWithSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithSizeGreaterCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::UnsafeCharToStringConvConstrWithSizeGreaterCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConvConstrWithNullPtrResultsEmptyString" id="cpptest.provider://stringTyped_test/3::UnsafeCharToStringConvConstrWithNullPtrResultsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCount0ResultsInSize0" id="cpptest.provider://stringTyped_test/3::UnsafeCharToStringConstrWithCount0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCountEqCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::UnsafeCharToStringConstrWithCountEqCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithCountGreaterCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::UnsafeCharToStringConstrWithCountGreaterCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrWithNullPtrResultsEmptyString" id="cpptest.provider://stringTyped_test/3::UnsafeCharToStringConstrWithNullPtrResultsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSize0WithOperatorResultsInSize0" id="cpptest.provider://stringTyped_test/3::AssignCStringOfSize0WithOperatorResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSizeCapaWithOperatorResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::AssignCStringOfSizeCapaWithOperatorResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SelfAssignmentIsExcluded" id="cpptest.provider://stringTyped_test/3::SelfAssignmentIsExcluded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/3::AssignStringOfSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::AssignStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringOfSize0AndSmallerCapaResultsInSize0" id="cpptest.provider://stringTyped_test/3::AssignStringOfSize0AndSmallerCapaResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::AssignStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FreshlyAssignNothingResultsInZeroSize" id="cpptest.provider://stringTyped_test/3::FreshlyAssignNothingResultsInZeroSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ReassignNothingResultsInZeroSize" id="cpptest.provider://stringTyped_test/3::ReassignNothingResultsInZeroSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignCStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::AssignCStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCStringOfSize0ResultsInSize0" id="cpptest.provider://stringTyped_test/3::UnsafeAssignOfCStringOfSize0ResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCStringOfSize1ResultsInSize1" id="cpptest.provider://stringTyped_test/3::UnsafeAssignOfCStringOfSize1ResultsInSize1" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignCStringOfSizeCapaResultsInSizeCapa" id="cpptest.provider://stringTyped_test/3::UnsafeAssignCStringOfSizeCapaResultsInSizeCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignCStringOfSizeGreaterCapaResultsInSize0" id="cpptest.provider://stringTyped_test/3::UnsafeAssignCStringOfSizeGreaterCapaResultsInSize0" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfInvalidCStringFails" id="cpptest.provider://stringTyped_test/3::UnsafeAssignOfInvalidCStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfCharPointerPointingToSameAddress" id="cpptest.provider://stringTyped_test/3::UnsafeAssignOfCharPointerPointingToSameAddress" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAssignOfNullptrFails" id="cpptest.provider://stringTyped_test/3::UnsafeAssignOfNullptrFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringsResultsInZero" id="cpptest.provider://stringTyped_test/3::CompareEqStringsResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultNegative" id="cpptest.provider://stringTyped_test/3::CompareResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultPositive" id="cpptest.provider://stringTyped_test/3::CompareResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyStringResultsInPositive" id="cpptest.provider://stringTyped_test/3::CompareWithEmptyStringResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringsWithDifferentCapaResultsInZero" id="cpptest.provider://stringTyped_test/3::CompareEqStringsWithDifferentCapaResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultNegativeWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareResultNegativeWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareResultPositiveWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareResultPositiveWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyStringOfDifferentCapaResultsInPositive" id="cpptest.provider://stringTyped_test/3::CompareWithEmptyStringOfDifferentCapaResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultTrue" id="cpptest.provider://stringTyped_test/3::CompareOperatorEqualResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultFalse" id="cpptest.provider://stringTyped_test/3::CompareOperatorEqualResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorEqualResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorEqualResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorEqualResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultFalse" id="cpptest.provider://stringTyped_test/3::CompareOperatorNotEqualResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultTrue" id="cpptest.provider://stringTyped_test/3::CompareOperatorNotEqualResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorNotEqualResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorNotEqualResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorNotEqualResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultTrue" id="cpptest.provider://stringTyped_test/3::CompareOperatorLessResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultFalse" id="cpptest.provider://stringTyped_test/3::CompareOperatorLessResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorLessResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorLessResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultTrue" id="cpptest.provider://stringTyped_test/3::CompareOperatorLessEqResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultFalse" id="cpptest.provider://stringTyped_test/3::CompareOperatorLessEqResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorLessEqResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorLessEqResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorLessEqResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultTrue" id="cpptest.provider://stringTyped_test/3::CompareOperatorGreaterResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultFalse" id="cpptest.provider://stringTyped_test/3::CompareOperatorGreaterResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorGreaterResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorGreaterResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultTrue" id="cpptest.provider://stringTyped_test/3::CompareOperatorGreaterEqResultTrue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultFalse" id="cpptest.provider://stringTyped_test/3::CompareOperatorGreaterEqResultFalse" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultTrueWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorGreaterEqResultTrueWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorGreaterEqResultFalseWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorGreaterEqResultFalseWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqCharArrayResultsInZero" id="cpptest.provider://stringTyped_test/3::CompareEqCharArrayResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultNegative" id="cpptest.provider://stringTyped_test/3::CompareWithCharArrayResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultPositive" id="cpptest.provider://stringTyped_test/3::CompareWithCharArrayResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyCharArrayResultsInPositive" id="cpptest.provider://stringTyped_test/3::CompareWithEmptyCharArrayResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqStringAndCharArrayWithDifferentCapaResultsInZero" id="cpptest.provider://stringTyped_test/3::CompareEqStringAndCharArrayWithDifferentCapaResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultNegativeWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareWithCharArrayResultNegativeWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharArrayResultPositiveWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareWithCharArrayResultPositiveWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithEmptyCharArrayOfDifferentCapaResultsInPositive" id="cpptest.provider://stringTyped_test/3::CompareWithEmptyCharArrayOfDifferentCapaResultsInPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualStringsWorks" id="cpptest.provider://stringTyped_test/3::CheckForEqualityWithEqualStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalStringsWorks" id="cpptest.provider://stringTyped_test/3::CheckForEqualityWithUnequalStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualStringWithDifferentCapaWorks" id="cpptest.provider://stringTyped_test/3::CheckForEqualityWithEqualStringWithDifferentCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalStringWithDifferentSizeWorks" id="cpptest.provider://stringTyped_test/3::CheckForEqualityWithUnequalStringWithDifferentSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentStrings" id="cpptest.provider://stringTyped_test/3::CompareOperatorsWithDifferentStrings" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualStrings" id="cpptest.provider://stringTyped_test/3::CompareOperatorsWithEqualStrings" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentStringWithDifferentSize" id="cpptest.provider://stringTyped_test/3::CompareOperatorsWithDifferentStringWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualStringWithDifferentCapa" id="cpptest.provider://stringTyped_test/3::CompareOperatorsWithEqualStringWithDifferentCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEqCharResultsInZero" id="cpptest.provider://stringTyped_test/3::CompareEqCharResultsInZero" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultNegative" id="cpptest.provider://stringTyped_test/3::CompareWithCharResultNegative" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultPositive" id="cpptest.provider://stringTyped_test/3::CompareWithCharResultPositive" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareWithCharResultPositiveWithDifferentSize" id="cpptest.provider://stringTyped_test/3::CompareWithCharResultPositiveWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareEmptyStringWithCharWorks" id="cpptest.provider://stringTyped_test/3::CompareEmptyStringWithCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithEqualCharWorks" id="cpptest.provider://stringTyped_test/3::CheckForEqualityWithEqualCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithUnequalCharWorks" id="cpptest.provider://stringTyped_test/3::CheckForEqualityWithUnequalCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CheckForEqualityWithCharWithDifferentSizeWorks" id="cpptest.provider://stringTyped_test/3::CheckForEqualityWithCharWithDifferentSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentChar" id="cpptest.provider://stringTyped_test/3::CompareOperatorsWithDifferentChar" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithEqualChar" id="cpptest.provider://stringTyped_test/3::CompareOperatorsWithEqualChar" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareOperatorsWithDifferentCharWithDifferentSize" id="cpptest.provider://stringTyped_test/3::CompareOperatorsWithDifferentCharWithDifferentSize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="NewlyCreatedStringIsEmpty" id="cpptest.provider://stringTyped_test/3::NewlyCreatedStringIsEmpty" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="StringWithContentIsNotEmtpy" id="cpptest.provider://stringTyped_test/3::StringWithContentIsNotEmtpy" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ClearEmptyStringDoesNotChangeString" id="cpptest.provider://stringTyped_test/3::ClearEmptyStringDoesNotChangeString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ClearNotEmptyStringResultsInEmptyStringWithUnchangedCapacity" id="cpptest.provider://stringTyped_test/3::ClearNotEmptyStringResultsInEmptyStringWithUnchangedCapacity" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ChangeStringAfterClearWorks" id="cpptest.provider://stringTyped_test/3::ChangeStringAfterClearWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstrWithEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::ConstrWithEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstrWithStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::ConstrWithStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstrWithEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::MoveConstrWithEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveConstrWithStringSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::MoveConstrWithStringSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::AssignmentOfStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::AssignmentOfEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignmentOfNotEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::AssignmentOfNotEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::MoveAssignmentOfEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::MoveAssignmentOfStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentOfNotEmptyStringWithSmallerCapaWorks" id="cpptest.provider://stringTyped_test/3::MoveAssignmentOfNotEmptyStringWithSmallerCapaWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoEmptyStringsReturnsEmptyStringWithTotalCapa" id="cpptest.provider://stringTyped_test/3::ConcatenateTwoEmptyStringsReturnsEmptyStringWithTotalCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoStringsWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateTwoStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateTwoNotEmptyStringsWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateTwoNotEmptyStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateThreeStringsWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateThreeStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndStringLiteralWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateEmptyStringAndStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringLiteralAndStringWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateStringLiteralAndStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndNullCharReturnsStringWithSizeOne" id="cpptest.provider://stringTyped_test/3::ConcatenateEmptyStringAndNullCharReturnsStringWithSizeOne" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndCharWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateEmptyStringAndCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringAndCharWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateStringAndCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringsReturnsEmptyString" id="cpptest.provider://stringTyped_test/3::ConcatenateEmptyStringsReturnsEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringsWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateStringsWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateNotEmptyStringsWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateNotEmptyStringsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndStringLiteralWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateEmptyStringAndStringLiteralWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateStringLiteralAndStringWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateStringLiteralAndStringWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateEmptyStringAndCharWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateEmptyStringAndCharWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConcatenateCharAndStringWithOperatorPlusWorks" id="cpptest.provider://stringTyped_test/3::ConcatenateCharAndStringWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendEmptyStringWorks" id="cpptest.provider://stringTyped_test/3::UnsafeAppendEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendFittingStringWorks" id="cpptest.provider://stringTyped_test/3::UnsafeAppendFittingStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendTooLargeStringFails" id="cpptest.provider://stringTyped_test/3::UnsafeAppendTooLargeStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendEmptyStringLiteralWorks" id="cpptest.provider://stringTyped_test/3::UnsafeAppendEmptyStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendNullCharWorks" id="cpptest.provider://stringTyped_test/3::UnsafeAppendNullCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendCharWorks" id="cpptest.provider://stringTyped_test/3::UnsafeAppendCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendWithCharFailsWhenCapacityIsExceeded" id="cpptest.provider://stringTyped_test/3::UnsafeAppendWithCharFailsWhenCapacityIsExceeded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendWithCharToEmptyStringWorks" id="cpptest.provider://stringTyped_test/3::UnsafeAppendWithCharToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendEmptyStringWorks" id="cpptest.provider://stringTyped_test/3::AppendEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/3::AppendStringToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/3::AppendStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendTooLargeStringResultsInTruncatedString" id="cpptest.provider://stringTyped_test/3::AppendTooLargeStringResultsInTruncatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendEmptyStringLiteralWorks" id="cpptest.provider://stringTyped_test/3::AppendEmptyStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringLiteralToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/3::AppendStringLiteralToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringContainingNullWorks" id="cpptest.provider://stringTyped_test/3::AppendStringContainingNullWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendNullCharWorks" id="cpptest.provider://stringTyped_test/3::AppendNullCharWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharToEmptyStringResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/3::AppendCharToEmptyStringResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharResultsInConcatenatedString" id="cpptest.provider://stringTyped_test/3::AppendCharResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendCharDoesNotChangeStringWhenCapacityIsExceeded" id="cpptest.provider://stringTyped_test/3::AppendCharDoesNotChangeStringWhenCapacityIsExceeded" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubstrWithDefaultPosAndSizeResultsInWholeString" id="cpptest.provider://stringTyped_test/3::SubstrWithDefaultPosAndSizeResultsInWholeString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubstrWithInvalidPosFails" id="cpptest.provider://stringTyped_test/3::SubstrWithInvalidPosFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindEmptyStringInEmptyStringWorks" id="cpptest.provider://stringTyped_test/3::FindEmptyStringInEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/3::FindStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfFailsForEmptyStringInEmptyString" id="cpptest.provider://stringTyped_test/3::FindFirstOfFailsForEmptyStringInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfForStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/3::FindFirstOfForStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfFailsForEmptyStringInEmptyString" id="cpptest.provider://stringTyped_test/3::FindLastOfFailsForEmptyStringInEmptyString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfForStringInEmptyStringFails" id="cpptest.provider://stringTyped_test/3::FindLastOfForStringInEmptyStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaAtFails" id="cpptest.provider://stringTyped_test/3::AccessPositionOfEmptyStringViaAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaAtFails" id="cpptest.provider://stringTyped_test/3::AccessPositionOutOfBoundsViaAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNonEmptyStringViaAtReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/3::AccessFirstPositionOfNonEmptyStringViaAtReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessAndAssignToMaxPositionOfNotEmptyStringViaAtSucceeds" id="cpptest.provider://stringTyped_test/3::AccessAndAssignToMaxPositionOfNotEmptyStringViaAtSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaConstAtFails" id="cpptest.provider://stringTyped_test/3::AccessPositionOfEmptyStringViaConstAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaConstAtFails" id="cpptest.provider://stringTyped_test/3::AccessPositionOutOfBoundsViaConstAtFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaConstAtReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/3::AccessFirstPositionOfNotEmptyStringViaConstAtReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessMaxPositionOfNotEmptyStringViaConstAtSucceeds" id="cpptest.provider://stringTyped_test/3::AccessMaxPositionOfNotEmptyStringViaConstAtSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/3::AccessPositionOfEmptyStringViaSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/3::AccessPositionOutOfBoundsViaSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaSubscriptOperatorReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/3::AccessFirstPositionOfNotEmptyStringViaSubscriptOperatorReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessAndAssignToMaxPositionOfNotEmptyStringViaSubscriptOperatorSucceeds" id="cpptest.provider://stringTyped_test/3::AccessAndAssignToMaxPositionOfNotEmptyStringViaSubscriptOperatorSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOfEmptyStringViaConstSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/3::AccessPositionOfEmptyStringViaConstSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessPositionOutOfBoundsViaConstSubscriptOperatorFails" id="cpptest.provider://stringTyped_test/3::AccessPositionOutOfBoundsViaConstSubscriptOperatorFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessFirstPositionOfNotEmptyStringViaConstSubscriptOperatorReturnsCorrectCharacter" id="cpptest.provider://stringTyped_test/3::AccessFirstPositionOfNotEmptyStringViaConstSubscriptOperatorReturnsCorrectCharacter" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AccessMaxPositionOfNotEmptyStringViaConstSubscriptOperatorSucceeds" id="cpptest.provider://stringTyped_test/3::AccessMaxPositionOfNotEmptyStringViaConstSubscriptOperatorSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralToEmptyStringWorks" id="cpptest.provider://stringTyped_test/3::InsertStringLiteralToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertEmptyStringLiteralDoesNotChangeTheString" id="cpptest.provider://stringTyped_test/3::InsertEmptyStringLiteralDoesNotChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralWithCountGreaterThanSizeOfStringLiteralFails" id="cpptest.provider://stringTyped_test/3::InsertStringLiteralWithCountGreaterThanSizeOfStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralWithCount0DoesntChangeTheString" id="cpptest.provider://stringTyped_test/3::InsertStringLiteralWithCount0DoesntChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringToEmptyStringWorks" id="cpptest.provider://stringTyped_test/3::InsertCxxStringToEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertEmptyCxxStringDoesNotChangeTheString" id="cpptest.provider://stringTyped_test/3::InsertEmptyCxxStringDoesNotChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringWithCountGreaterThanSizeOfStringLiteralFails" id="cpptest.provider://stringTyped_test/3::InsertCxxStringWithCountGreaterThanSizeOfStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringWithCount0DoesntChangeTheString" id="cpptest.provider://stringTyped_test/3::InsertCxxStringWithCount0DoesntChangeTheString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UncheckedAtWorks" id="cpptest.provider://stringTyped_test/3::UncheckedAtWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="String100" id="cpptest.provider://String100" total="17" fail="0" err="0" pass="17" >
                  <Test ln="1" auth="" locRef="" name="UnsafeCharToStringConstrIncludingNullCharWithCountResultsInSizeCount" id="cpptest.provider://String100::UnsafeCharToStringConstrIncludingNullCharWithCountResultsInSizeCount" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareStringsInclNullCharacterWorks" id="cpptest.provider://String100::CompareStringsInclNullCharacterWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CompareStringsWithDifferentCapaInclNullCharacterWorks" id="cpptest.provider://String100::CompareStringsWithDifferentCapaInclNullCharacterWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubstrWithDefaultSizeWorks" id="cpptest.provider://String100::SubstrWithDefaultSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SubstrWithValidPosAndSizeWorks" id="cpptest.provider://String100::SubstrWithValidPosAndSizeWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindStringInNotEmptyStringWorks" id="cpptest.provider://String100::FindStringInNotEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindNotIncludedStringFails" id="cpptest.provider://String100::FindNotIncludedStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindStringLiteralInNotEmptyStringWorks" id="cpptest.provider://String100::FindStringLiteralInNotEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindNotIncludedStringLiteralFails" id="cpptest.provider://String100::FindNotIncludedStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfForStringInNotEmptyStringWorks" id="cpptest.provider://String100::FindFirstOfForStringInNotEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfForNotIncludedStringFails" id="cpptest.provider://String100::FindFirstOfForNotIncludedStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfForStringLiteralInNotEmptyStringWorks" id="cpptest.provider://String100::FindFirstOfForStringLiteralInNotEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindFirstOfForNotIncludedStringLiteralFails" id="cpptest.provider://String100::FindFirstOfForNotIncludedStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfForStringInNotEmptyStringWorks" id="cpptest.provider://String100::FindLastOfForStringInNotEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfForNotIncludedStringFails" id="cpptest.provider://String100::FindLastOfForNotIncludedStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfForStringLiteralInNotEmptyStringWorks" id="cpptest.provider://String100::FindLastOfForStringLiteralInNotEmptyStringWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="FindLastOfForNotIncludedStringLiteralFails" id="cpptest.provider://String100::FindLastOfForNotIncludedStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="CharArrayAssignment" id="cpptest.provider://CharArrayAssignment" total="3" fail="0" err="0" pass="3" >
                  <Test ln="1" auth="" locRef="" name="AssignCharArrayWithStringSizeLessThanArraySize" id="cpptest.provider://CharArrayAssignment::AssignCharArrayWithStringSizeLessThanArraySize" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignZeroTerminatedCharArrayWithSizeForFullCapa" id="cpptest.provider://CharArrayAssignment::AssignZeroTerminatedCharArrayWithSizeForFullCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AssignNonZeroTerminatedCharArrayOfSizeForFullCapa" id="cpptest.provider://CharArrayAssignment::AssignNonZeroTerminatedCharArrayOfSizeForFullCapa" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="StringLiteralConcatenation" id="cpptest.provider://StringLiteralConcatenation" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="ConcatenateOnlyStringLiteralsWorks" id="cpptest.provider://StringLiteralConcatenation::ConcatenateOnlyStringLiteralsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="CharConcatenation" id="cpptest.provider://CharConcatenation" total="1" fail="0" err="0" pass="1" >
                  <Test ln="1" auth="" locRef="" name="ConcatenateOnlyCharsWorks" id="cpptest.provider://CharConcatenation::ConcatenateOnlyCharsWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="String10" id="cpptest.provider://String10" total="17" fail="0" err="0" pass="17" >
                  <Test ln="1" auth="" locRef="" name="ConcatenateSeveralCharsAndStringsWithOperatorPlusWorks" id="cpptest.provider://String10::ConcatenateSeveralCharsAndStringsWithOperatorPlusWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendFittingStringLiteralWorks" id="cpptest.provider://String10::UnsafeAppendFittingStringLiteralWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="UnsafeAppendTooLargeStringLiteralFails" id="cpptest.provider://String10::UnsafeAppendTooLargeStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendStringLiteralResultsInConcatenatedString" id="cpptest.provider://String10::AppendStringLiteralResultsInConcatenatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="AppendTooLargeStringLiteralResultsInTruncatedString" id="cpptest.provider://String10::AppendTooLargeStringLiteralResultsInTruncatedString" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralAtTheBeginningOfTheStringSucceeds" id="cpptest.provider://String10::InsertStringLiteralAtTheBeginningOfTheStringSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralInTheMiddleOfTheStringSucceeds" id="cpptest.provider://String10::InsertStringLiteralInTheMiddleOfTheStringSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralAtTheEndOfTheStringSucceeds" id="cpptest.provider://String10::InsertStringLiteralAtTheEndOfTheStringSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertTooLargeStringLiteralFails" id="cpptest.provider://String10::InsertTooLargeStringLiteralFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertTooLargeStringLiteralWithSmallCountSucceeds" id="cpptest.provider://String10::InsertTooLargeStringLiteralWithSmallCountSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertStringLiteralAtPositionGreaterStringSizeFails" id="cpptest.provider://String10::InsertStringLiteralAtPositionGreaterStringSizeFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringAtTheBeginningOfTheStringSucceeds" id="cpptest.provider://String10::InsertCxxStringAtTheBeginningOfTheStringSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringInTheMiddleOfTheStringSucceeds" id="cpptest.provider://String10::InsertCxxStringInTheMiddleOfTheStringSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringAtTheEndOfTheStringSucceeds" id="cpptest.provider://String10::InsertCxxStringAtTheEndOfTheStringSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertTooLargeCxxStringFails" id="cpptest.provider://String10::InsertTooLargeCxxStringFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertTooLargeCxxStringWithSmallCountSucceeds" id="cpptest.provider://String10::InsertTooLargeCxxStringWithSmallCountSucceeds" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InsertCxxStringAtPositionGreaterStringSizeFails" id="cpptest.provider://String10::InsertCxxStringAtPositionGreaterStringSizeFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="stringTyped_test" id="cpptest.provider://stringTyped_test" total="2" fail="0" err="0" pass="2" >
                  <Test ln="1" auth="" locRef="" name="NonCxxStringsAreIdentifiedCorrectly" id="cpptest.provider://stringTyped_test::NonCxxStringsAreIdentifiedCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CxxStringsAreIdentifiedCorrectly" id="cpptest.provider://stringTyped_test::CxxStringsAreIdentifiedCorrectly" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
               <TestSuite ln="1" locRef="" root="true" name="variant_Test" id="cpptest.provider://variant_Test" total="55" fail="0" err="0" pass="55" >
                  <Test ln="1" auth="" locRef="" name="DefaultCTorCreatesInvalidVariant" id="cpptest.provider://variant_Test::DefaultCTorCreatesInvalidVariant" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InitializedVariantReturnsCorrectIndex" id="cpptest.provider://variant_Test::InitializedVariantReturnsCorrectIndex" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingVariantFromPODTypeReturnsProvidedValue" id="cpptest.provider://variant_Test::CreatingVariantFromPODTypeReturnsProvidedValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingVariantFromLValueReturnsProvidedValue" id="cpptest.provider://variant_Test::CreatingVariantFromLValueReturnsProvidedValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingVariantWithSameTypeChoosesFirstFittingType" id="cpptest.provider://variant_Test::CreatingVariantWithSameTypeChoosesFirstFittingType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceValidElementWorks" id="cpptest.provider://variant_Test::EmplaceValidElementWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceSecondValidElementWorks" id="cpptest.provider://variant_Test::EmplaceSecondValidElementWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="EmplaceInvalidElementCompileTimeCheck" id="cpptest.provider://variant_Test::EmplaceInvalidElementCompileTimeCheck" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GetOnUninitializedVariantFails" id="cpptest.provider://variant_Test::GetOnUninitializedVariantFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GetVariantWithCorrectValueWorks" id="cpptest.provider://variant_Test::GetVariantWithCorrectValueWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="GetVariantWithIncorrectValueFails" id="cpptest.provider://variant_Test::GetVariantWithIncorrectValueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstGetOnUninitializedVariantFails" id="cpptest.provider://variant_Test::ConstGetOnUninitializedVariantFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="constGetVariantWithCorrectValue" id="cpptest.provider://variant_Test::constGetVariantWithCorrectValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstGetVariantWithIncorrectValueFails" id="cpptest.provider://variant_Test::ConstGetVariantWithIncorrectValueFails" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="Get_ifWhenUninitializedReturnsProvidedValue" id="cpptest.provider://variant_Test::Get_ifWhenUninitializedReturnsProvidedValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="Get_ifInitializedWithCorrectValueWorks" id="cpptest.provider://variant_Test::Get_ifInitializedWithCorrectValueWorks" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="Get_ifInitializedWithIncorrectValueReturnsProvidedValue" id="cpptest.provider://variant_Test::Get_ifInitializedWithIncorrectValueReturnsProvidedValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DTorIsCalled" id="cpptest.provider://variant_Test::DTorIsCalled" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DTorIsCalledAfterEmplace" id="cpptest.provider://variant_Test::DTorIsCalledAfterEmplace" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyCTorWithValueLeadsToSameValue" id="cpptest.provider://variant_Test::CopyCTorWithValueLeadsToSameValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyCTorWithoutValueResultsInInvalidVariant" id="cpptest.provider://variant_Test::CopyCTorWithoutValueResultsInInvalidVariant" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithValueLeadsToSameValue" id="cpptest.provider://variant_Test::CopyAssignmentWithValueLeadsToSameValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyAssignmentWithoutValueResultsInInvalidVariant" id="cpptest.provider://variant_Test::CopyAssignmentWithoutValueResultsInInvalidVariant" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveCTorWithValueLeadsToSameValue" id="cpptest.provider://variant_Test::MoveCTorWithValueLeadsToSameValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveCTorWithoutValueResultsInInvalidVariant" id="cpptest.provider://variant_Test::MoveCTorWithoutValueResultsInInvalidVariant" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithValueLeadsToSameValue" id="cpptest.provider://variant_Test::MoveAssignmentWithValueLeadsToSameValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveAssignmentWithoutValueResultsInInvalidVariant" id="cpptest.provider://variant_Test::MoveAssignmentWithoutValueResultsInInvalidVariant" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingSecondObjectViaCopyCTorResultsInTwoDTorCalls" id="cpptest.provider://variant_Test::CreatingSecondObjectViaCopyCTorResultsInTwoDTorCalls" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingSecondObjectViaCopyAssignmentResultsInTwoDTorCalls" id="cpptest.provider://variant_Test::CreatingSecondObjectViaCopyAssignmentResultsInTwoDTorCalls" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingSecondObjectViaMoveCTorResultsInTwoDTorCalls" id="cpptest.provider://variant_Test::CreatingSecondObjectViaMoveCTorResultsInTwoDTorCalls" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CreatingSecondObjectViaMoveAssignmentResultsInTwoDTorCalls" id="cpptest.provider://variant_Test::CreatingSecondObjectViaMoveAssignmentResultsInTwoDTorCalls" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DirectValueAssignmentResultsInCorrectIndex" id="cpptest.provider://variant_Test::DirectValueAssignmentResultsInCorrectIndex" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="DirectValueAssignmentWhenAlreadyAssignedWithDifferentType" id="cpptest.provider://variant_Test::DirectValueAssignmentWhenAlreadyAssignedWithDifferentType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="HoldsAlternativeForCorrectType" id="cpptest.provider://variant_Test::HoldsAlternativeForCorrectType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="HoldsAlternativeForIncorrectType" id="cpptest.provider://variant_Test::HoldsAlternativeForIncorrectType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SameTypeVariantAndEmplaceWithIndexResultsInCorrectValue" id="cpptest.provider://variant_Test::SameTypeVariantAndEmplaceWithIndexResultsInCorrectValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SameTypeVariantResultsInCorrectIndex" id="cpptest.provider://variant_Test::SameTypeVariantResultsInCorrectIndex" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="SameTypeVariantReturnsNothingForIncorrectIndex" id="cpptest.provider://variant_Test::SameTypeVariantReturnsNothingForIncorrectIndex" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ConstSameTypeVariantAndEmplaceWithIndexResultsInCorrectValue" id="cpptest.provider://variant_Test::ConstSameTypeVariantAndEmplaceWithIndexResultsInCorrectValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InPlaceAtIndexCTorResultsInCorrectIndexAndValue" id="cpptest.provider://variant_Test::InPlaceAtIndexCTorResultsInCorrectIndexAndValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InPlaceAtTypeCTorResultsInCorrectIndexAndValue" id="cpptest.provider://variant_Test::InPlaceAtTypeCTorResultsInCorrectIndexAndValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ComplexDTorUsingWrongTypeResultsInNoDTorCall" id="cpptest.provider://variant_Test::ComplexDTorUsingWrongTypeResultsInNoDTorCall" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ComplexDTorUsingCorrectTypeWithEmplace" id="cpptest.provider://variant_Test::ComplexDTorUsingCorrectTypeWithEmplace" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ComplexDTorUsingCorrectTypeWithInPlace" id="cpptest.provider://variant_Test::ComplexDTorUsingCorrectTypeWithInPlace" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ComplexDTorWithCopyCTor" id="cpptest.provider://variant_Test::ComplexDTorWithCopyCTor" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ComplexDTorWithCopyAssignmentTwoVariantsWithValue" id="cpptest.provider://variant_Test::ComplexDTorWithCopyAssignmentTwoVariantsWithValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ComplexDTorWithMove" id="cpptest.provider://variant_Test::ComplexDTorWithMove" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ComplexDTorWithMoveAssignment" id="cpptest.provider://variant_Test::ComplexDTorWithMoveAssignment" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="ComplexDTorWithMoveAssignmentTwoVariantsWithValue" id="cpptest.provider://variant_Test::ComplexDTorWithMoveAssignmentTwoVariantsWithValue" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="MoveVariantIntoVariantOfDifferentType" id="cpptest.provider://variant_Test::MoveVariantIntoVariantOfDifferentType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="CopyVariantIntoVariantOfDifferentType" id="cpptest.provider://variant_Test::CopyVariantIntoVariantOfDifferentType" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoInvalidVariantsAreEqual" id="cpptest.provider://variant_Test::TwoInvalidVariantsAreEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="InvalidAndValidVariantAreUnequal" id="cpptest.provider://variant_Test::InvalidAndValidVariantAreUnequal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoVariantsWithEqualValuesAreEqual" id="cpptest.provider://variant_Test::TwoVariantsWithEqualValuesAreEqual" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
                  <Test ln="1" auth="" locRef="" name="TwoVariantsWithUnequalValueAreUnequal" id="cpptest.provider://variant_Test::TwoVariantsWithUnequalValueAreUnequal" status="pass" total="1" fail="0" err="0" pass="1" >
                  </Test>
               </TestSuite>
            </Project>
         </Total>
      </ExecutedTestsDetails>
   </Exec>
</ResultsSession>
